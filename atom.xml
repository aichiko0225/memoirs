<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ash</title>
  
  <subtitle>我只是一个影子，虽然我发着光。。。</subtitle>
  <link href="https://aichiko0225.github.com/memoirs/atom.xml" rel="self"/>
  
  <link href="https://aichiko0225.github.com/memoirs/"/>
  <updated>2024-12-13T09:15:46.733Z</updated>
  <id>https://aichiko0225.github.com/memoirs/</id>
  
  <author>
    <name>ash66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>广州马拉松</title>
    <link href="https://aichiko0225.github.com/memoirs/20241212/running/guangzhou/"/>
    <id>https://aichiko0225.github.com/memoirs/20241212/running/guangzhou/</id>
    <published>2024-12-12T09:12:20.000Z</published>
    <updated>2024-12-13T09:15:46.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马拉松中签"><a href="#马拉松中签" class="headerlink" title="马拉松中签"></a>马拉松中签</h3><p>今年挺幸运的，第二轮的补录，中签了广州马拉松。作为全国的大满贯赛事，我还是很希望广州马拉松能够中签的，毕竟武汉马拉松连续4年没有中。</p><p>时间过得挺快的，不知不觉上一篇已经是3年前了。</p><p>今年跑步一点都不积极，月跑量可能只有20KM左右。</p><p>本来中签了孝感马拉松，但是那天我身体状态不好直接放弃了。</p><p>然后在广州马拉松开赛前的三周，我每周的跑量都是40左右，这个已经是我能够做到的极限了。</p><p>跑步是一个时间成本很高的运动，需要大量的时间。</p><!-- ![起点](/images/running/guangzhou_2.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/running/guangzhou_2.jpg" alt="起点"/></div><div class="image-meta"><span class="image-caption center">起点</span></div></div><h3 id="顺利完赛"><a href="#顺利完赛" class="headerlink" title="顺利完赛"></a>顺利完赛</h3><p>作为我的第一次马拉松（全马），我很认真准备了三周，最后一周的周日跑了一个21公里。</p><p>三周的训练时间，每个周末都会拉一个长距离，15KM -&gt; 18KM -&gt; 21KM，逐渐加长。</p><p>所以我对35KM是有信心完成的，后面的就不知道了，跑之前的计划是，35公里之后走一半跑一半，5小时内完赛就是胜利✌🏻</p><p>比赛当日的广州天气很好，温度很合适，而且有风，风也不大。</p><p>但是最后的8公里确实让人绝望，35KM之后的每一公里都是痛苦面具。</p><p>不过最后的成绩跟我预料的相差不大。</p><!-- ![成绩](/images/running/guangzhou_achieve.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/running/guangzhou_achieve.jpg" alt="成绩"/></div><div class="image-meta"><span class="image-caption center">成绩</span></div></div><h4 id="完赛前的视频"><a href="#完赛前的视频" class="headerlink" title="完赛前的视频"></a>完赛前的视频</h4><div class="tag-plugin video" style="max-width:50%;">  <video controls preload>  <source src="/memoirs/assets/guangzhou_3.mp4" type="video/mp4">Your browser does not support the video tag.  </video>  </div>  <h3 id="夜游广州"><a href="#夜游广州" class="headerlink" title="夜游广州"></a>夜游广州</h3><p>多年后来到广州，重新去了珠江边，上了珠江边的那个发着光的大桥。</p><p>当然首先是吃了一个晚饭，或者说中饭。因为我拿到赛事大礼包的时候已经3点多了，将近4点。</p><!-- ![米粒和夕夕](/images/minnie/guangzhou1.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/minnie/guangzhou1.jpg" alt="米粒和夕夕"/></div><div class="image-meta"><span class="image-caption center">米粒和夕夕</span></div></div><p>大桥可以联通到珠江中间的二沙岛，二沙岛旁边就是马拉松的终点 - 海心沙</p><p>远远看去，那座桥像鹊桥一样，勾勒出一个很好看的弧形一直延伸到珠江中间的岛上。</p><p>因为桥的轮廓是发着光的，很有未来科技的感觉，反而是珠江中间的海心沙，融入黑暗中，让人感觉这座发光的鹊桥横跨了黑暗，一路延伸。</p><div class="tag-plugin gallery grid-box" size="xl" ratio="origin"><div class="grid-cell"><img data-fancybox="gallery-1" src="/memoirs/images/minnie/guangzhou2.jpg" alt="米粒"/><div class="image-meta"><span class="image-caption">米粒</span></div></div><div class="grid-cell"><img data-fancybox="gallery-1" src="/memoirs/images/minnie/guangzhou3.jpg" alt="米粒"/><div class="image-meta"><span class="image-caption">米粒</span></div></div></div><h2 id="长隆野生动物园"><a href="#长隆野生动物园" class="headerlink" title="长隆野生动物园"></a>长隆野生动物园</h2><p>第二天约好了一起去长隆野生动物园，不过因为要补课要12点才能下课，我们只能中午吃完饭之后出发，到达长隆的时候已经是2点多了。</p><p>我好像从没去过长隆，以前在广州的时候没有机会体验这些。</p><p>长隆有一点类似迪士尼的样子，不过长隆把几个乐园分开了，欢乐世界、水上乐园、野生动物园。同样的，门票也分开了，相比于迪士尼的599，还是相对便宜的，也只是相对便宜而已！</p><p>长隆野生动物园还是非常适合小孩子的，坐着小火车穿越丛林、草原，非洲的、美洲的，还有亚洲的动物都可以看见。</p><p>那些狮子老虎居然躺在山上看着我们，我们可以在小火车上跟狮子遥相对望。不过狮子们好像对我们没有兴趣，它们是我们的风景，我们也是他们的风景。</p><p>每每去动物园看这些，我都会想起一个电影《楚门的世界》。这个世界好像一个巨大的楚门的世界，每个人都在表演，表演活着，表演高兴、悲伤、痛苦，以及生离死别。</p><!-- ![非洲大草原](/images/running/guangzhou_3.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/running/guangzhou_3.jpg" alt="非洲大草原"/></div><div class="image-meta"><span class="image-caption center">非洲大草原</span></div></div><p>做完火车之后就可以自由选择路线了，有的孩子愿意去<strong>青龙山</strong>看蛇和恐龙，由于之前有一个小朋友被恐龙吓哭了，我们就不去看恐龙了。</p><p>另外一条路线可以看花车游行，还可以看见大熊猫，看完大熊猫可以坐缆车回去。 </p><p>花车游行的时候我抱着小米粒，所以没办法拍视频，只有米粒和八戒的合照🙂🙂🙂</p><!-- ![米粒和八戒](/images/minnie/guangzhou4.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/minnie/guangzhou4.jpg" alt="米粒和八戒"/></div><div class="image-meta"><span class="image-caption center">米粒和八戒</span></div></div><p>后面游行完之后还有看大熊猫，三胞胎的大兄弟，全国也只有这一对。</p><p>但是这个时候我已经是困得不行了，加上看熊猫的人太热情了，人巨多，最后我累倒在一个小游乐场的餐桌前。</p><p>我只记得我趴着睡着了，睡醒的时候已经天黑了。小朋友们还很有激情，看着转转的飞天座椅，兴冲冲的排队。</p><p>结果在关门前的最后一轮，被挡在了前面，没有成功上去。</p><p>小朋友吃完了零食和冰淇淋，只能很失望的下山了。</p><h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>返程日的天气真好，阳光明媚的。</p><p>完赛之后大概是12点半，阳台晒在身上懒洋洋的，像一个调皮的孩子在你的皮肤上打滚，或者开心的在上面跳舞。</p><p>从海心沙走到地铁站真的好远啊，我跑完了42公里，还要走半个小时才能到地铁站。</p><p>从广州塔出来，阳光更舒服了，基本上可以穿着短袖短裤享受阳光。</p><!-- ![米粒和广州塔](/images/minnie/guangzhou.jpg) --><div class="tag-plugin image"><div class="image-bg"><img src="/memoirs/images/minnie/guangzhou.jpg" alt="米粒和广州塔"/></div><div class="image-meta"><span class="image-caption center">米粒和广州塔</span></div></div><p>在广州塔玩耍了几个小时，到了吃饭的点，吃完饭就该去赶火车了。</p><p>这个时候身体已经冷下来了，右腿一脚不能弯曲了，一弯曲就疼的不行，基本上只能一瘸一拐的走路。</p><p>综合我的训练量，这个结果是必然的，最后的8公里已经超出了我的能力极限。</p><div class="tag-plugin quot"><p class="content" type="text"><span class="empty"></span><span class="text">广马是什么？</span><span class="empty"></span></p></div><div class="tag-plugin quot"><p class="content" type="icon"><img class="icon prefix" src="https://api.iconify.design/line-md:moon-alt-to-sunny-outline-loop-transition.svg" /><span class="text">是无数颗心不舍昼夜</span><span class="empty"></span></p></div><div class="tag-plugin quot"><p class="content" type="icon"><span class="empty"></span><span class="text">是无数颗心不舍昼夜 共同书写的一场</span><img class="icon prefix" src="https://api.iconify.design/solar:running-round-bold-duotone.svg" /></p></div><div class="tag-plugin quot"><p class="content" type="icon"><span class="empty"></span><span class="text">关于热爱和信念的伟大篇章</span><img class="icon prefix" src="https://api.iconify.design/solar:running-round-bold-duotone.svg" /></p></div><div class="tag-plugin quot"><p class="content" type="icon"><span class="empty"></span><span class="text">是讲述不完的一个个故事</span><img class="icon prefix" src="https://api.iconify.design/solar:running-round-bold-duotone.svg" /></p></div><div class="tag-plugin quot"><p class="content" type="icon"><span class="empty"></span><span class="text">是分享不完的一串串感动</span><img class="icon prefix" src="https://api.iconify.design/solar:running-round-bold-duotone.svg" /></p></div><div class="tag-plugin quot"><p class="content" type="icon"><span class="empty"></span><span class="text">----是</span><img class="icon prefix" src="https://api.iconify.design/solar:running-round-bold-duotone.svg" /></p></div><div class="tag-plugin quot"><p class="content" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e092ff.png" /><span class="text">“我们的力量”</span><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e0ab55.png" /></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;马拉松中签&quot;&gt;&lt;a href=&quot;#马拉松中签&quot; class=&quot;headerlink&quot; title=&quot;马拉松中签&quot;&gt;&lt;/a&gt;马拉松中签&lt;/h3&gt;&lt;p&gt;今年挺幸运的，第二轮的补录，中签了广州马拉松。作为全国的大满贯赛事，我还是很希望广州马拉松能够中签的，毕竟武汉马拉松</summary>
      
    
    
    
    <category term="跑步的故事" scheme="https://aichiko0225.github.com/memoirs/categories/%E8%B7%91%E6%AD%A5%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    
    
    <category term="随便写写" scheme="https://aichiko0225.github.com/memoirs/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>乡土中国</title>
    <link href="https://aichiko0225.github.com/memoirs/20210915/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD/"/>
    <id>https://aichiko0225.github.com/memoirs/20210915/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD/</id>
    <published>2021-09-14T16:00:00.000Z</published>
    <updated>2021-09-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>《乡土中国》是社会学的经典书，可以说是经典中的经典，也是所有研究中国的人必读的一本书。</p><p>这本书讲的是中国人的社会操作系统，是研究中国人复杂思维非常重要的一块基石，</p><h3 id="一、乡土本色"><a href="#一、乡土本色" class="headerlink" title="一、乡土本色"></a>一、乡土本色</h3><ol><li><p>中国基层社会是“乡土性的”。“乡土性”对应着自古以来人们对土地的依附和“不流动”。</p><p> 从历史的角度：“我们的民族确是和泥土分不开的了。<br> 从土里长出过光荣的历史，自然也会受到土的束缚…”<br> 从地理的角度：“农业和游牧或工业不同，它是直接取资于土地的。游牧的人可以逐水草而居，飘忽无定；做工业的人可以择地而居，迁移无碍；而种地的人却搬不动地，长在土里的庄稼行动不得，侍候庄稼的老农也因之像是半身插入了土里，土气是因为不流动而发生的。”</p></li><li><p>“不流动”是指中国农村以村落为单位彼此孤立隔绝。</p><p> “不流动是从人和空间的关系上说的，从人和人在空间的排列关系上说就是孤立和隔膜。孤立和隔膜并不是以个人为单位的，而是以住在一处的集团为单位的。”</p></li><li><p>中国农村聚村而居大致由于4个原因：小农经营下屋舍与农田较近、共用水力设施的需要、安全的需要、土地不断继承积累。</p></li><li><p>在缺乏流动性的乡土社会，每个人从出生便被嵌入了熟人社会的网络。</p><p> “乡土社会在地方性的限制下成了生于斯、死于斯的社会。常态的生活是终老是乡。…这是一个“熟悉”的社会，没有陌生人的社会。”</p></li><li><p>传统熟人社会依靠习俗和人与人之间的了解维系，与现代社会所讲的规则和契约精神产生了冲突。</p><p> “在一个熟悉的社会中，我们会得到从心所欲而不逾规矩的自由。这和法律所保障的自由不同。规矩不是法律，规矩是“习”出来的礼俗。从俗即是从心。换一句话说，社会和个人在这里通了家。”</p><p> “乡土社会的信用并不是对契约的重视，而是发生于对一种行为的规矩熟悉到不假思索时的可靠性。”</p></li></ol><p>“这种办法在一个陌生人面前是无法应用的。在我们社会的急速变迁中，从乡土社会进入现代社会的过程中，我们在乡土社会中所养成的生活方式处处产生了流弊。陌生人所组成的现代社会是无法用乡土社会的习俗来应付的。”</p><h3 id="二、文字下乡（空间尺度上文字在乡村的价值）"><a href="#二、文字下乡（空间尺度上文字在乡村的价值）" class="headerlink" title="二、文字下乡（空间尺度上文字在乡村的价值）"></a>二、文字下乡（空间尺度上文字在乡村的价值）</h3><ol><li><p>乡下人与城里人知识结构不尽相同，易产生乡下人“愚”的误解。</p></li><li><p>“乡下多文盲”与熟人社会下运用“特殊语言”比文字间接表意更有效有关。面对面能解决的事不必诉诸文字。</p><p> “特殊语言”不过是亲密社群中所使用的象征体系的一部分，用声音来作象征的那一部分。在亲密社群中可用来作象征体系的原料比较多。表情、动作，在面对面的情境中，有时比声音更容易传情达意。</p><p> “特殊语言”常是特别有效，因为它可以摆脱字句的固定意义。语言像是个社会定下的筛子，如果我们有一种情意和这筛子的格子不同也就漏不过去。</p><p> “在乡土社会中，不但文字是多余的，连语言都并不是传达情意的唯一象征体系。”</p></li><li><p>文字下乡需要结合现实情况。</p><p> “我决不是说我们不必推行文字下乡，在现代化的过程中，我们已经开始抛离乡土社会，文字是现代化的工具。我要辨明的是乡土社会中的文盲，并非出于乡下人的“愚”，而是由于乡土社会的本质。</br><br> 而且我还愿意进一步说，单从文字和语言的角度中去批判一个社会中人和人的了解程度是不够的，因为文字和语言，只是传情达意的一种工具，并非唯一的工具；而且这工具本身也是有缺陷的，能传的情、能达的意是有限的。</br><br> 所以提倡文字下乡的人，必须先考虑到文字和语言的基础。”</p></li></ol><h3 id="三、再论文字下乡（时间尺度上文字在乡村的价值）"><a href="#三、再论文字下乡（时间尺度上文字在乡村的价值）" class="headerlink" title="三、再论文字下乡（时间尺度上文字在乡村的价值）"></a>三、再论文字下乡（时间尺度上文字在乡村的价值）</h3><ol><li><p>人靠一套象征体系来存储记忆，因为人凭借记忆积累的过去的经验对现在的生活有益。而对集体而言，共同的记忆就是文化。</p><p> “文化是依赖象征体系和个人的记忆而维护着的社会共同经验。”</p></li><li><p>这套象征体系中最重要的就是“词”，但“词”不等于“文”，前者是文化存续的前提而后者不是。</p><p> “我们不断地在学习时说着话，把具体的情境抽象成一套能普遍应用的概念，概念必然是用词来表现的，于是我们靠着词，使我们从特殊走上普遍，在个别情境中搭下了桥梁；又使我们从当前走到今后，在片刻情境中搭下了桥梁。”</p><p> “没有象征体系也就没有概念，人的经验也就不能或不易在时间里累积”</p><p> “但是词却不一定要文。文是用眼睛可以看得到的符号，就是字。词不一定是刻出来或写出来的符号，也可以是用声音说出来的符号，语言。一切文化中不能没有“词”，可是不一定有“文字”。”</p></li><li><p>乡土社会的人日出而作日落而息生活定型，乡土社会的历史轨迹也是一条直线，语言足以传递代际经验，不需要文字了。而文字既不产生于基层也不属于基层乡土社会。所以只有在乡土性的基层发生了变化后，文字才能下乡。</p><p> “当一个人碰着生活上的问题时，他必然能在一个比他年长的人那里问得到解决这问题的有效办法，因为大家在同一环境里，走同一道路，他先走，你后走；后走的所踏的是先走的人的脚印，口口相传，不会有遗漏。哪里用得着文字？时间里没有阻隔，拉得十分紧，全部文化可以在亲子之间传授无缺。”</p></li></ol><h3 id="四、差序格局（划重点）"><a href="#四、差序格局（划重点）" class="headerlink" title="四、差序格局（划重点）"></a>四、差序格局（划重点）</h3><ol><li><p>在中国，由“私”引起的社会问题很普遍，“私”与“差序格局”密切相关。</p><p> “一说是公家的，差不多就是说大家可以占一点便宜的意思，有权利而没有义务了。”</p><p> “于是像格兰亨姆的公律，坏钱驱逐好钱一般，公德心就在这里被自私心驱走。”（外在激励与自我利益最大化）</p><p> “所谓贪污无能，并不是每个人绝对的能力问题，而是相对的，是从个人对公家的服务和责任上说的。”</p></li><li><p>与西方社会界限分明的“团体格局”不同，中国的“差序格局”下，团体的界限并不清晰，无论是在亲属关系还是地缘关系中，团体以个人为中心，其覆盖范围是任意的，正如投石入水激起的涟漪。</p><p> “这个网络像个蜘蛛的网，有一个中心，就是自己。我们每个人都有这么一个以亲属关系布出去的网，但是没有一个网所罩住的人是相同的。在一个社会里的人可以用同一个体系来记认他们的亲属，所同的只是这体系罢了。体系是抽象的格局”</p><p> “中国人也特别对世态炎凉有感触，正因为这富于伸缩的社会圈子会因中心势力的变化而大小。”</p></li><li><p>正是因为团体界限不清晰，我们乡土社会讲交情而不是权利。</p><p> “在孩子成年了住在家里都得给父母膳食费的西洋社会里，大家承认团体的界限。在团体里的有一定的资格。资格取消了就得走出这个团体。在他们不是人情冷热的问题，而是权利问题。在西洋社会里争的是权利，而在我们却是攀关系、讲交情。”</p></li><li><p>正是因为以“己”为中心，乡土社会利己的自我主义突出。</p><p> “在个人主义下，一方面是平等观念，指在同一团体中各分子的地位相等，个人不能侵犯大家的权利；一方面是宪法观念，指团体不能抹煞个人，只能在个人们所愿意交出的一分权利上控制个人。</br><br> 这些观念必须先假定了团体的存在。在我们中国传统思想里是没有这一套的，因为我们所有的是自我主义，一切价值是以“己”作为中心的主义。”</p></li><li><p>与西方不同，乡土社会的“公”与“私”是相对的，不利于现代国家观念的形成。</p><p> “国是皇帝之家，界线从来就是不清不楚的，不过是从自己这个中心里推出去的社会势力里的一圈而已。</br><br> 所以可以着手的，具体的只有己，克己也就成了社会生活中最重要的德行，他们不会去克群，使群不致侵略个人的权利。</br><br> 在这种差序格局中，是不会发生这问题的。”</p></li></ol><h3 id="五、系维着私人的道德"><a href="#五、系维着私人的道德" class="headerlink" title="五、系维着私人的道德"></a>五、系维着私人的道德</h3><ol><li><p>社会结构或者说社会格局决定社会的道德观念。</p><p> “道德观念是在社会里生活的人自觉应当遵守社会行为规范的信念。它包括着行为规范、行为者的信念和社会的制裁。它的内容是人和人关系的行为规范，是依着该社会的格局而决定的。</br><br> 从社会观点说，道德是社会对个人行为的制裁力，使他们合于规定下的形式行事，用以维持该社会的生存和绵续。”</p></li><li><p>西方“团体格局”在宗教的影响下形成，“神”象征着团体，人在神前平等，在团体（如国家）中平等享有权利履行义务，没有人可以凌驾于神或团体之上。</p><p> “宗教的虔诚和信赖不但是他们道德观念的来源，而且是支持行为规范的力量，是团体的象征。在象征着团体的神的观念下，有着两个重要的派生观念：一是每个个人在神前的平等；一是神对每个个人的公道。”</p><p> “可是上帝是在冥冥之中，正象征团体无形的实在；但是在执行团体的意志时，还得有人来代理。“代理者”Minister是团体格局的社会中一个基本的概念。</br><br> 执行上帝意志的牧师是Minister，执行团体权力的官吏也是Minister，都是“代理者”，而不是神或团体的本身”</p></li><li><p>中国没有平等爱人的宗教文化，只有以自我为中心的有等级差序的爱，难有统一的公共道德标准，道德依附在私人关系上。</p><p> “不但在我们传统道德系统中没有一个像基督教里那种“爱”的观念—不分差序的兼爱；而且我们也很不容易找到个人对于团体的道德要素。</br><br> 在西洋团体格局的社会中，公务，履行义务，是一个清楚明白的行为规范。而这在中国传统中是没有的。”</p><p> “而忠君并不是个人与团体的道德要素，而依旧是对君私之间的关系。</br><br> 团体道德的缺乏，在公私的冲突里更看得清楚。”</p><p> “传统的道德里不另找出一个笼统性的道德观念来，所有的价值标准也不能超脱于差序的人伦而存在了。</br><br> 中国的道德和法律，都因之得看所施的对象和“自己”的关系而加以程度上的伸缩。”</p></li></ol><h3 id="六、家族"><a href="#六、家族" class="headerlink" title="六、家族"></a>六、家族</h3><ol><li><p>理清本书说述“差序格局”不是指中国没有诸如家庭和氏族等“团体”，而是指“从主要的格局说，在中国乡土社会中，差序格局和社会圈子的组织是比较的重要。”</p></li><li><p>家庭不仅有生育合作功能，还有组织经济等功能，可以按需要任意伸缩范围，扩大路线一般只按父系，其性质近似与氏族。</p><p> “家庭这概念在人类学上有明确的界说：这是个亲子所构成的生育社群。”</p><p> “依人类学上的说法，氏族是一个事业组织，再扩大就可以成为一个部落”</p><p> “我的假设是中国乡土社会采取了差序格局，利用亲属的伦常去组合社群，经营各种事业，使这基本的家，变成氏族性了。</br><br> 家的结构不能限于亲子的小组合，必须加以扩大。而且凡是政治、经济、宗教等事物都需要长期绵续性的，这个基本社群决不能像西洋的家庭一般是临时的。</br><br> 家必须是绵续的，不因个人的长成而分裂，不因个人的死亡而结束，于是家的性质变成了族。氏族本是长期的，和我们的家一般。</br><br> 我称我们这种社群作小家族，也表示了这种长期性在内，和家庭的临时性相对照。”</p><p> “中国的家是一个事业组织，家的大小是依着事业的大小而决定。”</p></li><li><p>家庭包含了太多生育之外的功能，导致“中国人在感情上，尤其是在两性间的矜持和保留。”</p></li></ol><h3 id="七、男女有别"><a href="#七、男女有别" class="headerlink" title="七、男女有别"></a>七、男女有别</h3><ol><li><p>中国传统感情定向是接受秩序的安排。</p><p> “在上篇我说家族在中国的乡土社会里是一个事业社群，凡是做事业的社群，纪律是必须维持的，纪律排斥了私情。”</p></li><li><p>乡土社会的社会关系生而定型，不需创造新的社会关系，它追求的是稳定，因此“男女间的关系必须有一种安排，使他们之间不发生激动性的感情。那就是男女有别的原则。”</p><p> “社会秩序范围着个性，为了秩序的维持，一切足以引起破坏秩序的要素都被遏制着。男女之间的鸿沟从此筑下。乡土社会是个男女有别的社会，也是个安稳的社会。”</p></li></ol><h3 id="八、礼治秩序"><a href="#八、礼治秩序" class="headerlink" title="八、礼治秩序"></a>八、礼治秩序</h3><ol><li><p>“人治”与“法治”的区别不在于有没有法律可依据，而在于“维持秩序时所用的力量，和所根据的规范的性质。”</p></li><li><p>但无“法”并不会使乡土社会混乱不堪，因为有“礼治”的维系。</p><p> “礼是社会公认的行为规范，它本和法律无异，不同之处在于法律是靠国家的权力来推行的，而礼却不需要这样有形的权力机构来维持，维持礼这种规范的是传统。”</p></li><li><p>“法”由外而内约束人，“礼”由内而外控制人。</p><p> “礼并不是靠一个外在的权力来推行的，而是从教化中养成了个人的敬畏感，使人服膺，人服礼是主动的”</p></li></ol><h3 id="九、无讼"><a href="#九、无讼" class="headerlink" title="九、无讼"></a>九、无讼</h3><ol><li><p>传统生活是礼治社会，违背规矩是道德问题，需要的是教育和教化。而现代法治社会讲个人权利，权利不可侵犯，以刑法保护个人的权利和社会的安全。</p><p> “但是在乡土社会的礼治秩序中做人，如果不知道“礼”，就成了撒野，没有规矩，简直是个道德问题，不是个好人。一个负责地方秩序的父母官，维持礼治秩序的理想手段是教化，而不是折狱。”</p><p> “一个法官并不考虑道德问题、伦理观念，他并不在教化人。刑罚的用意已经不复“以儆效尤”，而是在保护个人的权利和社会的安全。尤其在民法范围里，他并不是在分辨是非，而是在厘定权利。”</p></li><li><p>法治秩序的建立不能单靠制定若干法律条文和设立若干法庭，还得看人民怎么去应用这些设备。社会结构和思想理念还得先有一番改革。</p></li></ol><h3 id="十、无为政治"><a href="#十、无为政治" class="headerlink" title="十、无为政治"></a>十、无为政治</h3><ol><li><p>权力有两种用途，一是在阶级斗争中平衡冲突的工具，二是支配社会分工。即横暴权力和同意权力。</p><p> “冲突的性质并没有消弭，但是武力的阶段过去了，被支配的一方面已认了输，屈服了。但是他们并没有甘心接受胜利者所规定下的条件，非心服也。于是两方面的关系中发生了权力。</br><br> 权力是维持这关系所必需的手段，它是压迫性质的，是上下之别”</br><br> “这种权力的基础是社会契约，是同意。社会分工愈复杂，这权力也愈扩大。”</p></li><li><p>权力的诱人之处在于它可能带来经济利益，但农业社会被权力征服的团体生产力不高，吸引力不强，但易于被征服。</p></li><li><p>权力滋长靠内部农业生产力的提高，而和平有利于人口增长和农业社会力量的积聚，所以需要“养民”。</p><p> “皇权力求无为，所谓养民。养到一个时候，皇权逐渐累积了一些力量，这力量又刺激皇帝的雄图大略，这种循环也因而复始。</p><p> 为了皇权自身的维持，在历史的经验中，找到了“无为”的生存价值，确立了无为政治的理想。”</p></li></ol><h3 id="十一、长老统治"><a href="#十一、长老统治" class="headerlink" title="十一、长老统治"></a>十一、长老统治</h3><ol><li><p>中国社会基层存在一种长老式的权力</p><p> “既不是横暴性质，也不是同意性质；既不是发生于社会冲突，也不是发生于社会合作；它是发生于社会继替的过程，是教化性的权力，或是说爸爸式的，英文里是Paternalism。”</p></li><li><p>教化权力没有政治权力的强制性，但由于人人都认可，也形成了一种每个成员都被迫接受的规范。</p><p> “所谓社会契约必先假定个人的意志。个人对于这种契约虽则并没有自由解脱的权利，但是这种契约性的规律在形成的过程中，必须尊重各个人的自由意志，民主政治的形式就是综合个人意志和社会强制的结果。</br><br> 在教化过程中并不发生这个问题，被教化者并没有选择的机会。”</p><p> “凡是文化性的，不是政治性的强制都包含这种权力。</br><br> 文化和政治的区别就在这里：凡是被社会不成问题地加以接受的规范，是文化性的；当一个社会还没有共同接受一套规范，各种意见纷呈，求取临时解决办法的活动是政治。</br><br> 文化的基础必须是同意的，但文化对于社会的新分子是强制的，是一种教化过程。”</p></li><li><p>文化性规范不如成文的政治性规范稳定，因此在社会变迁中需要年长者的维系。</p></li></ol><h3 id="十二、血缘和地缘"><a href="#十二、血缘和地缘" class="headerlink" title="十二、血缘和地缘"></a>十二、血缘和地缘</h3><ol><li><p>长幼权力差别形成了血缘社会个人权利义务不同的基础，这种基础与生俱来不可选择。</p><p> “缺乏变动的文化里，长幼之间发生了社会的差次，年长的对年幼的具有强制和权力。这是血缘社会的基础。”</p><p> “血缘的意思是人和人的权利和义务根据亲属关系来决定。”</p></li><li><p>血缘与地缘存在联系与冲突。</p><p> “血缘是稳定的力量。在稳定的社会中，地缘不过是血缘的投影，不分离的。”</p><p> “籍贯只是“血缘的空间投影。”</p><p> “地缘是从商业里发展出来的社会关系。血缘是身份社会的基础，而地缘却是契约社会的基础。”</p></li><li><p>现代社会讲求契约关系，是乡土社会所欠缺的，需要从血缘关系到地缘关系的转变。</p><p> “契约的完成是权利义务的清算，须要精密的计算、确当的单位、可靠的媒介。在这里是冷静的考虑，不是感情，于是理性支配着人们的活动—这一切是现代社会的特性，也正是乡土社会所缺的。</p><p> 从血缘结合转变到地缘结合是社会性质的转变，也是社会史上的一个大转变。”</p></li></ol><h3 id="十三、名实的分离"><a href="#十三、名实的分离" class="headerlink" title="十三、名实的分离"></a>十三、名实的分离</h3><ol><li><p>社会变动分为“社会继替”和“社会变迁”，二者同时存在，但前者更明显，后者由于需求作用不显著。</p><p> “社会继替是指人物在固定的社会结构中的流动；社会变迁却是指社会结构本身的变动。这两种过程并不是冲突的，而是同时存在的。”</p></li><li><p>乡土社会并非绝对静止，在其缓慢的变化中，长老权力在社会继替中壮大在“社会继替”中产生长老权力，如果社会变动得慢，长老权力也就更有势力。</p><p> “社会结构的变动是人要它变的，要它变的原因是在它已不能答复人的需要。”</p><p> “社会变迁可以吸收在社会继替之中的时候，我们可以称这社会是安定的。”</p></li><li><p>长老权力在乡土社会生命力极强。</p><p> “儒家所注重的“孝”道，其实是维持社会安定的手段，孝的解释是“无违”，那就是承认长老权力。</br><br> 长老代表传统，遵守传统也就可以无违于父之教。”</p><p> “长老权力是建立在教化作用之上的，教化是有知对无知，如果所传递的文化是有效的，被教的自没有反对的必要；如果所传递的文化已经失效，根本也就失去了教化的意义。“反对”在这种关系里是不发生的。”</p></li><li><p>长老依靠“加入注释”维系权力，而注释的变动可以引起名实之间发生极大的分离。</p><p> “长老权力下，传统的形式是不准反对的，但是只要表面上承认这形式，内容却可以经注释而改变。结果不免是口是心非。</br><br> 在中国旧式家庭中生长的人都明白家长的意志怎样在表面的无违下，事实上被歪曲的。</br><br> 虚伪在这种情境中不但是无可避免而且是必需的。”</p></li></ol><h3 id="十四、从欲望到需要"><a href="#十四、从欲望到需要" class="headerlink" title="十四、从欲望到需要"></a>十四、从欲望到需要</h3><ol><li><p>乡土社会靠欲望行事能自洽。</p><p> “在十九世纪发生了一种理论说，每个人只要能“自私”，那就是充分地满足我们本性里带来的欲望，社会就会形成一个最好、最融洽的秩序。”</p><p> “在乡土社会中，这种理论多少可以说是正确的，正确的原因并不是真是有个“冥冥中”的那只手，而是在乡土社会中个人的欲望常是合于人类生存条件的。”</p></li><li><p>于是乡土社会靠欲望，不像现代社会靠理性和计划。</p><p> “在乡土社会中人可以靠欲望去行事，但在现代社会中欲望并不能作为人们行为的指导，于是产生“需要”，因之有了“计划”。从欲望到需要是社会变迁中一个很重要的里程碑。”</p></li><li><p>乡土社会依赖经验，现代社会依赖知识。</p><p> “乡土社会是个传统社会，传统就是经验的累积，能累积就是说经得起自然选择的，各种“错误”—不合于生存条件的行为—被淘汰之后留下的那一套生活方式。不论行为者对于这套方式怎样说法，它们必然是有助于生存的。”</p><p> “在现代社会里知识即是权力，因为在这种社会里生活的人要依他们的需要去做计划。从知识里得来的权力是我在上文中所称的时势权力。”</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《乡土中国》是社会学的经典书，可以说是经典中的经典，也是所有研究中国的人必读的一本书。&lt;/p&gt;
&lt;p&gt;这本书讲的是中国人的社会操作系统，是研究中国人复杂思维非常重要的一块基石，&lt;/p&gt;
&lt;h3 id=&quot;一、乡土本色&quot;&gt;&lt;a href=&quot;#一、乡土本色&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="关于世界的一切" scheme="https://aichiko0225.github.com/memoirs/categories/%E5%85%B3%E4%BA%8E%E4%B8%96%E7%95%8C%E7%9A%84%E4%B8%80%E5%88%87/"/>
    
    
  </entry>
  
  <entry>
    <title>套路真多</title>
    <link href="https://aichiko0225.github.com/memoirs/20210820/%E5%A5%97%E8%B7%AF%E7%9C%9F%E5%A4%9A/"/>
    <id>https://aichiko0225.github.com/memoirs/20210820/%E5%A5%97%E8%B7%AF%E7%9C%9F%E5%A4%9A/</id>
    <published>2021-08-19T16:00:00.000Z</published>
    <updated>2021-08-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小说的那些套路"><a href="#小说的那些套路" class="headerlink" title="小说的那些套路"></a>小说的那些套路</h2><ul><li>1.落魄大叔爱喝酒，以前肯定是高手。</li><li>2.高手厌倦俗世纷争，避世隐居。但往往无论什么杂鱼都知道他隐居到哪儿去了。</li><li>3.几拨人同时上山去请一个高手，谁先上去谁倒霉。高手都是跟着最后上去的那拨人走的。</li><li>4.大家族里从来不学文化课，整天研究怎么打架，年轻一代天天就盘算着出去强抢民女。就这点出息，见笑了。</li><li>5.叶、萧、林、易，四大修真家族，长期为修真界输送着各种优秀人才。</li><li>6.统领一方地界的强者，见到少年高手从来不想着笼络，只想着灭口。难怪手下只剩下些弱智。</li><li>7.超级废柴划入外门，走上人生巅峰。顶级天才被收为入室弟子，从此暗淡无光。</li><li>8.顶级高手的孩子自带GPS，不管小时候扔多远，最后总能找回来。</li><li>9.圣女选出来就是为了让人拐跑的。</li><li>10.名医给病人治完病往往会顺带把自家闺女搭出去。</li><li>11.一个普通人活了几十年学会写字绘画，修身养性。一个修真者修炼数百年满脑子是女人和钱。</li><li>12.但凡大家族都有一套特别邪门的武功，用了会短命的那种。</li><li>13.著名学院附近多半有树林，树林里必定蹲着一些特别危险的上古魔兽。</li><li>14.顶级高手不是二十岁以下的就是几百岁以上的，中间好几代人都在打酱油。</li><li>15.高手出招如电如风，但一定会很礼貌地等敌人摆完姿势喊完招式名才动手。</li><li>16.无论什么高级毒药都是可以化解的，唯独泻药无解。不管是什么等级的高手，服了泻药没有几个能解掉的。</li><li>17.正道长期向魔道输送高级人才魔道长期向正道提供绝世神兵。</li><li>18.他是众口相传的绝顶高手，令后辈敬仰的不朽传奇重新出山不到三天,就被新人按在地上暴打。</li><li>19.看管门派重地的人都很喜欢私自放人进去。</li><li>20.名门大派的后山或者断崖往往藏着一些不得了的东西。</li><li>21.有些感觉敏锐的掌门可能会发现，自从某个弟子加入之后，什么寻仇的，叛变的，踢馆的就都找上门了，各种上古魔兽、神级高手排着队来搞事，传说中的丧门星可能真的是存在的。</li></ul><p>后续持续更新。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小说的那些套路&quot;&gt;&lt;a href=&quot;#小说的那些套路&quot; class=&quot;headerlink&quot; title=&quot;小说的那些套路&quot;&gt;&lt;/a&gt;小说的那些套路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.落魄大叔爱喝酒，以前肯定是高手。&lt;/li&gt;
&lt;li&gt;2.高手厌倦俗世纷争，避世隐居。</summary>
      
    
    
    
    <category term="关于世界的一切" scheme="https://aichiko0225.github.com/memoirs/categories/%E5%85%B3%E4%BA%8E%E4%B8%96%E7%95%8C%E7%9A%84%E4%B8%80%E5%88%87/"/>
    
    
  </entry>
  
  <entry>
    <title>乌合之众</title>
    <link href="https://aichiko0225.github.com/memoirs/20210729/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97/"/>
    <id>https://aichiko0225.github.com/memoirs/20210729/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97/</id>
    <published>2021-07-28T16:00:00.000Z</published>
    <updated>2021-07-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。</p><span id="more"></span><p>2.我们始终有一种错觉，以为我们的感情源自于我们自己的内心。</p><p>3.群体只会干两种事——锦上添花或落井下石。</p><p>4.个人一旦成为群体的一员，他所作所为就不会再承担责任，这时每个人都会暴露出自己不受到的约束的一面。群体追求和相信的从来不是什么真相和理性，而是盲从、残忍、偏执和狂热，只知道简单而极端的感情。</p><p>5.我们以为自己是理性的，我们以为自己的一举一动都是有其道理的。但事实上，我们的绝大多数日常行为，都是一些我们自己根本无法了解的隐蔽动机的结果。</p><p>6.所谓的信仰，它能让一个人变得完全受自己的梦想奴役。</p><p>7.在与理性永恒的冲突中，感情从未失过手。</p><p>8.有时不真实的东西比真实的东西包含更多的真理。</p><p>9.群众没有真正渴求过真理，面对那些不合口味的证据，他们会充耳不闻…凡是能向他们提供幻觉的，都可以很容易地成为他们的主人；凡是让他们幻灭的，都会成为他们的牺牲品。</p><p>10.数量，即是正义。</p><p>11.掌握了影响群众想象力的艺术，也就掌握了统治他们的艺术。</p><p>12.没有传统，就没有文明；没有对传统的缓慢淘汰，就没有进步。</p><p>13.孤立的个人很清楚，在孤身一人时，他不能焚烧宫殿或洗劫商店，即使受到这样做的诱惑，他也很容易抵制这种诱惑。但是在成为群体的一员时，他就会意识到人数赋予他的力量，这足以让他生出杀人劫掠的念头，并且会立刻屈从于这种诱惑。出乎预料的障碍会被狂暴地摧毁。人类的机体的确能够产生大量狂热的激情，因此可以说，愿望受阻的群体所形成的正常状态，也就是这种激愤状态。</p><p>14.一个国家为其年轻人所提供的教育，可以让我们看到这个国家未来的样子。</p><p>15.能够感觉到的现象可以比作波浪，是海洋深处我们一无所知的那些乱象在洋面上的表象。</p><p>16.昨天受群众拥戴的英雄一旦失败，今天就会受到侮辱。当然名望越高，反应就会越强烈。在这种情况下，群众就会把末路英雄视为自己的同类，为自己曾向一个已不复存在的权威低头哈腰而进行报复。</p><p>17.群体在智力上总是低于孤立的个人，但是从感情及其激发的行动这个角度看，群体可以比个人表现得更好或更差，这全看环境如何。一切取决于群体所接受的暗示具有什么性质。</p><p>18.群体因为夸大自己的感情，因此它只会被极端感情所打动。希望感动群体的演说家，必须出言不逊，信誓旦旦。夸大其辞、言之凿凿、不断重复、绝对不以说理的方式证明任何事情——这些都是公众集会上的演说家惯用的论说技巧。</p><p>19.令人难忘的历史事件，只是人类思想无形的变化造成的有形的后果而已。</p><p>20.孤立的个体具有控制自身反应行为的能力，而群体则不具备。</p><p>21.专横和偏执是一切类型的群体的共性。</p><p>22.影响民众想象力的，并不是事实本身，而是它们发生和引起注意的方式。</p><p>23.群体总是对强权俯首帖耳，却很少为仁慈善行感动！在他们看来，仁慈善良只不过是软弱可欺的代名词。</p><p>24.大众没有辨别能力，因而无法判断事情的真伪，许多经不起推敲的观点，都能轻而易举的得到普遍赞同!</p><p>25.群体盲从意识会淹没个体的理性，个体一旦将自己归入该群体，其原本独立的理性就会被群体的无知疯狂所淹没。</p><p>26.从长远看，不断重复的说法会进入我们无意识的自我的深层区域，而我们的行为动机正是在这里形成的。到了一定的时候，我们会忘记谁是那个不断被重复的主张的作者，我们最终会对它深信不移。</p><p>27.群体中的个人是沙中之沙，风可以随意搅动他们。</p><p>28.群体表现出来的感情不管是好是坏，其突出的特点就是极为简单而夸张。</p><p>29.但凡能够成就大业的领袖人物，他重要的品质不是博学多识，而是必须具备强大而持久的意志力，这是一种极为罕见，极为强大的品质，它足以征服一切。</p><p>30.文明向来只由少数知识贵族阶级而非群体来创造。</p><p>31.身为一位领袖，如果想要让自己创立的宗教或政治信条站住脚，就必须成功地激起群众想入非非的感情。</p><p>32.结群后，由于人多势众，个人会产生一种幻觉，感到自己力大无穷，不可战胜，好像没有什么事情是办不到的。</p><p>33.当一个人融入社会之中时，他便失去了自我。</p><p>34.在迫不得已的情况下，我们也许还是会愿意接受传统教育当中所有的弊端，因为尽管它只会培养一些被社会所抛弃的人、心怀不满的人，但起码，对冗繁知识的肤浅掌握，对成堆教科书的完美背诵，或许可以提高智力水平。但事实上它真的能提高智力吗？不可能！在生活中，判断力、经验、进取心和个性，这些才是取得成功的条件，这些都不是书本所能够给予的。书本是可供查询的有用字典，但倘若把这些冗长的词条都装在脑子里，那可是一点用都没有。</p><p>35.文明赖以形成的道德力量失去效力时，它的最终瓦解总是由无意识且野蛮的群体来完成的。</p><p>36.一切政治、神学或社会信条，要想在群众中扎根，都必须采取宗教的形式——能够把危险的讨论排除在外的形式。</p><p>37.群体精神最需要的不是自由而是服从。他们如此甘愿听从别人的意志，以至于只要有人自称是它们的主人，他们就会本能地听命于他。</p><p>38.尽管在那一天的那两个小时里他们做到了或者几乎做到了，到一个月以后他们却不再具备这种能力。他们无法再次通过考试。他们脑中不断丢失大量过于沉重的知识，而且没有新的知识来填充。他们的思想活力开始衰退，促进成长的才能渐渐干涸，这时一个得到充分发展的人诞生了，但此时的他早已疲惫不堪。结婚过上安定的生活，陷入某种循环，并永无止境地重复下去；他将自己封闭在狭隘的工作中，尽职尽责，仅此而已。他们最终变为了平庸之辈。</p><p>39.个人一旦融入群体，他的个性便会被湮没，群体的思想便会占据绝对的统治地位，而与此同时，群体的行为也会表现出排斥异议，极端化、情绪化及低智商化等特点。进而对社会产生破坏性的影响。</p><p>40.所有时代和所有国家的伟大政客，包括最专横的暴君，也都把群众的想象力视为他们权力的基础，他们从来没有设想过通过与它作对而进行统治。要想掌握这种本领，万万不可求助于智力或推理，也就是说，绝对不可以采用论证的方式。</p><p>41.群体的叠加只是愚蠢的叠加，而真正的智慧被愚蠢的洪流淹没。</p><p>42.人们经常说起那家大众剧院，它只演令人压抑的戏剧，散场后，必须保护扮演叛徒的演员，免得他遭到观众的暴打。他所犯的罪行，当然是想象出来的，引起了群众的巨大愤怒。我觉得这是群体精神状态最显著的表现之一，这清楚地说明，要给他们什么暗示是一件多么容易的事情。对他们来说，假与真几乎同样奏效。他们明显地表现出真假不分的倾向。</p><p>43.各种制度并没有固定的优点，就它们本身而言，它们无所谓好坏。因为在特定的时刻对一个民族有益的制度，对另一个民族也许是极为有害的 。</p><p>44.群体也许永远是无意识的，但这种无意识本身，可能就是它力量强大的秘密之一。在自然界，绝对服从本能的生物，其行为会复杂得让我们不敢相信。理智是人类新近才有的东西，太不完美了，不能向我们揭示无意识的规律，更不能替代它。在我们的行为举止中，无意识部分占的比重很大，理智所占的比例却很小。无意识现在仍作为未知的力量在起作用。</p><p>45.到了一定的时候我们不会记得那个不断被重复的主张的人是谁，我们最终会对它深信不疑，广告能有令人吃惊的威力，这就是原因 。</p><p>46.教育既不会让人更道德，同样不会使他更幸福，它既不能将他的本能改变 ，也不能将他天生的热情改变，而且有在进行不良引导后，它的害处远大于好处。</p><p>47.单独一个人必须要为他的行为承担责任——法律上或者道德上。但是，群体则不然，群体不需要承担任何责任，群体就是责任，群体就是道德，群体就是法律，群体就是道德，群体的行为自然是合理的。</p><p>48.名望的产生与若干因素有关，而成功永远是其中最重要的一个。</p><p>49.学习课程，把一种语法或一篇纲要牢记在心，重复得好，模仿也出色——这实在是一种十分可笑的教育方式，它的每项工作都是一种信仰行为，即默认教师不可能犯错误。这种教育的唯一结果，就是贬低自我，让我们变得无能。</p><p>50.民众的想象力是政客的权力基础。</p><p>51.在决定人们历史地位上起着更大作用的，不是他们的“真实”面目，而是后人对他们的认识和感受。</p><p>52.群体会让每个人在其中的错误缩小，同时让每个人的恶意被无限放大。</p><p>54.束缚个人行为的责任感一消失，人便会随心所欲，肆意妄为。</p><p>55.群体的无意识行为取代了个体有意识的行为，这是现时代最显著的特征之一。</p><p>56.偶像崇拜的五大标识：</p><ul><li><p>第一，偶像总是凌驾于信徒，处于高高在上的地位，这一点有着决定性地作用。</p></li><li><p>第二，信徒总是盲目服从偶像的命令。</p></li><li><p>第三，信徒没有能力，也不愿意对偶像规定的信条进行讨论。</p></li><li><p>第四，信徒有着狂热的愿望，希望把偶像的信条广加传播。</p></li><li><p>第五，信徒倾向于把不接受它们的任何人视为仇敌。</p></li></ul><p>当群体符合第一条，其形式就等同于宗教，而这种情感就变成了宗教信仰。</p><p>对群体来说，也许最不合理的才是最合理的选择</p><p>57.群众日益被大众文化所湮没，这种文化把平庸低俗当作最有价值的东西。</p><p>58.所以不要轻易地成为集体的一份子，这样很容易被别有用心的人利用，即使你以为自己只不过是随声附和了一下而已，实际上你已经成了帮凶。</p><p>59.群体的夸张倾向只作用于感情，对智力不起任何作用。</p><p>60.群体不善推理，却又急于行动。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。&lt;/p&gt;</summary>
    
    
    
    <category term="关于世界的一切" scheme="https://aichiko0225.github.com/memoirs/categories/%E5%85%B3%E4%BA%8E%E4%B8%96%E7%95%8C%E7%9A%84%E4%B8%80%E5%88%87/"/>
    
    
  </entry>
  
  <entry>
    <title>React 技术栈（一）</title>
    <link href="https://aichiko0225.github.com/memoirs/20210619/ReactStack-1/"/>
    <id>https://aichiko0225.github.com/memoirs/20210619/ReactStack-1/</id>
    <published>2021-06-18T16:00:00.000Z</published>
    <updated>2024-12-13T03:01:08.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h2><p>除开<code>JavaScript</code>的基础内容，<code>React</code> 必备的知识肯定非 ES6，其实前面的文章已经讲了一部分的ES6的内容，这边只记录，我觉得比较重要的ES6的内容<br>ECMAScript 6.0（以下简称 ES6）是 <code>JavaScript</code> 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 <code>JavaScript</code> 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><span id="more"></span><h3 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h3><p><code>let</code> <code>var</code>这个很简单，不需要解释了，跟现在新的语言的用法一致，<code>const</code> 就是类似 <code>C</code> 里面修饰指针，则指针不变，修饰常量则常量不可变化，没什么可说的。<br><code>JavaScript</code> 以前的var就挺曹丹的，现在的用法起码像个人了。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数有几个使用注意点。</p><ul><li><p>（1）箭头函数没有自己的this对象（详见下文）。</p></li><li><p>（2）不可以当作构造函数，也就是说，不可以对箭头函数使用new命令，否则会抛出一个错误。</p></li><li><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p></li><li><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p></li></ul><p>上面四点中，最重要的是第一点。对于普通函数来说，内部的this指向函数运行时所在的对象，但是这一点对箭头函数不成立。它没有自己的this对象，内部的this就是定义时上层作用域中的this。<br>也就是说，箭头函数内部的this指向是固定的，相比之下，普通函数的this指向是可变的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="comment">// id: 42</span></span><br></pre></td></tr></table></figure><p>上面代码中，setTimeout()的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。<br>如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以打印出来的是42。</p><p>箭头函数的什么教程一大堆，在我看来都是为了之前的设计买单而已，如果真的是像写Java 一样写，this的指向不会出现任何问题，普通函数的this 是不确定的，那么使用普通函数的时候bind一个this就完全可以解决了。</p><p><code>JavaScript</code> 是一个很让人头疼的语言，有些人总是摸着规则的边缘写代码，然后减少了几行代码，以为有多厉害。我只想说，并不是人家看不懂就厉害的，那些白痴们。<br>如果只学习<code>JavaScript</code>一种语言，那他的代码肯定是乱七八糟的。所以我每年基本上都会复习一下C的知识，还是很有用的，了解程序运行的底层逻辑，才能更好地写代码。</p><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><p>对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍<code>Object</code>对象的新增方法。</p><h4 id="属性的赋值器（setter）和取值器（getter）"><a href="#属性的赋值器（setter）和取值器（getter）" class="headerlink" title="属性的赋值器（setter）和取值器（getter）"></a>属性的赋值器（setter）和取值器（getter）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cart = &#123;</span><br><span class="line">  <span class="attr">_wheels</span>: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">  get <span class="title function_">wheels</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_wheels</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set <span class="title function_">wheels</span> (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="variable language_">this</span>.<span class="property">_wheels</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;数值太小了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wheels</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h4><p>我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto);</span><br><span class="line">obj.<span class="title function_">find</span>() <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，对象obj.find()方法之中，通过super.foo引用了原型对象proto的foo属性。</p><p>注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="variable language_">super</span>.<span class="property">foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> <span class="variable language_">super</span>.<span class="property">foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三种<code>super</code>的用法都会报错，因为对于 <code>JavaScript</code> 引擎来说，这里的<code>super</code>都没有用在对象的方法之中。第一种写法是<code>super</code>用在属性里面，第二种和第三种写法是<code>super</code>用在一个函数里面，然后赋值给foo属性。目前，只有对象方法的简写法可以让 <code>JavaScript</code> 引擎确认，定义的是对象的方法。</p><p><code>JavaScript</code> 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).foo.call(this)</code>（方法）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto);</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，super.foo指向原型对象proto的foo方法，但是绑定的this却还是当前对象obj，因此输出的就是world。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ECMAScript-6-简介&quot;&gt;&lt;a href=&quot;#ECMAScript-6-简介&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6 简介&quot;&gt;&lt;/a&gt;ECMAScript 6 简介&lt;/h2&gt;&lt;p&gt;除开&lt;code&gt;JavaScript&lt;/code&gt;的基础内容，&lt;code&gt;React&lt;/code&gt; 必备的知识肯定非 ES6，其实前面的文章已经讲了一部分的ES6的内容，这边只记录，我觉得比较重要的ES6的内容&lt;br&gt;ECMAScript 6.0（以下简称 ES6）是 &lt;code&gt;JavaScript&lt;/code&gt; 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 &lt;code&gt;JavaScript&lt;/code&gt; 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="基础知识" scheme="https://aichiko0225.github.com/memoirs/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="React" scheme="https://aichiko0225.github.com/memoirs/tags/React/"/>
    
    <category term="JavaScript" scheme="https://aichiko0225.github.com/memoirs/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 温习记录（二）</title>
    <link href="https://aichiko0225.github.com/memoirs/20201102/JavaScript-study-record-2/"/>
    <id>https://aichiko0225.github.com/memoirs/20201102/JavaScript-study-record-2/</id>
    <published>2020-11-01T16:00:00.000Z</published>
    <updated>2024-12-13T02:59:51.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p><code>JavaScript</code> 语言的内容，前面基本上也记录的差不多了。这里就聊一些<code>JavaScript</code>语言更深入的问题，加深对这个语言的理解。<br><code>C</code> 和 <code>Java</code> 始终是 <code>JavaScript</code> 的基础，很多概念都是直接继承过来的，所以学习 <code>C</code> 是很重要的。我基本上每年都会对 <code>C</code> 有一个回顾，然后把数据结构的书再看一遍。<br>扯远了，这边只是记录 <code>JavaScript</code> 一些知识点，让我以后更好地上手 <code>JavaScript</code>，也是学习<code>React</code>的一个必要的过程。虽然我已经有一个上线的 <code>React</code> 项目，但是<code>React</code>的很多原理我基本上是抓瞎的。<br>作为一个移动端，在现在大前端的趋势下，多一个<code>React</code>的能力也挺好的。好几年前已经用<code>Vue</code>上线过一个项目了，但是那个项目比较简单，所以几年过去，我基本上忘的差不多了。</p><span id="more"></span><h2 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h2><p>对于使用过基于类的语言 (如 <code>Java</code> 或 <code>C++</code>) 的开发人员来说，<code>JavaScript</code> 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015&#x2F;ES6 中引入了 class 关键字，但那只是语法糖，<code>JavaScript</code> 仍然是基于原型的）。</p><p>当谈到继承时，<code>JavaScript</code> 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p><p>几乎所有 <code>JavaScript</code> 中的对象都是位于原型链顶端的 <code>Object</code> 的实例。</p><p>尽管这种原型继承通常被认为是 <code>JavaScript</code> 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</p><h3 id="基于原型链的继承"><a href="#基于原型链的继承" class="headerlink" title="基于原型链的继承"></a>基于原型链的继承</h3><p><code>JavaScript</code> 对象是动态的属性“包”（指其自己的属性）。<code>JavaScript</code> 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><blockquote><p>遵循<strong>ECMAScript</strong>标准，someObject.[[<code>Prototype</code>]] 符号是用于指向 someObject 的原型。从 <strong>ECMAScript 6</strong> 开始，[[Prototype]] 可以通过 <code>Object.getPrototypeOf()</code> 和 <code>Object.setPrototypeOf()</code> 访问器来访问。这个等同于 <code>JavaScript</code> 的非标准但许多浏览器实现的属性 __proto__。</p><p>但它不应该与构造函数 <code>func</code> 的 <code>prototype</code> 属性相混淆。被构造函数创建的实例对象的 [[Prototype]] 指向 func 的 <code>prototype</code> 属性。<code>Object.prototype</code> 属性表示 <code>Object</code> 的原型对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让我们从一个函数里创建一个对象o，它自身拥有属性a和b的：</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这么写也一样</span></span><br><span class="line"><span class="comment">function f() &#123;</span></span><br><span class="line"><span class="comment">  this.a = 1;</span></span><br><span class="line"><span class="comment">  this.b = 2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title function_">f</span>(); <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在f函数的原型上定义属性</span></span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">b</span> = <span class="number">3</span>;</span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">c</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要在 f 函数的原型上直接定义 f.prototype = &#123;b:3,c:4&#125;;这样会直接打破原型链</span></span><br><span class="line"><span class="comment">// o.[[Prototype]] 有属性 b 和 c</span></span><br><span class="line"><span class="comment">//  (其实就是 o.__proto__ 或者 o.constructor.prototype)</span></span><br><span class="line"><span class="comment">// o.[[Prototype]].[[Prototype]] 是 Object.prototype.</span></span><br><span class="line"><span class="comment">// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null</span></span><br><span class="line"><span class="comment">// 这就是原型链的末尾，即 null，</span></span><br><span class="line"><span class="comment">// 根据定义，null 就是没有 [[Prototype]]。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 综上，整个原型链如下:</span></span><br><span class="line"><span class="comment">// &#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; Object.prototype---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">a</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// a是o的自身属性吗？是的，该属性的值为 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">b</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// b是o的自身属性吗？是的，该属性的值为 2</span></span><br><span class="line"><span class="comment">// 原型上也有一个&#x27;b&#x27;属性，但是它不会被访问到。</span></span><br><span class="line"><span class="comment">// 这种情况被称为&quot;属性遮蔽 (property shadowing)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">c</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// c是o的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">d</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span></span><br><span class="line"><span class="comment">// 找不到 d 属性，返回 undefined</span></span><br></pre></td></tr></table></figure><h3 id="在-JavaScript-中使用原型"><a href="#在-JavaScript-中使用原型" class="headerlink" title="在 JavaScript 中使用原型"></a>在 JavaScript 中使用原型</h3><p>接下去，来仔细分析一下这些应用场景下， <code>JavaScript</code> 在背后做了哪些事情。<br>正如之前提到的，在 <code>JavaScript</code> 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— <code>prototype</code> 。请注意，以下的代码是独立的（出于严谨，假定页面没有其他的<code>JavaScript</code>代码）。为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台（在Chrome和火狐浏览器中，按Ctrl+Shift+I即可），进入“console”选项卡，然后把如下的<code>JavaScript</code>代码复制粘贴到窗口中，最后通过按下回车键运行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomething.<span class="property"><span class="keyword">prototype</span></span> );</span><br><span class="line"><span class="comment">// 和声明函数的方式无关，</span></span><br><span class="line"><span class="comment">// JavaScript 中的函数永远有一个默认原型属性。</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomething.<span class="property"><span class="keyword">prototype</span></span> );</span><br></pre></td></tr></table></figure><p>在控制台显示的JavaScript代码块中，我们可以看到doSomething函数的一个默认属性prototype。而这段代码运行之后，控制台应该显示类似如下的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">constructor</span>: ƒ <span class="title function_">doSomething</span>(),</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">constructor</span>: ƒ <span class="title class_">Object</span>(),</span><br><span class="line">        <span class="attr">hasOwnProperty</span>: ƒ <span class="title function_">hasOwnProperty</span>(),</span><br><span class="line">        <span class="attr">isPrototypeOf</span>: ƒ <span class="title function_">isPrototypeOf</span>(),</span><br><span class="line">        <span class="attr">propertyIsEnumerable</span>: ƒ <span class="title function_">propertyIsEnumerable</span>(),</span><br><span class="line">        <span class="attr">toLocaleString</span>: ƒ <span class="title function_">toLocaleString</span>(),</span><br><span class="line">        <span class="attr">toString</span>: ƒ <span class="title function_">toString</span>(),</span><br><span class="line">        <span class="attr">valueOf</span>: ƒ <span class="title function_">valueOf</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以给doSomething函数的原型对象添加新属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">doSomething.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomething.<span class="property"><span class="keyword">prototype</span></span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到运行后的结果</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">constructor</span>: ƒ <span class="title function_">doSomething</span>(),</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">constructor</span>: ƒ <span class="title class_">Object</span>(),</span><br><span class="line">        <span class="attr">hasOwnProperty</span>: ƒ <span class="title function_">hasOwnProperty</span>(),</span><br><span class="line">        <span class="attr">isPrototypeOf</span>: ƒ <span class="title function_">isPrototypeOf</span>(),</span><br><span class="line">        <span class="attr">propertyIsEnumerable</span>: ƒ <span class="title function_">propertyIsEnumerable</span>(),</span><br><span class="line">        <span class="attr">toLocaleString</span>: ƒ <span class="title function_">toLocaleString</span>(),</span><br><span class="line">        <span class="attr">toString</span>: ƒ <span class="title function_">toString</span>(),</span><br><span class="line">        <span class="attr">valueOf</span>: ƒ <span class="title function_">valueOf</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以通过<code>new</code>操作符来创建基于这个原型对象的<code>doSomething</code>实例。使用<code>new</code>操作符，只需在调用<code>doSomething</code>函数语句之前添加<code>new</code>。这样，便可以获得这个函数的一个实例对象。一些属性就可以添加到该原型对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">doSomething.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>; <span class="comment">// add a property onto the prototype</span></span><br><span class="line"><span class="keyword">var</span> doSomeInstancing = <span class="keyword">new</span> <span class="title function_">doSomething</span>();</span><br><span class="line">doSomeInstancing.<span class="property">prop</span> = <span class="string">&quot;some value&quot;</span>; <span class="comment">// add a property onto the object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomeInstancing );</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;some value&quot;</span>,</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">constructor</span>: ƒ <span class="title function_">doSomething</span>(),</span><br><span class="line">        <span class="attr">__proto__</span>: &#123;</span><br><span class="line">            <span class="attr">constructor</span>: ƒ <span class="title class_">Object</span>(),</span><br><span class="line">            <span class="attr">hasOwnProperty</span>: ƒ <span class="title function_">hasOwnProperty</span>(),</span><br><span class="line">            <span class="attr">isPrototypeOf</span>: ƒ <span class="title function_">isPrototypeOf</span>(),</span><br><span class="line">            <span class="attr">propertyIsEnumerable</span>: ƒ <span class="title function_">propertyIsEnumerable</span>(),</span><br><span class="line">            <span class="attr">toLocaleString</span>: ƒ <span class="title function_">toLocaleString</span>(),</span><br><span class="line">            <span class="attr">toString</span>: ƒ <span class="title function_">toString</span>(),</span><br><span class="line">            <span class="attr">valueOf</span>: ƒ <span class="title function_">valueOf</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示, <code>doSomeInstancing</code> 中的<code>__proto__</code>是 <code>doSomething.prototype</code>. 但这是做什么的呢？当你访问<code>doSomeInstancing</code> 中的一个属性，浏览器首先会查看<code>doSomeInstancing</code> 中是否存在这个属性。</p><p>如果 <code>doSomeInstancing</code> 不包含属性信息, 那么浏览器会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 中进行查找(同 <code>doSomething.prototype</code>). 如属性在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 中查找到，则使用 <code>doSomeInstancing</code> 中 <code>__proto__</code> 的属性。</p><p>否则，如果 <code>doSomeInstancing</code> 中 <code>__proto__</code> 不具有该属性，则检查<code>doSomeInstancing</code> 的 <code>__proto__</code> 的  <code>__proto__</code> 是否具有该属性。默认情况下，任何函数的原型属性 <code>__proto__</code> 都是 <code>window.Object.prototype</code>. 因此, 通过<code>doSomeInstancing</code> 的 <code>__proto__</code> 的  <code>__proto__</code>  ( 同 <code>doSomething.prototype</code> 的 <code>__proto__</code> (同  <code>Object.prototype</code>)) 来查找要搜索的属性。</p><p>如果属性不存在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的  <code>__proto__</code> 中， 那么就会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的  <code>__proto__</code> 的  <code>__proto__</code> 中查找。然而, 这里存在个问题：<code>doSomeInstancing</code> 的 <code>__proto__</code> 的  <code>__proto__</code> 的  <code>__proto__</code> 其实不存在。因此，只有这样，在 <code>__proto__</code> 的整个原型链被查看之后，这里没有更多的 <code>__proto__</code> ， 浏览器断言该属性不存在，并给出属性值为 <code>undefined</code> 的结论。</p><h3 id="使用不同的方法来创建对象和生成原型链"><a href="#使用不同的方法来创建对象和生成原型链" class="headerlink" title="使用不同的方法来创建对象和生成原型链"></a>使用不同的方法来创建对象和生成原型链</h3><h4 id="使用语法结构创建的对象"><a href="#使用语法结构创建的对象" class="headerlink" title="使用语法结构创建的对象"></a>使用语法结构创建的对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// o 这个对象继承了 Object.prototype 上面的所有属性</span></span><br><span class="line"><span class="comment">// o 自身没有名为 hasOwnProperty 的属性</span></span><br><span class="line"><span class="comment">// hasOwnProperty 是 Object.prototype 的属性</span></span><br><span class="line"><span class="comment">// 因此 o 继承了 Object.prototype 的 hasOwnProperty</span></span><br><span class="line"><span class="comment">// Object.prototype 的原型为 null</span></span><br><span class="line"><span class="comment">// 原型链如下:</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;yo&quot;</span>, <span class="string">&quot;whadup&quot;</span>, <span class="string">&quot;?&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// (Array.prototype 中包含 indexOf, forEach 等方法)</span></span><br><span class="line"><span class="comment">// 原型链如下:</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用构造器创建的对象"><a href="#使用构造器创建的对象" class="headerlink" title="使用构造器创建的对象"></a>使用构造器创建的对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Graph</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">edges</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Graph</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addVertex</span>: <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line"><span class="comment">// g 是生成的对象，他的自身属性有 &#x27;vertices&#x27; 和 &#x27;edges&#x27;。</span></span><br><span class="line"><span class="comment">// 在 g 被实例化时，g.[[Prototype]] 指向了 Graph.prototype。</span></span><br></pre></td></tr></table></figure><h4 id="使用-Object-create-创建的对象"><a href="#使用-Object-create-创建的对象" class="headerlink" title="使用 Object.create 创建的对象"></a>使用 Object.create 创建的对象</h4><p>ECMAScript 5 中引入了一个新方法：<code>Object.create()</code>。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(a);</span><br><span class="line"><span class="comment">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">a</span>); <span class="comment">// 1 (继承而来)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">Object</span>.<span class="title function_">create</span>(b);</span><br><span class="line"><span class="comment">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// d ---&gt; null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">hasOwnProperty</span>); <span class="comment">// undefined, 因为d没有继承Object.prototype</span></span><br></pre></td></tr></table></figure><h4 id="使用-class-关键字创建的对象"><a href="#使用-class-关键字创建的对象" class="headerlink" title="使用 class 关键字创建的对象"></a>使用 class 关键字创建的对象</h4><p><strong>ECMAScript6</strong> 引入了一套新的关键字用来实现 class。使用基于类语言的开发人员会对这些结构感到熟悉，但它们是不同的。<code>JavaScript</code> 仍然基于原型。这些新的关键字包括 <code>class</code>, <code>constructor</code>，<code>static</code>，<code>extends</code> 和 <code>super</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Polygon</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">sideLength</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(sideLength, sideLength);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">area</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">width</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">sideLength</span>(<span class="params">newLength</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = newLength;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = newLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>像C语言这样的底层语言一般都有底层的内存管理接口，比如 <code>malloc()</code>和<code>free()</code>。相反，<code>JavaScript</code>是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让<code>JavaScript</code>（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。</p><h3 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h3><p>不管什么程序语言，内存生命周期基本是一致的：</p><ul><li>分配你所需要的内存</li><li>使用分配到的内存（读、写）</li><li>不需要时将其释放\归还</li></ul><p>所有语言第二部分都是明确的。第一和第三部分在底层语言中是明确的，但在像<code>JavaScript</code>这些高级语言中，大部分都是隐含的。</p><h4 id="JavaScript-的内存分配"><a href="#JavaScript-的内存分配" class="headerlink" title="JavaScript 的内存分配"></a>JavaScript 的内存分配</h4><p>为了不让程序员费心分配内存，<code>JavaScript</code> 在定义变量时就完成了内存分配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>; <span class="comment">// 给数值变量分配内存</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;azerty&quot;</span>; <span class="comment">// 给字符串分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">null</span></span><br><span class="line">&#125;; <span class="comment">// 给对象及其包含的值分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组及其包含的值分配内存（就像对象一样）</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;abra&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">// 给函数（可调用的对象）分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式也能分配一个对象</span></span><br><span class="line">someElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  someElement.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>通过函数调用分配内存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 分配一个 Date 对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 分配一个 DOM 元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有些方法分配新变量或者新对象：</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;azerty&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// s2 是一个新的字符串</span></span><br><span class="line"><span class="comment">// 因为字符串是不变量，</span></span><br><span class="line"><span class="comment">// JavaScript 可能决定不分配内存，</span></span><br><span class="line"><span class="comment">// 只是存储了 [0-3] 的范围。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;ouais ouais&quot;</span>, <span class="string">&quot;nan nan&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="string">&quot;generation&quot;</span>, <span class="string">&quot;nan nan&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a3 = a.<span class="title function_">concat</span>(a2);</span><br><span class="line"><span class="comment">// 新数组有四个元素，是 a 连接 a2 的结果</span></span><br></pre></td></tr></table></figure><p>使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p><h4 id="当内存不再需要使用时释放"><a href="#当内存不再需要使用时释放" class="headerlink" title="当内存不再需要使用时释放"></a>当内存不再需要使用时释放</h4><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“哪些被分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。</p><p>高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的（无法通过某种算法解决）。</p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。</p><p>垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个<code>Javascript</code>对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）。</p><p>在这里，“对象”的概念不仅特指 <code>JavaScript</code> 对象，还包括函数作用域（或者全局词法作用域）。</p><p>这是最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o</span></span><br><span class="line"><span class="comment">// 很显然，没有一个可以被垃圾收集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = o; <span class="comment">// o2变量是第二个对“这个对象”的引用</span></span><br><span class="line"></span><br><span class="line">o = <span class="number">1</span>;      <span class="comment">// 现在，“这个对象”只有一个o2变量的引用了，“这个对象”的原始引用o已经没有</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oa = o2.<span class="property">a</span>; <span class="comment">// 引用“这个对象”的a属性</span></span><br><span class="line"><span class="comment">// 现在，“这个对象”有两个引用了，一个是o2，一个是oa</span></span><br><span class="line"></span><br><span class="line">o2 = <span class="string">&quot;yo&quot;</span>; <span class="comment">// 虽然最初的对象现在已经是零引用了，可以被垃圾回收了</span></span><br><span class="line"><span class="comment">// 但是它的属性a的对象还在被oa引用，所以还不能回收</span></span><br><span class="line"></span><br><span class="line">oa = <span class="literal">null</span>; <span class="comment">// a属性的那个对象现在也是零引用了</span></span><br><span class="line"><span class="comment">// 它可以被垃圾回收了</span></span><br></pre></td></tr></table></figure><p>该算法有个限制：无法处理循环引用的事例。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> o2 = &#123;&#125;;</span><br><span class="line">  o.<span class="property">a</span> = o2; <span class="comment">// o 引用 o2</span></span><br><span class="line">  o2.<span class="property">a</span> = o; <span class="comment">// o2 引用 o</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;azerty&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><p>这里的内存管理讲的很一般，如果要详细的了解，还是要去看 <code>C</code> 的指针部分的内容。不过 <code>C</code> 的指针内容很复杂，需要慢慢斟酌，慢慢理解</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数算是 <code>js</code> 里面花样最多的了，其他语言也有闭包，函数式编程，但是花样这么多，用法这么乱的挺少的。起码<code>Swift</code>的 函数真的很好用，然后对于引用对象的 拷贝也是正常的 <code>C</code> 的逻辑，<code>js</code>的我现在很难理解，也看不到底层的内存分布是怎么个逻辑。</p><p>还是先看看 函数的 教程吧</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>基础语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</span><br><span class="line">(param1, param2, …, paramN) =&gt; expression</span><br><span class="line"><span class="comment">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class="line">(singleParam) =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; &#123; statements &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class="line">() =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><p>高级语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加括号的函数体返回对象字面量表达式：</span></span><br><span class="line">params =&gt; (&#123;<span class="attr">foo</span>: bar&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持剩余参数和默认参数</span></span><br><span class="line">(param1, param2, ...rest) =&gt; &#123; statements &#125;</span><br><span class="line">(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同样支持参数列表解构</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">[a, b] = [<span class="number">1</span>, <span class="number">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt; a + b + c;</span><br><span class="line"><span class="title function_">f</span>();  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>引入箭头函数有两个方面的作用：更简短的函数并且不绑定this。</p><p>更短的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = [</span><br><span class="line">  <span class="string">&#x27;Hydrogen&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Helium&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Lithium&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Beryllium&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">elements.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element.<span class="property">length</span>;</span><br><span class="line">&#125;); <span class="comment">// 返回数组：[8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的普通函数可以改写成如下的箭头函数</span></span><br><span class="line">elements.<span class="title function_">map</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.<span class="property">length</span>;</span><br><span class="line">&#125;); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当箭头函数只有一个参数时，可以省略参数的圆括号</span></span><br><span class="line">elements.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> element.<span class="property">length</span>;</span><br><span class="line">&#125;); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当箭头函数的函数体只有一个 `return` 语句时，可以省略 `return` 关键字和方法体的花括号</span></span><br><span class="line">elements.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> element.<span class="property">length</span>); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个例子中，因为我们只需要 `length` 属性，所以可以使用参数解构</span></span><br><span class="line"><span class="comment">// 需要注意的是字符串 `&quot;length&quot;` 是我们想要获得的属性的名称，而 `lengthFooBArX` 则只是个变量名，</span></span><br><span class="line"><span class="comment">// 可以替换成任意合法的变量名</span></span><br><span class="line">elements.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; <span class="string">&quot;length&quot;</span>: lengthFooBArX &#125;</span>) =&gt;</span> lengthFooBArX); <span class="comment">// [8, 6, 7, 9]</span></span><br></pre></td></tr></table></figure><p>没有单独的<code>this</code></p><p>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的<code>this</code>值：</p><ul><li>如果是该函数是一个构造函数，this指针指向一个新的对象</li><li>在严格模式下的函数调用下，this指向undefined</li><li>如果是该函数是一个对象的方法，则它的this指针指向这个对象</li><li>等等</li></ul><p><code>This</code>被证明是令人厌烦的面向对象风格的编程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Person() 构造函数定义 `this`作为它自己的实例.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">growUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在非严格模式, growUp()函数定义 `this`作为全局对象,</span></span><br><span class="line">    <span class="comment">// 与在 Person()构造函数中定义的 `this`并不相同.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在ECMAScript 3/5中，通过将this值分配给封闭的变量，可以解决this问题。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  that.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">growUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 回调引用的是`that`变量, 其值是预期的对象.</span></span><br><span class="line">    that.<span class="property">age</span>++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数不会创建自己的<code>this</code>,它只会从自己的作用域链的上一层继承<code>this</code>。因此，在下面的代码中，传递给<code>setInterval</code>的函数内的<code>this</code>与封闭函数中的<code>this</code>值相同.<br>严格模式的其他规则依然不变.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>++; <span class="comment">// |this| 正确地指向 p 实例</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>通过 <code>call</code> 或 <code>apply</code> 调用<br>由于 箭头函数没有自己的<code>this</code>指针，通过 <code>call()</code> 或 <code>apply()</code> 方法调用一个函数时，只能传递参数（不能绑定this—译者注），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立—译者注）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> adder = &#123;</span><br><span class="line">  base : <span class="number">1</span>,</span><br><span class="line">  </span><br><span class="line">  add : <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v + <span class="variable language_">this</span>.<span class="property">base</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f</span>(a);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">addThruCall</span>: <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v + <span class="variable language_">this</span>.<span class="property">base</span>;</span><br><span class="line">    <span class="keyword">var</span> b = &#123;</span><br><span class="line">      base : <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> f.<span class="title function_">call</span>(b, a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adder.<span class="title function_">add</span>(<span class="number">1</span>));         <span class="comment">// 输出 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adder.<span class="title function_">addThruCall</span>(<span class="number">1</span>)); <span class="comment">// 仍然输出 2</span></span><br></pre></td></tr></table></figure><p>箭头函数不绑定<code>Arguments</code> 对象。因此，在本示例中，<code>arguments</code>只是引用了封闭作用域内的<code>arguments</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">arguments</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arr</span> = (<span class="params"></span>) =&gt; <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">arr</span>(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">arguments</span>[<span class="number">0</span>] + n; <span class="comment">// 隐式绑定 foo 函数的 arguments 对象. arguments[0] 是 n,即传给foo函数的第一个参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">2</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">3</span>,<span class="number">2</span>);<span class="comment">//6</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">4</span>);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在大多数情况下，使用剩余参数是相较使用arguments对象的更好选择。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params">...args</span>) =&gt; args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">f</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1,arg2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params">...args</span>) =&gt; args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f</span>(arg1,arg2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>就到这里吧，js的内容看得我头疼，又很困。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 语言的内容，前面基本上也记录的差不多了。这里就聊一些&lt;code&gt;JavaScript&lt;/code&gt;语言更深入的问题，加深对这个语言的理解。&lt;br&gt;&lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;Java&lt;/code&gt; 始终是 &lt;code&gt;JavaScript&lt;/code&gt; 的基础，很多概念都是直接继承过来的，所以学习 &lt;code&gt;C&lt;/code&gt; 是很重要的。我基本上每年都会对 &lt;code&gt;C&lt;/code&gt; 有一个回顾，然后把数据结构的书再看一遍。&lt;br&gt;扯远了，这边只是记录 &lt;code&gt;JavaScript&lt;/code&gt; 一些知识点，让我以后更好地上手 &lt;code&gt;JavaScript&lt;/code&gt;，也是学习&lt;code&gt;React&lt;/code&gt;的一个必要的过程。虽然我已经有一个上线的 &lt;code&gt;React&lt;/code&gt; 项目，但是&lt;code&gt;React&lt;/code&gt;的很多原理我基本上是抓瞎的。&lt;br&gt;作为一个移动端，在现在大前端的趋势下，多一个&lt;code&gt;React&lt;/code&gt;的能力也挺好的。好几年前已经用&lt;code&gt;Vue&lt;/code&gt;上线过一个项目了，但是那个项目比较简单，所以几年过去，我基本上忘的差不多了。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Web" scheme="https://aichiko0225.github.com/memoirs/tags/Web/"/>
    
    <category term="基础知识" scheme="https://aichiko0225.github.com/memoirs/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="JavaScript" scheme="https://aichiko0225.github.com/memoirs/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 温习记录（一）</title>
    <link href="https://aichiko0225.github.com/memoirs/20201030/JavaScript-study-record/"/>
    <id>https://aichiko0225.github.com/memoirs/20201030/JavaScript-study-record/</id>
    <published>2020-10-29T16:00:00.000Z</published>
    <updated>2024-12-13T03:00:50.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>最近用react-native 完成了一个公司的项目，JavaScript 其实已经看过很多遍了，上个月就看了一遍全部的教程，但是没有系统的记录，以及一些比较麻烦的地方。<br>有一些三方的源码还是看的不太懂，而且js的坑不算少，我希望能够记录一下，下次能够快速定位问题。<br>（起码我可以看得懂三方的源代码o(╯□╰)o）</p><span id="more"></span><h2 id="让我们愉快的开始吧"><a href="#让我们愉快的开始吧" class="headerlink" title="让我们愉快的开始吧"></a>让我们愉快的开始吧</h2><p>JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web 页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，例如 Node.js、 Apache CouchDB 和 Adobe Acrobat。JavaScript 是一种基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。了解更多 JavaScript。</p><p>一些基础的知识这里就不说了，主要是一些值得注意的。</p><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>从 ECMAScript 6 开始，JavaScript 增加了对 Promise 对象的支持，它允许你对延时和异步操作流进行控制。<br>Promise 对象有以下几种状态：</p><ul><li>pending：初始的状态，即正在执行，不处于 fulfilled 或 rejected 状态。</li><li>fulfilled：成功的完成了操作。</li><li>rejected：失败，没有完成操作。</li><li>settled：Promise 处于 fulfilled 或 rejected 二者中的任意一个状态, 不会是 pending。</li></ul><p>通过 XHR 加载图片<br>你可以在 MDN GitHub promise-test 中找到这个简单的例子，它使用了 Promise 和 XMLHttpRequest 来加载一张图片，你也可以直接在这个页面查看他的效果。同时为了让你更清楚的了解 Promise 和 XHR 的结构，代码中每一个步骤后都附带了注释。</p><p>这里有一个未注释的版本，展现了 Promise 的工作流，希望可以对你的理解有所帮助。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">imgLoad</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">    request.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(request.<span class="property">response</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;Image didn\&#x27;t load successfully; error code:&#x27;</span> </span><br><span class="line">                     + request.<span class="property">statusText</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;There was a network error.&#x27;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    request.<span class="title function_">send</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Promise</strong> 这里只是简单介绍，后面会用单独的部分来讲解的</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是 JavaScript 中的基本组件之一。 一个函数是 JavaScript 过程 — 一组执行任务或计算值的语句。要使用一个函数，你必须将其定义在你希望调用它的作用域内。</p><p>一个JavaScript 函数用function关键字定义，后面跟着函数名和圆括号。</p><p>函数很重要，函数作用域很重要，最关键的是js的作用域有很多奇葩的地方</p><p>在函数内定义的变量不能在函数之外的任何地方访问，因为变量仅仅在该函数的域的内部有定义。相对应的，一个函数可以访问定义在其范围内的任何变量和函数。换言之，定义在全局域中的函数可以访问所有定义在全局域中的变量。在另一个函数中定义的函数也可以访问在其父函数中定义的所有变量和父函数有权访问的任何其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的变量定义在全局作用域(global scope)中</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">20</span>,</span><br><span class="line">    num2 = <span class="number">3</span>,</span><br><span class="line">    name = <span class="string">&quot;Chamahk&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本函数定义在全局作用域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num1 = <span class="number">40</span>;</span><br><span class="line">    num2 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiplyWithNumber</span>(<span class="params">num1: number, num2: number</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = num1 * num2;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">multiply</span>(); <span class="comment">// 返回 60</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">multiplyWithNumber</span>(num1, num2)</span><br><span class="line"></span><br><span class="line"><span class="title function_">change</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">multiply</span>(); <span class="comment">// 返回 ??? 120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params">num, obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = num</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">obj</span> = obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">init</span>(c.<span class="property">num</span>, d)</span><br><span class="line">c.<span class="property">num</span> = <span class="number">20</span></span><br><span class="line">d = &#123; <span class="attr">aaaa</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="attr">num</span>: a.<span class="property">num</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">change</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.<span class="title function_">change</span>()</span><br><span class="line"></span><br><span class="line">a.<span class="property">num</span></span><br><span class="line">b.<span class="property">num</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="嵌套函数和闭包"><a href="#嵌套函数和闭包" class="headerlink" title="嵌套函数和闭包"></a>嵌套函数和闭包</h4><p>你可以在一个函数里面嵌套另外一个函数。嵌套（内部）函数对其容器（外部）函数是私有的。它自身也形成了一个闭包。一个闭包是一个可以自己拥有独立的环境与变量的表达式（通常是函数）。</p><p>既然嵌套函数是一个闭包，就意味着一个嵌套函数可以”继承“容器函数的参数和变量。换句话说，内部函数包含外部函数的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outside</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inside</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inside;</span><br><span class="line">&#125;</span><br><span class="line">fn_inside = <span class="title function_">outside</span>(<span class="number">3</span>); <span class="comment">// 可以这样想：给一个函数，使它的值加3</span></span><br><span class="line">result = <span class="title function_">fn_inside</span>(<span class="number">5</span>); <span class="comment">// returns 8</span></span><br><span class="line"></span><br><span class="line">result1 = <span class="title function_">outside</span>(<span class="number">3</span>)(<span class="number">5</span>); <span class="comment">// returns 8</span></span><br></pre></td></tr></table></figure><p>闭包是 JavaScript 中最强大的特性之一。JavaScript 允许函数嵌套，并且内部函数可以访问定义在外部函数中的所有变量和函数，以及外部函数能访问的所有变量和函数。<br>但是，外部函数却不能够访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一定的安全性。</p><p>此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数的生存周期将比内部函数执行时间长。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。</p><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>从ECMAScript 6开始，有两个新的类型的参数：默认参数，剩余参数。<br>在JavaScript中，函数参数的默认值是undefined。然而，在某些情况下设置不同的默认值是有用的。这时默认参数可以提供帮助。</p><p>剩余参数语法允许将不确定数量的参数表示为数组。在下面的例子中，使用剩余参数收集从第二个到最后参数。然后，我们将这个数组的每一个数与第一个参数相乘。这个例子是使用了一个箭头函数，这将在下面介绍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">multiplier, ...theArgs</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> theArgs.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> multiplier * x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数表达式（也称胖箭头函数）相比函数表达式具有较短的语法并以词法的方式绑定 this。箭头函数总是匿名的。另见 hacks.mozilla.org 的博文：<a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">“深度了解ES6：箭头函数”</a>。</p><p>有两个因素会影响引入箭头函数：更简洁的函数和 this。</p><h3 id="数字和日期"><a href="#数字和日期" class="headerlink" title="数字和日期"></a>数字和日期</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>在 JavaScript 里面，数字均为双精度浮点类型（double-precision 64-bit binary format IEEE 754），即一个介于±2−1023和±2+1024之间的数字，或约为±10−308到±10+308，数字精度为53位。整数数值仅在±(253 - 1)的范围内可以表示准确。</p><p>JavaScript最近添加了 BigInt 的支持，能够用于表示极大的数字。使用 BigInt 的时候有一些注意事项，例如，你不能让 BigInt 和 Number 直接进行运算，你也不能用 Math 对象去操作 BigInt 数字。</p><p>请参见Javascript指南中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">JavaScript 数据类型和数据结构</a> ，了解其他更多的基本类型。</p><h4 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h4><p>JavaScript没有日期数据类型。但是你可以在你的程序里使用 Date 对象和其方法来处理日期和时间。Date对象有大量的设置、获取和操作日期的方法。 它并不含有任何属性。<br>JavaScript 处理日期数据类似于Java。这两种语言有许多一样的处理日期的方法，也都是以1970年1月1日00:00:00以来的毫秒数来储存数据类型的。</p><p>处理日期时间的Date对象方法可分为以下几类：</p><ul><li>“set” 方法, 用于设置Date对象的日期和时间的值。</li><li>“get” 方法,用于获取Date对象的日期和时间的值。</li><li>“to” 方法,用于返回Date对象的字符串格式的值。</li><li>parse 和UTC 方法, 用于解析Date字符串。</li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、matchAll、replace、search 和 split 方法。本章介绍 JavaScript 正则表达式。</p><table><thead><tr><th align="center">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">\</td><td align="left">依照下列规则匹配：</br>在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “&quot; 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “&quot;，它将不再匹配任何字符，而是表示一个字符边界。</br>在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。</br>如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。&#x2F;[a-z]\s&#x2F;i 和 new RegExp(“[a-z]\s”, “i”) 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（\s 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 &#x2F;[a-z]:\&#x2F;i 和 new RegExp(“[a-z]:\\“,”i”) 会创建相同的表达式，即匹配类似 “C:&quot; 字符串。</td></tr><tr><td align="center">^</td><td align="left">匹配输入的开始</td></tr><tr><td align="center">$</td><td align="left">匹配输入的结束</td></tr><tr><td align="center">*</td><td align="left">匹配前一个表达式 0 次或多次。等价于 {0,}</td></tr><tr><td align="center">+</td><td align="left">匹配前面一个表达式 1 次或者多次。等价于 {1,}</td></tr><tr><td align="center">?</td><td align="left">匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</td></tr><tr><td align="center">.</td><td align="left">（小数点）默认匹配除换行符之外的任何单个字符。</td></tr><tr><td align="center">x|y</td><td align="left">匹配‘x’或者‘y’。</br> 例如, &#x2F;a{2,}&#x2F; 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td></tr><tr><td align="center">(x)</td><td align="left">像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。</td></tr><tr><td align="center">(?:x)</td><td align="left">匹配 ‘x’ 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。</td></tr><tr><td align="center">x(?&#x3D;y)</td><td align="left">匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。</td></tr><tr><td align="center">(?&lt;&#x3D;y)x</td><td align="left">匹配’x’仅当’x’前面是’y’.这种叫做后行断言。</td></tr><tr><td align="center">x(?!y)</td><td align="left">仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找。</td></tr><tr><td align="center">(?&lt;!y)x</td><td align="left">仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找。</td></tr><tr><td align="center">{n}</td><td align="left">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。</br>比如， &#x2F;a{2}&#x2F; 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</td></tr><tr><td align="center">{n,}</td><td align="left">n是一个正整数，匹配前一个字符至少出现了n次。</br>例如, &#x2F;a{2,}&#x2F; 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td></tr><tr><td align="center">{n,m}</td><td align="left">n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。</br>例如，&#x2F;a{1, 3}&#x2F; 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</td></tr><tr><td align="center">[xyz]</td><td align="left">一个字符集合。匹配方括号中的任意字符，包括转义序列。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。</br>例如，[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。&#x2F;[a-z.]+&#x2F; 和&#x2F;[\w.]+&#x2F;与字符串“test.i.ng”匹配。</td></tr><tr><td align="center">[^xyz]</td><td align="left">一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</td></tr><tr><td align="center">[\b]</td><td align="left">匹配一个退格(U+0008)。（不要和\b混淆了。）</td></tr><tr><td align="center">\b</td><td align="left">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\b]混淆了）</br>使用”moon”举例：</br>&#x2F;\bm&#x2F;匹配“moon”中的‘m’；</br>&#x2F;oo\b&#x2F;并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。</br>&#x2F;oon\b&#x2F;匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。</td></tr><tr><td align="center">\B</td><td align="left">匹配一个非单词边界。</td></tr><tr><td align="center">\d</td><td align="left">匹配一个数字。等价于[0-9]。</br>例如， &#x2F;\d&#x2F; 或者 &#x2F;[0-9]&#x2F; 匹配”B2 is the suite number.”中的’2’。</td></tr><tr><td align="center">\D</td><td align="left">匹配一个非数字字符。等价于[^0-9]。</td></tr><tr><td align="center">\f</td><td align="left">匹配一个换页符 (U+000C)。</td></tr><tr><td align="center">\n</td><td align="left">匹配一个换行符 (U+000A)。</td></tr><tr><td align="center">\r</td><td align="left">匹配一个回车符 (U+000D)。</td></tr><tr><td align="center">\s</td><td align="left">匹配一个空白字符，包括空格、制表符、换页符和换行符。</td></tr><tr><td align="center">\S</td><td align="left">匹配一个非空白字符。</td></tr><tr><td align="center">\t</td><td align="left">匹配一个水平制表符 (U+0009)。</td></tr><tr><td align="center">\v</td><td align="left">匹配一个垂直制表符 (U+000B)。</td></tr><tr><td align="center">\w</td><td align="left">匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。</br>例如, &#x2F;\w&#x2F; 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</td></tr><tr><td align="center">\W</td><td align="left">匹配一个非单字字符。等价于 [^A-Za-z0-9_]。</br>例如, &#x2F;\W&#x2F; 或者 &#x2F;[^A-Za-z0-9_]&#x2F; 匹配 “50%.” 中的 ‘%’。</td></tr><tr><td align="center">\n</td><td align="left">在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</br>比如 &#x2F;apple(,)\sorange\1&#x2F; 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</td></tr><tr><td align="center">\0</td><td align="left">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 \0<digits> 是一个八进制转义序列。</td></tr><tr><td align="center">\xhh</td><td align="left">匹配一个两位十六进制数（\x00-\xFF）表示的字符。</td></tr><tr><td align="center">\uhhhh</td><td align="left">匹配一个四位十六进制数表示的 UTF-16 代码单元。</td></tr><tr><td align="center">\u{hhhh}或\u{hhhhh}</td><td align="left">（仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</td></tr></tbody></table><h3 id="数组对象-Array-object"><a href="#数组对象-Array-object" class="headerlink" title="数组对象(Array object)"></a>数组对象(Array object)</h3><p>数组(<code>array</code>)是一个有序的数据集合，我们可以通过数组名称(name)和索引(index)进行访问。例如，我们定义了一个数组emp，数组中的每个元素包含了一个雇员的名字以及其作为索引的员工号。那么emp[1]将会代表1号员工，emp[2]将会代表2号员工，以此类推。</p><p>JavaScript中没有明确的数组数据类型。但是，我们可以通过使用内置Array对象和它的方法对数组进行操作。Array对象有很多操作数组的方法，比如合并、反转、排序等。数组对象有一个决定数组长度和使用正则表达式操作其他属性的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(element0, element1, ..., elementN);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>(element0, element1, ..., elementN);</span><br><span class="line"><span class="keyword">var</span> arr = [element0, element1, ..., elementN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 译者注: var arr=[4] 和 var arr=new Array(4)是不等效的，</span></span><br><span class="line"><span class="comment">// 后者4指数组长度，所以使用字面值(literal)的方式应该不仅仅是便捷，同时也不易踩坑</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样有同样的效果</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.<span class="property">length</span> = arrayLength;</span><br></pre></td></tr></table></figure><h4 id="数组的方法-array-methods"><a href="#数组的方法-array-methods" class="headerlink" title="数组的方法(array methods)"></a>数组的方法(array methods)</h4><p>Array 对象具有下列方法：<br>concat() 连接两个数组并返回一个新的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">myArray = myArray.<span class="title function_">concat</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); </span><br><span class="line"><span class="comment">// myArray is now [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><p>join(deliminator &#x3D; ‘,’) 将数组的所有元素连接成一个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Wind&quot;</span>, <span class="string">&quot;Rain&quot;</span>, <span class="string">&quot;Fire&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> list = myArray.<span class="title function_">join</span>(<span class="string">&quot; - &quot;</span>); <span class="comment">// list is &quot;Wind - Rain - Fire&quot;</span></span><br></pre></td></tr></table></figure><p>push() 在数组末尾添加一个或多个元素，并返回数组操作后的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&quot;3&quot;</span>); <span class="comment">// myArray is now [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span></span><br></pre></td></tr></table></figure><p>pop() 从数组移出最后一个元素，并返回该元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> last = myArray.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// myArray is now [&quot;1&quot;, &quot;2&quot;], last = &quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>shift() 从数组移出第一个元素，并返回该元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span> (<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> first = myArray.<span class="title function_">shift</span>(); </span><br><span class="line"><span class="comment">// myArray is now [&quot;2&quot;, &quot;3&quot;], first is &quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>unshift() 在数组开头添加一个或多个元素，并返回数组的新长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span> (<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">myArray.<span class="title function_">unshift</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>); </span><br><span class="line"><span class="comment">// myArray becomes [&quot;4&quot;, &quot;5&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span></span><br></pre></td></tr></table></figure><p>其他的就不一一介绍了</p><h4 id="类型化数组-Typed-Arrays"><a href="#类型化数组-Typed-Arrays" class="headerlink" title="类型化数组(Typed Arrays )"></a>类型化数组(Typed Arrays )</h4><p>JavaScript typed arrays 是类数组对象（array-like object），其提供访问原始二进制数据的机制。 就像你知道的那样, Array 对象动态增长和收缩，可以有任何JavaScript值。但对于类型化数组，JavaScript引擎执行优化使得这些数组访问速度快速。 随着Web应用程序变得越来越强大，添加音频和视频处理等功能、可以使用 WebSockets 、使用原始数据， 这都需要访问原始的二进制数据，所以专门的优化将有助于JavaScript代码能够快速和容易地操纵原始二进制数据类型的数组。</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h4 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a>Map对象</h4><p>ECMAScript 2015 引入了一个新的数据结构来将一个值映射到另一个值。一个Map对象就是一个简单的键值对映射集合，可以按照数据插入时的顺序遍历所有的元素。</p><h4 id="Object和Map的比较"><a href="#Object和Map的比较" class="headerlink" title="Object和Map的比较"></a>Object和Map的比较</h4><p>一般地，objects会被用于将字符串类型映射到数值。Object允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而Map具有更多的优势。</p><p><code>Object</code>的键均为<code>Strings</code>类型，在<code>Map</code>里键可以是任意类型。<br>必须手动计算<code>Object</code>的尺寸，但是可以很容易地获取使用Map的尺寸。<br><code>Map</code>的遍历遵循元素的插入顺序。<br><code>Object</code>有原型，所以映射中有一些缺省的键。（可以用 <code>map = Object.create(null)</code> 回避）。</p><p>这三条提示可以帮你决定用<code>Map</code>还是<code>Object</code>：</p><p>如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用<code>Map</code>。<br>如果需要将原始值存储为键，则使用<code>Map</code>，因为<code>Object</code>将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。<br>如果需要对个别元素进行操作，使用<code>Object</code>。</p><h4 id="WeakMap对象"><a href="#WeakMap对象" class="headerlink" title="WeakMap对象"></a>WeakMap对象</h4><p>WeakMap对象也是键值对的集合。它的键必须是对象类型，值可以是任意类型。它的键被弱保持，也就是说，当其键所指对象没有其他地方引用的时候，它会被GC回收掉。WeakMap提供的接口与Map相同。</p><p>与Map对象不同的是，WeakMap的键是不可枚举的。不提供列出其键的方法。列表是否存在取决于垃圾回收器的状态，是不可预知的。</p><h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><p>javascript 中的对象(物体)，和其它编程语言中的对象一样，可以比照现实生活中的对象(物体)来理解它。 javascript 中对象(物体)的概念可以比照着现实生活中实实在在的物体来理解。</p><p>在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。</p><h4 id="创建新对象"><a href="#创建新对象" class="headerlink" title="创建新对象"></a>创建新对象</h4><p>JavaScript 拥有一系列预定义的对象。另外，你可以创建你自己的对象。从  JavaScript 1.2 之后，你可以通过对象初始化器（Object Initializer）创建对象。或者你可以创建一个构造函数并使用该函数和 new 操作符初始化对象。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><code>Promise</code> 是一个对象，它代表了一个异步操作的最终完成或者失败。因为大多数人仅仅是使用已创建的 <code>Promise</code> 实例对象，所以本教程将首先说明怎样使用 <code>Promise</code>，再说明如何创建 <code>Promise</code>。</p><p>本质上 <code>Promise</code> 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了。</p><p>假设现在有一个名为 <code>createAudioFileAsync()</code> 的函数，它接收一些配置和两个回调函数，然后异步地生成音频文件。一个回调函数在文件成功创建时被调用，另一个则在出现异常时被调用。</p><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p>连续执行两个或者多个异步操作是一个常见的需求，在上一个操作执行成功之后，开始下一个的操作，并带着上一步操作所返回的结果。我们可以通过创造一个 Promise 链来实现这种需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们也可以用箭头函数来表示</span></span><br><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">newResult</span> =&gt;</span> <span class="title function_">doThirdThing</span>(newResult))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="错误传递"><a href="#错误传递" class="headerlink" title="错误传递"></a>错误传递</h4><p>在之前的回调地狱示例中，你可能记得有 3 次 failureCallback 的调用，而在 Promise 链中只有尾部的一次调用。<br>通常，一遇到异常抛出，浏览器就会顺着 Promise 链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。这和以下同步代码的工作原理（执行过程）非常相似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">syncDoSomething</span>();</span><br><span class="line">  <span class="keyword">let</span> newResult = <span class="title function_">syncDoSomethingElse</span>(result);</span><br><span class="line">  <span class="keyword">let</span> finalResult = <span class="title function_">syncDoThirdThing</span>(newResult);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">  <span class="title function_">failureCallback</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 ECMAScript 2017 标准的 async/await 语法糖中，这种异步代码的对称性得到了极致的体现：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">doSomething</span>();</span><br><span class="line">    <span class="keyword">const</span> newResult = <span class="keyword">await</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">    <span class="keyword">const</span> finalResult = <span class="keyword">await</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="title function_">failureCallback</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-拒绝事件"><a href="#Promise-拒绝事件" class="headerlink" title="Promise 拒绝事件"></a>Promise 拒绝事件</h4><p>当 Promise 被拒绝时，会有下文所述的两个事件之一被派发到全局作用域（通常而言，就是window；如果是在 web worker 中使用的话，就是 Worker 或者其他 worker-based 接口）。这两个事件如下所示：</p><ul><li>rejectionhandled<br>  当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。</li><li>unhandledrejection<br>  当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。</li></ul><p>以上两种情况中，<code>PromiseRejectionEvent</code> 事件都有两个属性，一个是 <code>promise</code> 属性，该属性指向被驳回的 <code>Promise</code>，另一个是 <code>reason</code> 属性，该属性用来说明 <code>Promise</code> 被驳回的原因。</p><h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><p>从ECMAScript 2015 开始，JavaScript 获得了 Proxy 和 Reflect 对象的支持，允许你拦截并定义基本语言操作的自定义行为（例如，属性查找，赋值，枚举，函数调用等）。借助这两个对象，你可以在 JavaScript 元级别进行编程。</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>在 ECMAScript 6 中引入的 Proxy 对象可以拦截某些操作并实现自定义行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name <span class="keyword">in</span> target ? target[name] : <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">p.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">a</span>, p.<span class="property">b</span>); <span class="comment">// 1, 42</span></span><br></pre></td></tr></table></figure><p>Proxy 对象定义了一个目标（这里是一个空对象）和一个实现了 get 陷阱的 handler 对象。这里，代理的对象在获取未定义的属性时不会返回 undefined，而是返回 42。</p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>Reflect 是一个内置对象，它提供了可拦截 JavaScript 操作的方法。该方法和代理句柄类似，但 Reflect 方法并不是一个函数对象。</p><h2 id="客户端-Web-API"><a href="#客户端-Web-API" class="headerlink" title="客户端 Web API"></a>客户端 Web API</h2><p>当你给网页或者网页应用编写客户端的JavaScript时， 你很快会遇上应用程序接口（API ）—— 这些编程特性可用来操控网站所基于的浏览器与操作系统的不同方面，或是操控由其他网站或服务端传来的数据。在这个单元里，我们将一同探索什么是API，以及如何使用一些在你开发中将经常遇见的API。</p><ul><li>Web API简介<br>首先, 我们将从一个更高的角度来看这些API —它们是什么，它们怎么起作用的，你该怎么在自己的代码中使用它们以及他们是怎么构成的？ 我们依旧会再来看一看这些API有哪些主要的种类和他们会有哪些用处。</li><li>操作文档<br>当你在制作WEB页面和APP时,一个你最经常想要做的事就是通过一些方法来操作WEB文档。这其中最常见的方法就是使用文档对象模型Document Object Model (DOM)，它是一系列大量使用了 Document object的API来控制HTML和样式信息。通过这篇文章，我们来看看使用DOM方面的一些细节， 以及其他一些有趣的API能够通过一些有趣的方式改变你的环境。</li><li>从服务器获取数据<br>在现代网页及其APP中另外一个很常见的任务就是与服务器进行数据交互时不再刷新整个页面，这看起来微不足道，但却对一个网页的展现和交互上起到了很大的作用，在这篇文章里，我们将阐述这个概念，然后来了解实现这个功能的技术，例如 XMLHttpRequest 和 Fetch API.（抓取API）。</li><li>第三方 API<br>到目前为止我们所涉及的API都是浏览器内置的，但并不代表所有。许多大网站如Google Maps, Twitter, Facebook, PayPal等，都提供他们的API给开发者们去使用他们的数据（比如在你的博客里展示你分享的推特内容）或者服务（如在你的网页里展示定制的谷歌地图或接入Facebook登录功能）。这篇文章介绍了浏览器API和第三方API 的差别以及一些最新的典型应用。</li><li>绘制图形<br>浏览器包含多种强大的图形编程工具，从可缩放矢量图形语言Scalable Vector Graphics (SVG) language，到HTML绘制元素<code>&lt;canvas&gt;</code>元素(The Canvas API and WebGL). 这篇文章提供了部分canvas的简介，以及让你更深入学习的资源。</li><li>视频和音频 API<br>HTML5能够通过元素标签嵌入富媒体——<code>&lt;video&gt; and &lt;audio&gt;</code>——而将有自己的API来控制回放，搜索等功能。本文向您展示了如何创建自定义播放控制等常见的任务。</li><li>客户端存储<br>现代web浏览器拥有很多不同的技术，能够让你存储与网站相关的数据，并在需要时调用它们，能够让你长期保存数据、保存离线网站及其他实现其他功能。本文解释了这些功能的基本原理。</li></ul><p>详细的内容以后在慢慢补充吧，这种 api 对于我来说没多大作用，我还是主要在语言方面多了解一些。</p><h2 id="重新介绍-JavaScript（JS-教程）"><a href="#重新介绍-JavaScript（JS-教程）" class="headerlink" title="重新介绍 JavaScript（JS 教程）"></a>重新介绍 JavaScript（JS 教程）</h2><p>为什么会有这一篇“重新介绍”呢？因为 <code>JavaScript</code> 堪称世界上被人误解最深的编程语言。虽然常被嘲为“玩具语言”，但在它看似简洁的外衣下，还隐藏着强大的语言特性。 <code>JavaScript</code> 目前广泛应用于众多知名应用中，对于网页和移动开发者来说，深入理解 <code>JavaScript</code> 就尤为必要。</p><p>我们有必要先从这门语言的历史谈起。在1995 年 Netscape 一位名为 Brendan Eich 的工程师创造了 <code>JavaScript</code>，随后在 1996 年初，<code>JavaScript</code> 首先被应用于 Netscape 2 浏览器上。最初的 <code>JavaScript</code> 名为 LiveScript，但是因为一个糟糕的营销策略而被重新命名，该策略企图利用Sun Microsystem的Java语言的流行性，将它的名字从最初的 LiveScript 更改为 <code>JavaScript</code>——尽管两者之间并没有什么共同点。这便是之后混淆产生的根源。</p><p>几个月后，Microsoft 随 IE 3 发布推出了一个与之基本兼容的语言 JScript。又过了几个月，Netscape 将 <code>JavaScript</code> 提交至 Ecma International（一个欧洲标准化组织）， ECMAScript 标准第一版便在 1997 年诞生了，随后在 1999 年以 ECMAScript 第三版的形式进行了更新，从那之后这个标准没有发生过大的改动。由于委员会在语言特性的讨论上发生分歧，ECMAScript 第四版尚未推出便被废除，但随后于 2009 年 12 月发布的 ECMAScript 第五版引入了第四版草案加入的许多特性。第六版标准已经于 2015 年 6 月发布。</p><p>与大多数编程语言不同，<code>JavaScript</code> 没有输入或输出的概念。它是一个在宿主环境（host environment）下运行的脚本语言，任何与外界沟通的机制都是由宿主环境提供的。浏览器是最常见的宿主环境，但在非常多的其他程序中也包含 <code>JavaScript</code> 解释器，如 Adobe Acrobat、Adobe Photoshop、SVG 图像、Yahoo! 的 Widget 引擎，Node.js 之类的服务器端环境，NoSQL 数据库（如开源的 Apache CouchDB）、嵌入式计算机，以及包括 GNOME （注：GNU&#x2F;Linux 上最流行的 GUI 之一）在内的桌面环境等等。</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><code>JavaScript</code> 是一种多范式的动态语言，它包含类型、运算符、标准内置（ built-in）对象和方法。它的语法来源于 <code>Java</code> 和 <code>C</code>，所以这两种语言的许多语法特性同样适用于 <code>JavaScript</code>。<code>JavaScript</code> 通过原型链而不是类来支持面向对象编程（有关 ES6 类的内容参考这里Classes，有关对象原型参考见此继承与原型链）。<code>JavaScript</code>同样支持函数式编程——因为它们也是对象，函数也可以被保存在变量中，并且像其他对象一样被传递。</p><p>先从任何编程语言都不可缺少的组成部分——“类型”开始。<code>JavaScript</code> 程序可以修改值（value），这些值都有各自的类型。<code>JavaScript</code> 中的类型包括：</p><ul><li><code>Number</code>（数字）</li><li><code>String</code>（字符串）</li><li><code>Boolean</code>（布尔）</li><li><code>Function</code>（函数）</li><li><code>Object</code>（对象）</li><li><code>Symbol</code>（ES2015 新增）</li></ul><p>还有看上去有些…奇怪的 <code>undefined</code>（未定义）类型和 <code>null</code>（空）类型。此外还有<code>Array</code>（数组）类型，以及分别用于表示日期和正则表达式的 <code>Date</code>（日期）和 <code>RegExp</code>（正则表达式），这三种类型都是特殊的对象。严格意义上说，<code>Function</code>（函数）也是一种特殊的对象。所以准确来说，<code>JavaScript</code> 中的类型应该包括这些：</p><ul><li><code>Number</code>（数字）</li><li><code>String</code>（字符串）</li><li><code>Boolean</code>（布尔）</li><li><code>Symbol</code>（符号）（ES2015 新增）</li><li><code>Object</code>（对象）<ul><li><code>Function</code>（函数）</li><li><code>Array</code>（数组）</li><li><code>Date</code>（日期）</li><li><code>RegExp</code>（正则表达式）</li></ul></li><li><code>null</code>（空）</li><li><code>undefined</code>（未定义）</li></ul><p><code>JavaScript</code> 还有一种内置的 <code>Error</code>（错误）类型。但是，如果我们继续使用上面的分类，事情便容易得多；所以，现在，我们先讨论上面这些类型。</p><h3 id="数字-1"><a href="#数字-1" class="headerlink" title="数字"></a>数字</h3><p>根据语言规范，<code>JavaScript</code> 采用“遵循 IEEE 754 标准的双精度 64 位格式”（”double-precision 64-bit format IEEE 754 values”）表示数字。——在<code>JavaScript</code>（除了BigInt）当中，并不存在整数&#x2F;整型(<code>Integer</code>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> / <span class="number">2</span>);             <span class="comment">// 1.5,not 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">3</span> / <span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可以使用内置函数 parseInt() 将字符串转换为整型。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;010&quot;</span>, <span class="number">10</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些老版本的浏览器会将首字符为“0”的字符串当做八进制数字，2013 年以前的 JavaScript 实现</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;010&quot;</span>);  <span class="comment">//  8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;0x10&quot;</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是因为字符串以数字 0 开头，parseInt()函数会把这样的字符串视作八进制数字；</span></span><br><span class="line"><span class="comment">// 同理，0x开头的字符串则视为十六进制数字。</span></span><br></pre></td></tr></table></figure><p><code>JavaScript</code> 还有两个特殊值：<code>Infinity</code>（正无穷）和 -<code>Infinity</code>（负无穷）：<br>可以使用内置函数 <code>isFinite()</code> 来判断一个变量是否是一个有穷数， 如果类型为<code>Infinity</code>, -<code>Infinity</code> 或 <code>NaN</code>则返回<code>false</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> / <span class="number">0</span>; <span class="comment">//  Infinity</span></span><br><span class="line">-<span class="number">1</span> / <span class="number">0</span>; <span class="comment">// -Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(-<span class="title class_">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">2e64</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">&quot;0&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如果是纯数值类型的检测，则返回 false：</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&quot;0&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>JavaScript</code> 中的字符串是一串<code>Unicode</code> 字符序列。这对于那些需要和多语种网页打交道的开发者来说是个好消息。更准确地说，它们是一串<code>UTF-16</code>编码单元的序列，每一个编码单元由一个 16 位二进制数表示。每一个<code>Unicode</code>字符由一个或两个编码单元来表示。</p><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><p>与其他类型不同，<code>JavaScript</code> 中的 <code>null</code> 表示一个空值（<code>non-value</code>），必须使用 <code>null</code> 关键字才能访问，<code>undefined</code> 是一个“<code>undefined</code>（未定义）”类型的对象，表示一个未初始化的值，也就是还没有被分配的值。我们之后再具体讨论变量，但有一点可以先简单说明一下，<code>JavaScript</code> 允许声明变量但不对其赋值，一个未被赋值的变量就是 <code>undefined</code> 类型。还有一点需要说明的是，<code>undefined</code> 实际上是一个不允许修改的常量。</p><p>JavaScript 包含布尔类型，这个类型的变量有两个可能的值，分别是 true 和 false（两者都是关键字）。根据具体需要，JavaScript 按照如下规则将变量转换成布尔类型：</p><ul><li><code>false</code>、0、空字符串（””）、<code>NaN</code>、<code>null</code> 和 <code>undefined</code> 被转换为 <code>false</code></li><li>所有其他值被转换为 <code>true</code></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在 <code>JavaScript</code> 中声明一个新变量的方法是使用关键字 <code>let</code> 、<code>const</code> 和 <code>var</code>：</p><p><code>let</code> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。<br><code>const</code> 允许声明一个不可变的常量。这个常量在定义域内总是可见的。<br><code>var</code> 是最常见的声明变量的关键字。它没有其他两个关键字的种种限制。这是因为它是传统上在 <code>JavaScript</code> 声明变量的唯一方法。<br>使用 <code>var</code> 声明的变量在它所声明的整个函数都是可见的。</p><p>剩下的对象，函数就不一一记录了，其实跟上面的没多大区别，只是强化一下记忆。有语言基础的人应该会很好理解这些内容。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>JavaScript</code>还有很多的内容， 继承和原型链 是特别重要的内容，下一篇文章会详细聊一聊。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;最近用react-native 完成了一个公司的项目，JavaScript 其实已经看过很多遍了，上个月就看了一遍全部的教程，但是没有系统的记录，以及一些比较麻烦的地方。&lt;br&gt;有一些三方的源码还是看的不太懂，而且js的坑不算少，我希望能够记录一下，下次能够快速定位问题。&lt;br&gt;（起码我可以看得懂三方的源代码o(╯□╰)o）&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Web" scheme="https://aichiko0225.github.com/memoirs/tags/Web/"/>
    
    <category term="基础知识" scheme="https://aichiko0225.github.com/memoirs/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="JavaScript" scheme="https://aichiko0225.github.com/memoirs/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>macbook-键盘连击问题</title>
    <link href="https://aichiko0225.github.com/memoirs/20200911/other/macbook-%E9%94%AE%E7%9B%98%E8%BF%9E%E5%87%BB%E9%97%AE%E9%A2%98/"/>
    <id>https://aichiko0225.github.com/memoirs/20200911/other/macbook-%E9%94%AE%E7%9B%98%E8%BF%9E%E5%87%BB%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-10T16:00:00.000Z</published>
    <updated>2020-10-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，我的笔记本（17年款 macbook pro 13寸）经常出现键盘连击问题。</p><p>最大的表现是 e&#x2F;n&#x2F;i 这几个按键，按下的时候，会有概率的出现两个或三个。</p><h2 id="这不是个案"><a href="#这不是个案" class="headerlink" title="这不是个案"></a>这不是个案</h2><p>搜索了一下，有不少人都反馈了相同的问题，比如</p><p><a href="https://www.v2ex.com/t/494645">2018 款 MacBook Pro 键盘连击问题。。。</a><br><a href="https://www.v2ex.com/t/432590">MacBook Pro 键盘又连击了~😤🤪</a></p><p>而且苹果官方确实也承认了，这一代的键盘确实存在设计问题。</p><h2 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h2><p>根据大家的经验，找到了一款软件 <a href="https://github.com/aahung/Unshaky"><code>Unshaky</code></a> ，号称可以通过软件识别连击问题。</p><p>论坛中也有人说通过这个软件解决了。</p><p><strong>Unshaky</strong> tries to address an issue on the butterfly keyboard (Macbook, Macbook Air 2018 &amp; MacBook Pro 2016 and later): Double Key Press (See “<a href="#complaints-about-this-issue">User complaints</a>“ below). </p><p>Apple made it difficult to replace only the keyboard and it costs hundreds of dollars. <strong>Unshaky</strong> might save your keyboard by dismissing such “second key hits” (any key presses that occur no later than x milliseconds after the previous effective one). I fixed my “w” key with <strong>Unshaky</strong>, and if it does not work for you, open an issue <a href="https://github.com/aahung/Unshaky/issues">here</a>. The image below illustrates how Unshaky works.</p><p>[May 2019] Apple extends <a href="https://www.apple.com/ca/support/keyboard-service-program-for-macbook-and-macbook-pro/">the service program</a> to cover all MacBook (Air &amp; Pro) with 3rd gen butterfly keyboards.</p><p>我也暂时用这个方案解决了三个按键连击的问题。</p><h2 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h2><p>之所以存在连击问题，大概率是因为这一代的键盘中进灰了，影响了按压时候的判断。</p><p>苹果官方给出的<a href="https://support.apple.com/zh-cn/HT205662"><strong>解决方案</strong></a>，简单的说就是用压缩空气喷键盘。</p><h4 id="这么好的东西，哪里买呢"><a href="#这么好的东西，哪里买呢" class="headerlink" title="这么好的东西，哪里买呢"></a>这么好的东西，哪里买呢</h4><p><a href="https://m.tb.cn/h.VWQwj5B"><strong>压缩空气罐</strong></a>淘宝上很多，20多块钱，不用买很多，一罐就够用了。除了解决键盘，还可以清理相机之类的设备。</p><p>记得不要买成别的气罐了（比如带WD-40，那是用于润滑去锈的，不要买），要纯净空气那种。</p><h4 id="为什么不用吸尘器或者电吹风呢"><a href="#为什么不用吸尘器或者电吹风呢" class="headerlink" title="为什么不用吸尘器或者电吹风呢"></a>为什么不用吸尘器或者电吹风呢</h4><p>理论上来说，吸尘器和电吹风效果是类似的，但是不能保证你身边的空气足够干净，万一把新的灰尘吹进去了岂不是…</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>如果您的 MacBook（2015 年及更新机型）或 MacBook Pro（2016 年及更新机型）上的某个按键无反应，或某个按键按下时的触感与其他按键不同，请按照以下步骤用压缩空气来清洁键盘。</p><p>当您按照这些步骤进行操作时，应务必使用压缩空气自带的喷管来控制气流，在喷气时保持喷管末端距离键盘半英寸远。还要注意，喷气时不要颠倒瓶体。</p><ol><li>以 75 度角握持 Mac 笔记本电脑，这样电脑不会完全垂直。</li><li>按从左到右的方式将压缩空气喷向键盘，或仅喷向受影响的按键。</li><li>将 Mac 笔记本电脑向右侧旋转，然后再次按从左到右的方式喷向键盘。</li><li>这一次将 Mac 笔记本电脑向左侧旋转，然后重复以上操作。</li></ol><p>具体方法还是就要查看苹果的官方帮助文档。</p><h2 id="更新后续的使用情况"><a href="#更新后续的使用情况" class="headerlink" title="更新后续的使用情况"></a>更新后续的使用情况</h2><p>总的来说还是<strong>Unshaky</strong>还是很好用的，可以解决大部分的键盘连击问题，但是有时候键盘会有3次或者以上的连击，<strong>Unshaky</strong>没法很完美的解决这个问题。</p><p><img src="/memoirs/images/other_1.png"><br><img src="/memoirs/images/other_2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一段时间，我的笔记本（17年款 macbook pro 13寸）经常出现键盘连击问题。&lt;/p&gt;
&lt;p&gt;最大的表现是 e&amp;#x2F;n&amp;#x2F;i 这几个按键，按下的时候，会有概率的出现两个或三个。&lt;/p&gt;
&lt;h2 id=&quot;这不是个案&quot;&gt;&lt;a href=&quot;#这不是个案&quot;</summary>
      
    
    
    
    <category term="工作日常" scheme="https://aichiko0225.github.com/memoirs/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python-Flask基础篇(二)</title>
    <link href="https://aichiko0225.github.com/memoirs/20200321/python/Python-100-Flask-2/"/>
    <id>https://aichiko0225.github.com/memoirs/20200321/python/Python-100-Flask-2/</id>
    <published>2020-03-21T11:12:10.000Z</published>
    <updated>2024-12-13T03:03:29.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面介绍了Flask和HTTP的基础知识，下面会介绍Flask的基础用法</p><h2 id="第4章-表单"><a href="#第4章-表单" class="headerlink" title="第4章 表单"></a>第4章 表单</h2><p>在<code>Web</code>程序中，表单是和用户交互最常见的方式之一。用户注册、登录、撰写文章、编辑设置，无一不用到表单。不过，表单的处理却并不简单。<br>你不仅要创建表单，验证用户输入的内容，向用户显示错误提示，还要获取并保存数据。幸运的是，强大的<code>WTForms</code>可以帮我们解决这些问题。<br><code>WTForms</code>是一个使用<code>Python</code>编写的表单库，它使得表单的定 义、验证（服务器端）和处理变得非常轻松。这一章我们会介绍在Web 程序中处理表单的方法和技巧。</p><h3 id="使用Flask-WTF处理表单"><a href="#使用Flask-WTF处理表单" class="headerlink" title="使用Flask-WTF处理表单"></a>使用Flask-WTF处理表单</h3><p>扩展<code>Flask-WTF</code>集成了<code>WTForms</code>，使用它可以在<code>Flask</code>中更方便地使用<code>WTForms</code>。<code>Flask-WTF</code>将表单数据解析、<code>CSRF</code>保护、文件上传等功能与<code>Flask</code>集成，另外还附加了<code>reCAPTCHA</code>支持。</p><p>Flask-WTF默认为每个表单启用CSRF保护，它会为我们自动生成和 验证CSRF令牌。默认情况下，Flask-WTF使用程序密钥来对CSRF令牌 进行签名，所以我们需要为程序设置密钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="定义WTForms表单类"><a href="#定义WTForms表单类" class="headerlink" title="定义WTForms表单类"></a>定义WTForms表单类</h4><p>当使用WTForms创建表单时，表单由Python类表示，这个类继承从 WTForms导入的Form基类。一个表单由若干个输入字段组成，这些字 段分别用表单类的类属性来表示（字段即Field，你可以简单理解为表单 内的输入框、按钮等部件）。下面定义了一个LoginForm类，最终会生 成我们在前面定义的HTML表单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2.1 basic form example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username = StringField(<span class="string">&#x27;Username&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(<span class="string">&#x27;Password&#x27;</span>, validators=[DataRequired(), Length(<span class="number">8</span>, <span class="number">128</span>)])</span><br><span class="line">    remember = BooleanField(<span class="string">&#x27;Remember me&#x27;</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Log in&#x27;</span>)</span><br></pre></td></tr></table></figure><p>每个字段属性通过实例化WTForms提供的字段类表示。字段属性的名称将作为对应HTML<code>&lt;input&gt;</code>元素的name属性及id属性值。</p><p><img src="/memoirs/images/flask/w1.png" alt="常用的WTForms字段"></p><p><img src="/memoirs/images/flask/w2.png" alt="实例化字段类常用参数"></p><p><img src="/memoirs/images/flask/w3.png" alt="常用的WTForms验证器"></p><p>当使用<code>Flask-WTF</code>定义表单时，我们仍然使用<code>WTForms</code>提供的字段类和验证器，创建的方式也完全相同，只不过表单类要继承<code>Flask-WTF</code>提供的<code>FlaskForm</code>类。<code>FlaskForm</code>类继承自<code>Form</code>类，进行了一些设置，并附加了一些辅助方法，以便与<code>Flask</code>集成。</p><span id="more"></span><h4 id="输出HTML代码"><a href="#输出HTML代码" class="headerlink" title="输出HTML代码"></a>输出HTML代码</h4><p>以我们使用WTForms创建的LoginForm为例，实例化表单类，然后将实例属性转换成字符串或直接调用就可以获取表单字段对应的HTML代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form = LoginForm() &gt;&gt;&gt; form.username()</span></span><br><span class="line">u&#x27;&lt;input id=&quot;username&quot; name=&quot;username&quot; type=&quot;text&quot; value=&quot;&quot;&gt;&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form.submit()</span></span><br><span class="line">u&#x27;&lt;input id=&quot;submit&quot; name=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&#x27;</span><br></pre></td></tr></table></figure><p>在创建HTML表单时，我们经常会需要使用HTML<code>&lt;input&gt;</code>元素的其 他属性来对字段进行设置。比如，添加class属性设置对应的CSS类为字段添加样式；添加placeholder属性设置占位文本。默认情况下，WTForms输出的字段HTML代码只会包含id和name属性，属性值均为表单类中对应的字段属性名称。如果要添加额外的属性，通常有两种方法。</p><ol><li>使用render_kw属性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(<span class="string">&#x27;Username&#x27;</span>, render_kw=&#123;<span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;Your Username&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your Username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在调用字段时传入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form.username(style=<span class="string">&#x27;width: 200px;&#x27;</span>, class_=<span class="string">&#x27;bar&#x27;</span>)</span></span><br><span class="line">u&#x27;&lt;i nput class=&quot;bar&quot; id=&quot;username&quot; name=&quot;username&quot; style=&quot;width: 200px;&quot; type=&quot;text&quot;&gt;&#x27;</span><br></pre></td></tr></table></figure><h4 id="在模板中渲染表单"><a href="#在模板中渲染表单" class="headerlink" title="在模板中渲染表单"></a>在模板中渲染表单</h4><p>为了能够在模板中渲染表单，我们需要把表单类实例传入模板。首 先在视图函数里实例化表单类LoginForm，然后在render_template()函 数中使用关键字参数form将表单实例传入模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, redirect, url_for, flash</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic</span>():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 渲染CSRF令牌隐藏字段 --&gt;</span></span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125;&#123;&#123; form.username &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.password.label &#125;&#125;&#123;&#123; form.password &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.remember &#125;&#125;&#123;&#123; form.remember.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在上面的代码中，除了渲染各个字段的标签和字段本身，我们还调用了<code>form.csrf_token</code>属性渲染<code>Flask-WTF</code>为表单类自动创建的CSRF令牌字段。<code>form.csrf_token</code>字段包含了自动生成的CSRF令牌值，在提交表单后会自动被验证，为了确保表单通过验证，我们必须在表单中手动渲染这个字段。</p><h3 id="处理表单数据"><a href="#处理表单数据" class="headerlink" title="处理表单数据"></a>处理表单数据</h3><p>表单数据的处理涉及很多内容，除去表单提交不说，从获取数据到保存数据大致会经历以下步骤：</p><ol><li>解析请求，获取表单数据。</li><li>对数据进行必要的转换，比如将勾选框的值转换成Python的布尔值。</li><li>验证数据是否符合要求，同时验证CSRF令牌。</li><li>如果验证未通过则需要生成错误消息，并在模板中显示错误消息。</li><li>如果通过验证，就把数据保存到数据库或做进一步处理。</li></ol><p>除非是简单的程序，否则手动处理不太现实，使用Flask-WTF和 WTForms可以极大地简化这些步骤。</p><h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>在HTML中，当<code>&lt;form&gt;</code>标签声明的表单中类型为submit的提交字段被单击时，就会创建一个提交表单的HTTP请求，请求中包含表单各个字段的数据。<br>表单的提交行为主要由三个属性控制，如下图所示。</p><p><img src="/memoirs/images/flask/w4.png" alt="HTML表单中控制提交行为的属性"></p><p>form标签的action属性用来指定表单被提交的目标URL，默认为当前URL，也就是渲染该模板的路由所在的URL。如果你要把表单数据发送到其他URL，可以自定义这个属性值。</p><h4 id="验证表单数据"><a href="#验证表单数据" class="headerlink" title="验证表单数据"></a>验证表单数据</h4><p>表单数据的验证是Web表单中最重要的主题之一，这一节我们会学习如何使用Flask-WTF验证并获取表单数据。</p><ol><li><p>客户端验证和服务器端验证<br>表单的验证通常分为以下两种形式：</p><ul><li>客户端验证<br> 客户端验证（client side validation）是指在客户端（比如Web浏览器）对用户的输入值进行验证。比如，使用HTML5内置的验证属性即可实现基本的客户端验证（type、required、min、max、accept等）。比如，下面的username字段添加了required标志：</li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务器端验证</li></ul><p> 服务器端验证（server side validation）是指用户把输入的数据提交到服务器端，在服务器端对数据进行验证。如果验证出错，就在返回的响应中加入错误信息。用户修改后再次提交表单，直到通过验证。我们在Flask程序中使用WTForms实现的就是服务器端验证。</p></li><li><p>WTForms验证机制<br>WTForms验证表单字段的方式是在实例化表单类时传入表单数据，然后对表单实例调用validate()方法。这会逐个对字段调用字段实例化时定义的验证器，返回表示验证结果的布尔值。如果验证失败，就把错误消息存储到表单实例的errors属性对应的字典中，验证的过程如下所示：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from wtforms import Form, StringField, PasswordField, BooleanField</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from wtforms.validators import DataRequired, Length</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; class LoginForm(Form):</span></span><br><span class="line">... username = StringField(&#x27;Username&#x27;, validators=[DataRequired()])</span><br><span class="line">... password = PasswordField(&#x27;Password&#x27;, validators=[DataRequired() , Length(8, 128)])</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form = LoginForm(username=<span class="string">&#x27;&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form.data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表单数据字典</span></span><br><span class="line">&#123;&#x27;username&#x27;: &#x27;&#x27;, &#x27;password&#x27;: &#x27;123&#x27;&#125;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form.validate()</span></span><br><span class="line">False &gt;&gt;&gt; form.errors</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误消息字典</span></span><br><span class="line">&#123;&#x27;username&#x27;: [u&#x27;This field is required.&#x27;], &#x27;password&#x27;: [u&#x27;Field must be at least 6 characters long.&#x27;]&#125;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form2 = LoginForm(username=<span class="string">&#x27;greyli&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form2.data</span></span><br><span class="line">&#123;&#x27;username&#x27;: &#x27;greyli&#x27;, &#x27;password&#x27;: &#x27;123456&#x27;&#125;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form2.validate()</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; form2.errors &#123;&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在视图函数中验证表单<br>因为现在的basic_form视图同时接收两种类型的请求：GET请求和POST请求。所以我们要根据请求方法的不同执行不同的代码。具体来说：首先是实例化表单，如果是GET请求，那么就渲染模板；如果是 POST请求，就调用validate()方法验证表单数据。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic</span>():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        username = form.username.data</span><br><span class="line">        flash(<span class="string">&#x27;Welcome home, %s!&#x27;</span> % username)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><h4 id="在模板中渲染错误消息"><a href="#在模板中渲染错误消息" class="headerlink" title="在模板中渲染错误消息"></a>在模板中渲染错误消息</h4><p>如果form.validate_on_submit()返回False，那么说明验证没有通 过。对于验证未通过的字段，WTForms会把错误消息添加到表单类的 errors属性中，这是一个匹配作为表单字段的类属性到对应的错误消息 列表的字典。我们一般会直接通过字段名来获取对应字段的错误消息列表，即<code>&quot;form.字段名.errors&quot;</code>。比如，form.name.errors返回name字段的错 误消息列表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.username() &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% for message in form.username.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125; &#123;&#123; form.password.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.password &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% for message in form.password.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;&#123; form.remember &#125;&#125;&#123;&#123; form.remember.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第5章-数据库-重点"><a href="#第5章-数据库-重点" class="headerlink" title="第5章 数据库(重点)"></a>第5章 数据库(重点)</h2><p>数据库是大多数动态Web程序的基础设施，只要你想把数据存储下来，就离不开数据库。我们这里提及的数据库（Database）指的是由存储数据的单个或多个文件组成的集合，它是一种容器，可以类比为文件柜。而人们通常使用数据库来表示操作数据库的软件，这类管理数据库的软件被称为数据库管理系统（DBMS，Database Management System），常见的DBMS有MySQL、PostgreSQL、SQLite、MongoDB等。为了便于理解，我们可以把数据库看作一个大仓库，仓库里有一些负责搬运货物（数据）的机器人，而DBMS就是操控机器人搬运货物的程序。</p><h3 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h3><p>数据库一般分为两种，SQL（Structured Query Language，结构化查 询语言）数据库和NoSQL（Not Only SQL，泛指非关系型）数据库。</p><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p>SQL数据库指关系型数据库，常用的SQL DBMS主要包括SQL Server、Oracle、MySQL、PostgreSQL、SQLite等。关系型数据库使用表来定义数据对象，不同的表之间使用关系连接。</p><p>在SQL数据库中，每一行代表一条记录（record），每条记录又由不同的列（column）组成。在存储数据前，需要预先定义表模式（schema），以定义表的结构并限定列的输入数据类型。<br>为了避免在措辞上引起误解，我们先了解几个基本概念：</p><ul><li>表（table）：存储数据的特定结构。</li><li>模式（schema）：定义表的结构信息。</li><li>列&#x2F;字段（column&#x2F;field）：表中的列，存储一系列特定的数据，列组成表。</li><li>行&#x2F;记录（row&#x2F;record）：表中的行，代表一条记录。</li><li>标量（scalar）：指的是单一数据，与之相对的是集合 （collection）。</li></ul><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><p>NoSQL最初指No SQL或No Relational，现在NoSQL社区一般会解释为Not Only SQL。NoSQL数据库泛指不使用传统关系型数据库中的表格形式的数据库。近年来，NoSQL数据库越来越流行，被大量应用在实时（real-time）Web程序和大型程序中。与传统的SQL数据库相比，它在速度和可扩展性方面有很大的优势，除此之外还拥有无模式（schema- free）、分布式、水平伸缩（horizontally scalable）等特点。</p><p>最常用的两种NoSQL数据库如下所示：</p><ol><li>文档存储（document store）<br>文档存储是NoSQL数据库中最流行的种类，它可以作为主数据库使用。文档存储使用的文档类似SQL数据库中的记录，文档使用类JSON格式来表示数据。常见的文档存储DBMS有MongoDB、CouchDB等。</li><li>键值对存储（key-value store）<br>键值对存储在形态上类似Python中的字典，通过键来存取数据，在读取上非常快，通常用来存储临时内容，作为缓存使用。常见的键值对 DBMS有Redis、Riak等，其中Redis不仅可以管理键值对数据库，还可以作为缓存后端（cache backend）和消息代理（message broker）。<br>另外，还有列存储（column store，又被称为宽列式存储）、图存储（graph store）等类型的NoSQL数据库，这里不再展开介绍。</li></ol><h3 id="ORM魔法"><a href="#ORM魔法" class="headerlink" title="ORM魔法"></a>ORM魔法</h3><p>在Web应用里使用原生SQL语句操作数据库主要存在下面两类问题：</p><ul><li>手动编写SQL语句比较乏味，而且视图函数中加入太多SQL语句会降低代码的易读性。另外还会容易出现安全问题，比如SQL注入。</li><li>常见的开发模式是在开发时使用简单的SQLite，而在部署时切换 到MySQL等更健壮的DBMS。但是对于不同的DBMS，我们需要使用不同的Python接口库，这让DBMS的切换变得不太容易。</li></ul><p>尽管使用ORM可以避免SQL注入问题，但你仍然需要对传入的查询参数进行验证。<br>另外，在执行原生SQL语句时也要注意避免使用字符串 拼接或字符串格式化的方式传入参数。<br>使用ORM可以很大程度上解决这些问题。它会自动帮你处理查询 参数的转义，尽可能地避免SQL注入的发生。<br>另外，它为不同的DBMS提供统一的接口，让切换工作变得非常简单。<br>ORM扮演翻译的角色，能够将我们的Python语言转换为DBMS能够读懂的SQL指令，让我们能 够使用Python来操控数据库。</p><p>尽管ORM非常方便，但如果你对SQL相当熟悉，那么自己编写SQL代码可以获得更大的灵活性和性能优势。<br>就像是使用IDE一样，ORM对初学者来说非常方便，但进阶以后你也许会想要自己掌控一切。<br>ORM把底层的SQL数据实体转化成高层的Python对象，这样一来， 你甚至不需要了解SQL，只需要通过Python代码即可完成数据库操作，ORM主要实现了三层映射关系：</p><ul><li>表→Python类。</li><li>字段（列）→类属性。</li><li>记录（行）→类实例。</li></ul><p>比如，我们要创建一个contacts表来存储留言，其中包含用户名称和电话号码两个字段。<br>在SQL中，下面的代码用来创建这个表，要向表中插入一条记录，需要使用下面的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> contacts(</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    phone_number <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 插入一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> contacts(name, phone_number) <span class="keyword">VALUES</span>(<span class="string">&#x27;Grey Li&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果使用ORM，我们可以使用类似下面的Python类来定义这个表：<br>使用ORM则只需要创建一个Contact类的实例，传入对应的参数表示各个列的数据即可。<br>下面的代码和使用上面的SQL语句效果相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo_orm <span class="keyword">import</span> Model, Column, String</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Contact</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;contacts&#x27;</span></span><br><span class="line">    name = Column(String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    phone_number = Column(String(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一条记录</span></span><br><span class="line">contact = Contact(name=<span class="string">&#x27;Grey Li&#x27;</span>, phone_number=<span class="string">&#x27;12345678&#x27;</span>)</span><br></pre></td></tr></table></figure><p>除了便于使用，ORM还有下面这些优点：</p><ul><li>灵活性好。你既能使用高层对象来操作数据库，又支持执行原生 SQL语句。</li><li>提升效率。从高层对象转换成原生SQL会牺牲一些性能，但这微不足道的性能牺牲换取的是巨大的效率提升。</li><li>可移植性好。ORM通常支持多种DBMS，包括MySQL、PostgreSQL、Oracle、SQLite等。你可以随意更换DBMS，只需要稍微 改动少量配置。</li></ul><p>使用Python实现的ORM有SQLAlchemy、Peewee、PonyORM等。其中SQLAlchemy是Python社区使用最广泛的ORM之一，我们将介绍如何在Flask程序中使用它。SQL-Alchemy，直译过来就是SQL炼金术，下一节我们会见识到SQLAlchemy的神奇力量。</p><h3 id="使用Flask-SQLAlchemy管理数据库"><a href="#使用Flask-SQLAlchemy管理数据库" class="headerlink" title="使用Flask-SQLAlchemy管理数据库"></a>使用Flask-SQLAlchemy管理数据库</h3><p>扩展Flask-SQLAlchemy集成了SQLAlchemy，它简化了连接数据库服务器、管理数据库操作会话等各类工作，让Flask中的数据处理体验变得更加轻松。<br>下面在示例程序中实例化Flask-SQLAlchemy提供的SQLAlchemy类，传入程序实例app，以完成扩展的初始化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.jinja_env.trim_blocks = <span class="literal">True</span></span><br><span class="line">app.jinja_env.lstrip_blocks = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>, <span class="string">&#x27;secret string&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = os.getenv(</span><br><span class="line">    <span class="string">&#x27;DATABASE_URL&#x27;</span>, <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(app.root_path, <span class="string">&#x27;data.db&#x27;</span>))</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app=app)</span><br></pre></td></tr></table></figure><h4 id="连接数据库服务器"><a href="#连接数据库服务器" class="headerlink" title="连接数据库服务器"></a>连接数据库服务器</h4><p>DBMS通常会提供数据库服务器运行在操作系统中。要连接数据库服务器，首先要为我们的程序指定数据库URI（Uniform Resource<br>Identifier，统一资源标识符）。数据库URI是一串包含各种属性的字符串，其中包含了各种用于连接数据库的信息。</p><p><img src="/memoirs/images/flask/w5.png" alt="常用的数据库URI格式"></p><p>在<code>Flask-SQLAlchemy</code>中，数据库的URI通过配置变量<code>SQLALCHEMY_DATABASE_URI</code>设置，默认为SQLite内存型数据库<code>(sqlite:///:memory:)</code>。<code>SQLite</code>是基于文件的<code>DBMS</code>，不需要设置数据库服务器，只需要指定数据库文件的绝对路径。</p><p>在生产环境下更换到其他类型的<code>DBMS</code>时，数据库URL会包含敏感 信息，所以这里优先从环境变量<code>DATABASE_URL</code>获取(注意这里为了便于理解使用了URL，而不是URI)。</p><p>安装并初始化<code>Flask-SQLAlchemy</code>后，启动程序时会看到命令行下有一行警告信息。这是因为<code>Flask-SQLAlchemy</code>建议你设置 <code>SQLALCHEMY_TRACK_MODIFICATIONS</code>配置变量，这个配置变量决定是否追踪对象的修改，这用于<code>Flask-SQLAlchemy</code>的事件通知系统。这 个配置键的默认值为None，如果没有特殊需要，我们可以把它设为False来关闭警告信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="定义数据库模型"><a href="#定义数据库模型" class="headerlink" title="定义数据库模型"></a>定义数据库模型</h4><p>用来映射到数据库表的Python类通常被称为数据库模型<br>(model)，一个数据库模型类对应数据库中的一个表。定义模型即使用Python类定义表模式，并声明映射关系。所有的模型类都需要继承<code>Flask-SQLAlchemy</code>提供的<code>db.Model</code>基类。本章的示例程序是一个笔记程序，笔记保存到数据库中，你可以通过程序查询、添加、更新和删除笔记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Note</span>(db.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建一个数据库Model</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br></pre></td></tr></table></figure><p>在上面的模型类中，表的字段（列）由db.Column类的实例表示，字段的类型通过Column类构造方法的第一个参数传入。在这个模型中，我们创建了一个类型为db.Integer的id字段和类型为db.Text的body列，分别存储整型和文本。</p><p><img src="/memoirs/images/flask/w6.png" alt="SQLAlchemy常用的字段类型"></p><p>字段类型一般直接声明即可，如果需要传入参数，你也可以添加括号。对于类似String的字符串列，有些数据库会要求限定长度，因此最 好为其指定长度。虽然使用Text类型可以存储相对灵活的变长文本，但从性能上考虑，我们仅在必须的情况下使用Text类型，比如用户发表的文章和评论等不限长度的内容。</p><p>一般情况下，字段的长度是由程序设计者自定的。尽管如此，也有一些既定的约束标准，比如姓名（英语）的长度一般不超过70个字符，中文名一般不超过20个字符，电子邮件地址的长度不超过254个字符，虽然各主流浏览器支持长达2048个字符的URL，但在网站中用户资料设置的限度一般为255。尽管如此，对于超过一定长度的Email和URL，比如20个字符，会在显示时添加省略号的形式。显示的用户名（username）允许重复，通常要短一些，以不超过36个字符为佳。当然，在程序中，你可以根据需要来自由设定这些限制值。</p><p><img src="/memoirs/images/flask/w7.png" alt="常用的SQLAlchemy字段参数"></p><h4 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h4><p>如果把数据库（文件）看作一个仓库，为了方便取用，我们需要把货物按照类型分别放置在不同货架上，这些货架就是数据库中的表。创建模型类后，我们需要手动创建数据库和对应的表，也就是我们常说的建库和建表。这通过对我们的db对象调用create_all()方法实现。</p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>现在我们创建了模型，也生成了数据库和表，是时候来学习常用的数据库操作了。数据库操作主要是<code>CRUD</code>，即Create（创建）、Read（读取&#x2F;查询）、Update（更新）和Delete（删除）。<br><code>SQLAlchemy</code>使用数据库会话来管理数据库操作，这里的数据库会话也称为事务(<code>transaction</code>)。<code>Flask-SQLAlchemy</code>自动帮我们创建会话，可以通过<code>db.session</code>属性获取。<br>数据库中的会话代表一个临时存储区，你对数据库做出的改动都会存放在这里。你可以调用<code>add()</code>方法将新创建的对象添加到数据库会话中，或是对会话中的对象进行更新。只有当你对数据库会话对象调用<code>commit()</code>方法时，改动才被提交到数据库，这确保了数据提交的一致性。另外，数据库会话也支持回滚操作。当你对会话调用<code>rollback()</code>方法时，添加到会话中且未提交的改动都将被撤销。</p><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><p>这一节我们会在<code>Python Shell</code>中演示<code>CRUD</code>操作。默认情况下，<code>Flask-SQLAlchemy</code>(&gt;&#x3D;2.3.0版本)会自动为模型类生成一个<code>__repr__()</code>方法。当在<code>Python Shell</code>中调用模型的对象时，<code>__repr__()</code>方法会返回一条类似“&lt;模型类名主键值&gt;”的字符串，比如<code>&lt;Note&gt;</code>。</p><ol><li><p>Create<br>添加一条新记录到数据库主要分为三步：</p><ul><li>创建Python对象（实例化模型类）作为一条记录。</li><li>添加新创建的记录到数据库会话。</li><li>提交数据库会话。</li></ul></li><li><p>Read<br>我们已经知道了如何向数据库里添加记录，那么如何从数据库里取回数据呢？使用模型类提供的query属性附加调用各种过滤方法及查询方法可以完成这个任务。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;模型类&gt;.query.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure><p>从某个模型类出发，通过在query属性对应的Query对象上附加的过滤方法和查询函数对模型类对应的表中的记录进行各种筛选和调整，最终返回包含对应数据库记录数据的模型类实例，对返回的实例调用属性即可获取对应的字段数据。</p><p><img src="/memoirs/images/flask/w8.png" alt="常用的SQLAlchemy查询方法"></p><p>精确的查询，比如获取指定字段值的记录。对模型类的query属性存储的Query对象调用过滤方法将返回一个更精确的Query对象(后面我们简称为查询对象)。因为每个过滤方法都会返回新的查询对象，所以过滤器可以叠加使用。在查询对象上调用前面介绍的查询方法，即可获得一个包含过滤后的记录的列表。</p><p><img src="/memoirs/images/flask/w9.png" alt="常用的SQLAlchemy过滤方法"></p><ol start="3"><li><p>Update<br>更新一条记录非常简单，直接赋值给模型类的字段属性就可以改变 字段值，然后调用commit()方法提交会话即可。<br>只有要插入新的记录或要将现有的记录添加到会话中时才需要使用 add()方法，单纯要更新现有的记录时只需要直接为属性赋新值，然 后提交会话。</p></li><li><p>Delete<br>删除记录和添加记录很相似，不过要把add()方法换成delete() 方法，最后都需要调用commit()方法提交修改。</p></li></ol><h4 id="在视图函数里操作数据库"><a href="#在视图函数里操作数据库" class="headerlink" title="在视图函数里操作数据库"></a>在视图函数里操作数据库</h4><p>在视图函数里操作数据库的方式和我们在<code>Python Shell中</code>的练习大致相同，只不过需要一些额外的工作。比如把查询结果作为参数传入模板渲染出来，或是获取表单的字段值作为提交到数据库的数据。在这一节，我们将把上一节学习的所有数据库操作知识运用到一个简单的笔记程序中。这个程序可以让你创建、编辑和删除笔记，并在主页列出所有保存后的笔记。</p><ol><li>Create</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_note</span>():</span><br><span class="line">    form = NewNoteForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        body = form.body.data</span><br><span class="line">        note = Note(body=body)</span><br><span class="line">        db.session.add(note)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;Your note is saved.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;new_note.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><ol start="2"><li>Read</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/note/all&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    form = DeleteNoteForm()</span><br><span class="line">    notes = Note.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, notes=notes, form=form)</span><br></pre></td></tr></table></figure><ol start="3"><li>Update</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/edit/&lt;int:note_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_note</span>(<span class="params">note_id</span>):</span><br><span class="line">    form = EditNoteForm()</span><br><span class="line">    note = Note.query.get(note_id)</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        note.body = form.body.data</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;Your note is updated.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    form.body.data = note.body  <span class="comment"># preset form input&#x27;s value</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;edit_note.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><ol start="4"><li>Delete</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete/&lt;int:note_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_note</span>(<span class="params">note_id</span>):</span><br><span class="line">    form = DeleteNoteForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        note = Note.query.get(note_id)</span><br><span class="line">        db.session.delete(note)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;Your note is deleted.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h3><p>在关系型数据库中，我们可以通过关系让不同表之间的字段建立联系。一般来说，定义关系需要两步，分别是创建外键和定义关系属性。在更复杂的多对多关系中，我们还需要定义关联表来管理关系。这一节我们会学习如何使用<code>SQLAlchemy</code>在模型之间建立几种基础的关系模 式。</p><h4 id="配置Python-Shell上下文"><a href="#配置Python-Shell上下文" class="headerlink" title="配置Python Shell上下文"></a>配置Python Shell上下文</h4><p>在上面的许多操作中，每一次使用<code>flask shell</code>命令启动<code>Python Shell</code>后都要从app模块里导入db对象和相应的模型类。为什么不把它们自动 集成到<code>Python Shell</code>上下文里呢？就像Flask内置的app对象一样。这当然可以实现！我们可以使用<code>app.shell_context_processor</code>装饰器注册一个shell上下文处理函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handlers</span></span><br><span class="line"><span class="meta">@app.shell_context_processor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_shell_context</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(db=db, Note=Note)</span><br></pre></td></tr></table></figure><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>我们将以作者和文章来演示一对多关系：一个作者可以写作多篇文章。</p><p><img src="/memoirs/images/flask/w10.png" alt="一对多示意图"></p><p>Author类用来表示作者，Article类用来表示文章</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    phone = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    articles = db.relationship(<span class="string">&#x27;Article&#x27;</span>)  <span class="comment"># collection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;author.id&#x27;</span>))</span><br></pre></td></tr></table></figure><p>我们将在这两个模型之间建立一个简单的一对多关系，建立这个一对多关系的目的是在表示作者的Author类中添加一个关系属性articles，<br>作为集合（collection）属性，当我们对特定的Author对象调用articles属性会返回所有相关的Article对象。我们会在下面介绍如何一步步定义这个一对多关系。</p><ol><li><p>定义外键<br>定义关系的第一步是创建外键。外键是（foreign key）用来在A表存储B表的主键值以便和B表建立联系的关系字段。因为外键只能存储单一数据（标量），所以外键总是在“多”这一侧定义，多篇文章属于同一个作者，所以我们需要为每篇文章添加外键存储作者的主键值以指向对应的作者。在Article模型中，我们定义一个author_id字段作为外键.</p></li><li><p>定义关系属性<br>定义关系的第二步是使用关系函数定义关系属性。关系属性在关系 的出发侧定义，即一对多关系的“一”这一侧。一个作者拥有多篇文章， 在Author模型中，我们定义了一个articles属性来表示对应的多篇文章</p></li><li><p>建立关系<br>建立关系有两种方式，第一种方式是为外键字段赋值，另一种方式是通过操作关系属性，将关系属性赋给实际的对象即可建立关系。</p></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.外键字段赋值</span></span><br><span class="line">spam.author_id = <span class="number">1</span></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.关系属性赋给实际的对象</span></span><br><span class="line">foo.articles.append(spam)</span><br><span class="line">foo.articles.append(ham)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><img src="/memoirs/images/flask/w11.png" alt="常用的SQLAlchemy关系函数参数"></p><p><img src="/memoirs/images/flask/w12.png" alt="常用的SQLAlchemy关系记录加载方式（lazy参数可选值）"></p><ol start="4"><li>建立双向关系<br>我们在Author类中定义了集合关系属性articles，用来获取某个作者 拥有的多篇文章记录。在某些情况下，你也许希望能在Article类中定义 一个类似的author关系属性，当被调用时返回对应的作者记录，这类返 回单个值的关系属性被称为标量关系属性。而这种两侧都添加关系属性 获取对方记录的关系我们称之为双向关系（bidirectional relationship）。</li></ol><p>双向关系并不是必须的，但在某些情况下会非常方便。双向关系的 建立很简单，通过在关系的另一侧也创建一个relationship()函数，我 们就可以在两个表之间建立双向关系。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one to many + bidirectional relationship</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Writer</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    books = db.relationship(<span class="string">&#x27;Book&#x27;</span>, back_populates=<span class="string">&#x27;writer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line">    writer_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;writer.id&#x27;</span>))</span><br><span class="line">    writer = db.relationship(<span class="string">&#x27;Writer&#x27;</span>, back_populates=<span class="string">&#x27;books&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>使用backref简化关系定义<br>在介绍关系函数的参数时，我们曾提到过，使用关系函数中的 backref参数可以简化双向关系的定义。以一对多关系为例，backref参数<br>用来自动为关系另一侧添加关系属性，作为反向引用（back reference），赋予的值会作为关系另一侧的关系属性名称。比如，我们 在Author一侧的关系函数中将backref参数设为author，SQLAlchemy会自 动为Article类添加一个author属性。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尽管使用backref非常方便，但通常来说“显式好过隐式”，所以我们 应该尽量使用back_populates定义双向关系。</span></span><br><span class="line"><span class="comment"># 为了便于理解，将使用back_populates来建立双向关系。</span></span><br><span class="line"><span class="comment"># one to many + bidirectional relationship + use backref to declare bidirectional relationship</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singer</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    songs = db.relationship(<span class="string">&#x27;Song&#x27;</span>, backref=<span class="string">&#x27;singer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Song</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line">    singer_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;singer.id&#x27;</span>))</span><br></pre></td></tr></table></figure><p>在定义集合属性songs的关系函数中，我们将backref参数设为 singer，这会同时在Song类中添加了一个singer标量属性。这时我们仅需 要定义一个关系函数，虽然singer是一个“看不见的关系属性”，但在使用上和定义两个关系函数并使用back_populates参数的效果完全相同。需要注意的是，使用backref允许我们仅在关系一侧定义另一侧的关 系属性，但是在某些情况下，我们希望可以对在关系另一侧的关系属性进行设置，这时就需要使用backref()函数。backref()函数接收第一 个参数作为在关系另一侧添加的关系属性名，其他关键字参数会作为关 系另一侧关系函数的参数传入。比如，我们要在关系另一侧“看不见的 relationship()函数”中将uselist参数设为False。</p><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><p>一对多关系反过来就是多对一关系，这两种关系模式分别从不同的视角出发。一个作者拥有多篇文章，反过来就是多篇文章属于同一个作者。为了便于区分，我们使用居民和城市来演示多对一关系：多个居民居住在同一个城市。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># many to one</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Citizen</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    city_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;city.id&#x27;</span>))</span><br><span class="line">    city = db.relationship(<span class="string">&#x27;City&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这时定义的city关系属性是一个标量属性（返回单一数据）。当Citizen.city被调用时，SQLAlchemy会根据外键字段city_id存储的值查找对应的City对象并返回，即居民记录对应的城市记录。<br>当建立双向关系时，如果不使用backref，那么一对多和多对一关系模式在定义上完全相同，这时可以将一对多和多对一视为同一种关系模式。在后面我们通常都会为一对多或多对一建立双向关系，这时将弱化这两种关系的区别，一律称为一对多关系。</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>我们将使用国家和首都来演示一对一关系：每个国家只有一个首 都；反过来说，一个城市也只能作为一个国家的首都。</p><p>Country类表示国家，Capital类表示首都。建立一对一关系后，我们将在Country类中创建一个标量关系属性capital，调用它会获取单个Capital对象；我们还将在Capital类中创建一个标量关系属性country，调用它会获取单个的Country对象。</p><p>一对一关系实际上是通过建立双向关系的一对多关系的基础上转化而来。我们要确保关系两侧的关系属性都是标量属性，都只返回单个值，所以要在定义集合属性的关系函数中将uselist参数设为False，这时一对多关系将被转换为一对一关系。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one to one</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    capital = db.relationship(<span class="string">&#x27;Capital&#x27;</span>, uselist=<span class="literal">False</span>)  <span class="comment"># collection -&gt; scalar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Capital</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    country_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;country.id&#x27;</span>))</span><br><span class="line">    country = db.relationship(<span class="string">&#x27;Country&#x27;</span>)  <span class="comment"># scalar</span></span><br></pre></td></tr></table></figure><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>我们将使用学生和老师来演示多对多关系：每个学生有多个老师，而每个老师有多个学生。</p><p>Student类表示学生，Teacher类表示老师。在这两个模型之间建立多对多关系后，我们需要在Student类中添加一个集合关系属性teachers，调用它可以获取某个学生的多个老师，而不同的学生可以和同一个老师建立关系。</p><p>在一对多关系中，我们可以在“多”这一侧添加外键指向“一”这一 侧，外键只能存储一个记录，但是在多对多关系中，每一个记录都可以与关系另一侧的多个记录建立关系，关系两侧的模型都需要存储一组外键。在SQLAlchemy中，要想表示多对多关系，除了关系两侧的模型外，我们还需要创建一个关联表（association table）。关联表不存储数据，只用来存储关系两侧模型的外键对应关系。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    grade = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    teachers = db.relationship(<span class="string">&#x27;Teacher&#x27;</span>,</span><br><span class="line">                               secondary=association_table,</span><br><span class="line">                               back_populates=<span class="string">&#x27;students&#x27;</span>)  <span class="comment"># collection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    office = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    students = db.relationship(<span class="string">&#x27;Student&#x27;</span>,</span><br><span class="line">                               secondary=association_table,</span><br><span class="line">                               back_populates=<span class="string">&#x27;teachers&#x27;</span>)  <span class="comment"># collection</span></span><br></pre></td></tr></table></figure><p>关联表使用db.Table类定义，传入的第一个参数是关联表的名称。我们在关联表中定义了两个外键字段：teacher_id字段存储Teacher类的主键，student_id存储Student类的主键。借助关联表这个中间人存储的外键对，我们可以把多对多关系分化成两个一对多关系，如图所示。</p><p><img src="/memoirs/images/flask/w13.png" alt="关联表示意图"></p><h3 id="更新数据库表"><a href="#更新数据库表" class="headerlink" title="更新数据库表"></a>更新数据库表</h3><p>模型类（表）不是一成不变的，当你添加了新的模型类，或是在模 型类中添加了新的字段，甚至是修改了字段的名称或类型，都需要更新 表。在前面我们把数据库表类比成盛放货物的货架，这些货架是固定生 成的。当我们在操控程序（DBMS&#x2F;ORM）上变更了货架的结构时，仓 库的货架也要根据变化相应进行调整。而且，当货架的结构产生变动 时，我们还需要考虑如何处理货架上的货物（数据）。</p><h4 id="重新生成表"><a href="#重新生成表" class="headerlink" title="重新生成表"></a>重新生成表</h4><p>重新调用create_all()方法并不会起到更新表或重新创建表的作 用。如果你并不在意表中的数据，最简单的方法是使用drop_all()方法删除表以及其中的数据，然后再使用create_all()方法重新创建</p><h4 id="使用Flask-Migrate迁移数据库"><a href="#使用Flask-Migrate迁移数据库" class="headerlink" title="使用Flask-Migrate迁移数据库"></a>使用Flask-Migrate迁移数据库</h4><p>在开发时，以删除表再重建的方式更新数据库简单直接，但明显的缺陷是会丢掉数据库中的所有数据。在生产环境下，你绝对不会想让数 据库里的数据都被删除掉，这时你需要使用数据库迁移工具来完成这个工作。<br>SQLAlchemy的开发者Michael Bayer写了一个数据库迁移工具 ——Alembic来帮助我们实现数据库的迁移，数据库迁移工具可以在不破坏数据的情况下更新数据库表的结构。蒸馏器（Alembic）是炼金术士最重要的工具，要学习SQL炼金术（SQLAlchemy），我们当然要掌 握蒸馏器的使用。</p><p>我们实例化Flask-Migrate提供的Migrate类，进行初始化操作<br>实例化Migrate类时，除了传入程序实例app，还需要传入实例化 Flask-SQLAlchemy提供的SQLAlchemy类创建的db对象作为第二个参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask <span class="keyword">from</span> flask_sqlalchemy</span><br><span class="line"><span class="keyword">import</span> SQLAlchemy <span class="keyword">from</span> flask_migrate</span><br><span class="line"><span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">...</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"><span class="comment"># 在db对象创建后调用</span></span><br></pre></td></tr></table></figure><ol><li>创建迁移环境<br>在开始迁移数据之前，需要先使用下面的命令创建一个迁移环境<br>迁移环境只需要创建一次。这会在你的项目根目录下创建一个migrations文件夹，其中包含了自动生成的配置文件和迁移版本文件夹。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db init</span><br></pre></td></tr></table></figure><ol start="2"><li>生成迁移脚本</li></ol><p>使用migrate子命令可以自动生成迁移脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flask db migrate -m <span class="string">&quot;add note timestamp&quot;</span></span></span><br><span class="line">...</span><br><span class="line">INFO [alembic.autogenerate.compare] Detected added column &#x27;message.timestamp Generating /Path/to/your/database/migrations/versions/c52a02014635_add note_timestamp.py</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这条命令可以简单理解为在flask里对数据库（db）进行迁移 （migrate）。-m选项用来添加迁移备注信息。从上面的输出信息我们可以看到，Alembic检测出了模型的变化：表note新添加了一个timestamp列，并且相应生成了一个迁移脚本 c52a02014635_add_note_timestamp.py，</p><ol start="3"><li>更新数据库</li></ol><p>生成了迁移脚本后，使用upgrade子命令即可更新数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flask db upgrade</span></span><br><span class="line">...</span><br><span class="line">INFO [alembic.runtime.migration] Running upgrade -&gt; c52a02014635, add note timestamp</span><br></pre></td></tr></table></figure><p>如果还没有创建数据库和表，这个命令会自动创建；如果已经创建，则会在不损坏数据的前提下执行更新。</p><h4 id="开发时是否需要迁移"><a href="#开发时是否需要迁移" class="headerlink" title="开发时是否需要迁移"></a>开发时是否需要迁移</h4><p>在生产环境下，当对数据库结构进行修改后，进行数据库迁移是必要的。因为你不想损坏任何数据，毕竟数据是无价的。在生成自动迁移脚本后，执行更新之前，对迁移脚本进行检查，甚至是使用备份的数据库进行迁移测试，都是有必要的。</p><p>而在开发环境中，你可以按需要选择是否进行数据迁移。对于大多数程序来说，我们可以在开发时使用虚拟数据生成工具来生成虚拟数据，从而避免手动创建记录进行测试。这样每次更改表结构时，可以直接清除后重新生成，然后生成测试数据，这要比执行一次迁移简单很多（在后面我们甚至会学习通过一条命令完成所有工作），除非生成虚拟数据耗费的时间过长。</p><p>另外，在本地开发时通常使用SQLite作为数据库引擎。SQLite不支持ALTER语句，而这正是迁移工具依赖的工作机制。也就是说，当SQLite数据库表的字段删除或修改后，我们没法直接使用迁移工具进行更新，你需要手动添加迁移代码来进行迁移。在开发中，修改和删除列是很常见的行为，手动操作迁移会花费太多的时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来还有一章讲邮件的，但是邮件这部分太简单就不放在这里了。<br>基础篇（二）主要是讲数据库的知识，简单了解在<code>Flask</code>应用中使用数据库的方法，但数据库的内容还有很多，这里只是一个简单的介绍。<br>如果你想了解更多具体细节，<a href="http://docs.sqlalchemy.org/en/latest/orm/tutorial.html">SQLAlchemy提供的入门教程</a>是个起步的好地方。<br>另外，如果还不熟悉<code>SQL</code>，那么有必要去学习一下，掌握<code>SQL</code>可以让你更高效地使用<code>ORM</code>。</p><p>这里也没有介绍在<code>Flask</code>中使用文档型<code>NoSQL</code>数据库的过程。<br>以流行的<a href="https://www.mongodb.com/">MongoDB</a>为例，通过使用ODM（Object Document Mapper，对象文档映射），比如<a href="http://mongoengine.org/">MongoEngine</a>，或是对应的扩展<a href="https://github.com/MongoEngine/flask-mongoengine">Flask- MongoEngine</a>，其操作数据库的方式和使用本章要介绍的<code>SQLAlchemy</code>基本相同。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面介绍了Flask和HTTP的基础知识，下面会介绍Flask的基础用法&lt;/p&gt;
&lt;h2 id=&quot;第4章-表单&quot;&gt;&lt;a href=&quot;#第4章-表单&quot; class=&quot;headerlink&quot; title=&quot;第4章 表单&quot;&gt;&lt;/a&gt;第4章 表单&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;Web&lt;/code&gt;程序中，表单是和用户交互最常见的方式之一。用户注册、登录、撰写文章、编辑设置，无一不用到表单。不过，表单的处理却并不简单。&lt;br&gt;你不仅要创建表单，验证用户输入的内容，向用户显示错误提示，还要获取并保存数据。幸运的是，强大的&lt;code&gt;WTForms&lt;/code&gt;可以帮我们解决这些问题。&lt;br&gt;&lt;code&gt;WTForms&lt;/code&gt;是一个使用&lt;code&gt;Python&lt;/code&gt;编写的表单库，它使得表单的定 义、验证（服务器端）和处理变得非常轻松。这一章我们会介绍在Web 程序中处理表单的方法和技巧。&lt;/p&gt;
&lt;h3 id=&quot;使用Flask-WTF处理表单&quot;&gt;&lt;a href=&quot;#使用Flask-WTF处理表单&quot; class=&quot;headerlink&quot; title=&quot;使用Flask-WTF处理表单&quot;&gt;&lt;/a&gt;使用Flask-WTF处理表单&lt;/h3&gt;&lt;p&gt;扩展&lt;code&gt;Flask-WTF&lt;/code&gt;集成了&lt;code&gt;WTForms&lt;/code&gt;，使用它可以在&lt;code&gt;Flask&lt;/code&gt;中更方便地使用&lt;code&gt;WTForms&lt;/code&gt;。&lt;code&gt;Flask-WTF&lt;/code&gt;将表单数据解析、&lt;code&gt;CSRF&lt;/code&gt;保护、文件上传等功能与&lt;code&gt;Flask&lt;/code&gt;集成，另外还附加了&lt;code&gt;reCAPTCHA&lt;/code&gt;支持。&lt;/p&gt;
&lt;p&gt;Flask-WTF默认为每个表单启用CSRF保护，它会为我们自动生成和 验证CSRF令牌。默认情况下，Flask-WTF使用程序密钥来对CSRF令牌 进行签名，所以我们需要为程序设置密钥：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.secret_key = &lt;span class=&quot;string&quot;&gt;&amp;#x27;secret string&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;定义WTForms表单类&quot;&gt;&lt;a href=&quot;#定义WTForms表单类&quot; class=&quot;headerlink&quot; title=&quot;定义WTForms表单类&quot;&gt;&lt;/a&gt;定义WTForms表单类&lt;/h4&gt;&lt;p&gt;当使用WTForms创建表单时，表单由Python类表示，这个类继承从 WTForms导入的Form基类。一个表单由若干个输入字段组成，这些字 段分别用表单类的类属性来表示（字段即Field，你可以简单理解为表单 内的输入框、按钮等部件）。下面定义了一个LoginForm类，最终会生 成我们在前面定义的HTML表单：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wtforms &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Form, StringField, PasswordField, BooleanField, SubmitField&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wtforms.validators &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; DataRequired, Length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4.2.1 basic form example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;LoginForm&lt;/span&gt;(&lt;span class=&quot;title class_ inherited__&quot;&gt;FlaskForm&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = StringField(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Username&amp;#x27;&lt;/span&gt;, validators=[DataRequired()])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password = PasswordField(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Password&amp;#x27;&lt;/span&gt;, validators=[DataRequired(), Length(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remember = BooleanField(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Remember me&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    submit = SubmitField(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Log in&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每个字段属性通过实例化WTForms提供的字段类表示。字段属性的名称将作为对应HTML&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;元素的name属性及id属性值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/memoirs/images/flask/w1.png&quot; alt=&quot;常用的WTForms字段&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/memoirs/images/flask/w2.png&quot; alt=&quot;实例化字段类常用参数&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/memoirs/images/flask/w3.png&quot; alt=&quot;常用的WTForms验证器&quot;&gt;&lt;/p&gt;
&lt;p&gt;当使用&lt;code&gt;Flask-WTF&lt;/code&gt;定义表单时，我们仍然使用&lt;code&gt;WTForms&lt;/code&gt;提供的字段类和验证器，创建的方式也完全相同，只不过表单类要继承&lt;code&gt;Flask-WTF&lt;/code&gt;提供的&lt;code&gt;FlaskForm&lt;/code&gt;类。&lt;code&gt;FlaskForm&lt;/code&gt;类继承自&lt;code&gt;Form&lt;/code&gt;类，进行了一些设置，并附加了一些辅助方法，以便与&lt;code&gt;Flask&lt;/code&gt;集成。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Flask" scheme="https://aichiko0225.github.com/memoirs/tags/Flask/"/>
    
    <category term="Python" scheme="https://aichiko0225.github.com/memoirs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-Flask基础篇(一)</title>
    <link href="https://aichiko0225.github.com/memoirs/20200316/python/Python-100-Flask-1/"/>
    <id>https://aichiko0225.github.com/memoirs/20200316/python/Python-100-Flask-1/</id>
    <published>2020-03-16T13:20:00.000Z</published>
    <updated>2024-12-13T03:03:25.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1章-初识Flask"><a href="#第1章-初识Flask" class="headerlink" title="第1章 初识Flask"></a>第1章 初识Flask</h2><h3 id="Flask介绍"><a href="#Flask介绍" class="headerlink" title="Flask介绍"></a>Flask介绍</h3><p>搭建开发环境，编写一个最小的Flask程序并运行它，了解 Flask基本知识</p><p>这一切开始于2010年4月1日，Armin Ronacher在网上发布了一篇关 于“下一代Python微框架”的介绍文章，文章里称这个Denied框架不依赖 Python标准库，只需要复制一份deny.py放到你的项目文件夹就可以开始 编程。伴随着一本正经的介绍、名人推荐语、示例代码和演示视频，这 个“虚假”的项目让不少人都信以为真。</p><p>5天后， <a href="http://flask.pocoo.org/">Flask</a>就从这么一个愚人节玩笑诞生了。</p><span id="more"></span><p>Flask是使用Python编写的Web微框架。Web框架可以让我们不用关 心底层的请求响应处理，更方便高效地编写Web程序。因为Flask核心简 单且易于扩展，所以被称作微框架（micro framework）。Flask有两个主 要依赖，一个是<a href="http://werkzeug.pocoo.org/">WSGI（Web Server Gateway Interface，Web服务器网关 接口）工具集——Werkzeug</a>，另一个是 <a href="http://jinja.pocoo.org/">Jinja2模板引擎</a>。Flask只保留了Web开发的核 心功能，其他的功能都由外部扩展来实现，比如数据库集成、表单认 证、文件上传等。如果没有合适的扩展，你甚至可以自己动手开发。 Flask不会替你做决定，也不会限制你的选择。总之，Flask可以变成任 何你想要的东西，一切都由你做主。</p><p>Flask（瓶子，烧瓶）的命名据说是对另一个Python Web框架—— Bottle的双关语&#x2F;调侃，即另一种容器（另一个Python Web框架）。 Werkzeug是德语单词“工具（tool）”，而Jinja指日本神社，因为神社 （庙）的英文temple与template（模板）相近而得名。</p><p>WSGI（Web Server Gateway Interface）是Python中用来规定Web服 务器如何与Python Web程序进行沟通的标准，在本书的第三部分将进行 详细介绍。</p><h3 id="Flask与MVC架构"><a href="#Flask与MVC架构" class="headerlink" title="Flask与MVC架构"></a>Flask与MVC架构</h3><p>你也许会困惑为什么用来处理请求并生成响应的函数被称为“视图 函数（view function）”，其实这个命名并不合理。在Flask中，这个命名 的约定来自Werkzeug，而Werkzeug中URL匹配的实现主要参考了 Routes（一个URL匹配库），再往前追溯，Routes的实现又参考了<a href="http://rubyonrails.org/">Ruby on Rails</a>。在Ruby on Rails中，术语views用来 表示MVC（Model-View-Controller，模型-视图-控制器）架构中的 View。</p><p>MVC架构最初是用来设计桌面程序的，后来也被用于Web程序，应 用了这种架构的Web框架有Django、Ruby on Rails等。在MVC架构中， 程序被分为三个组件：数据处理（Model）、用户界面（View）、交互 逻辑（Controller）。如果套用MVC架构的内容，那么Flask中视图函数 的名称其实并不严谨，使用控制器函数（Controller Function）似乎更合 适些，虽然它也附带处理用户界面。严格来说，Flask并不是MVC架构 的框架，因为它没有内置数据模型支持。为了方便表述，在本书中，使 用了<code>app.route()</code>装饰器的函数仍被称为视图函数，同时会使用“&lt;函数 名&gt;视图”（比如index视图）的形式来代指某个视图函数。</p><p>粗略归类，如果想要使用Flask来编写一个MVC架构的程序，那么 视图函数可以作为控制器（Controller），视图（View）则是我们将要介绍的使用Jinja2渲染的HTML模板，而模型（Model）可以使用其 他库来实现，在后面我们会介绍使用SQLAlchemy来创建数据库模型。</p><h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><p>Flask 基础其实很简单，这次主要是复习之前的知识，基础就不过多介绍了。<br>本章我们学习了Flask程序的运作方式和一些基本概念，这为我们进 一步学习打下了基础。<br>下面，我们会了解隐藏在Flask背后的重要角色 ——HTTP，并学习Flask是如何与之进行交互的。</p><h2 id="第2章-Flask与HTTP"><a href="#第2章-Flask与HTTP" class="headerlink" title="第2章 Flask与HTTP"></a>第2章 Flask与HTTP</h2><p>HTTP（Hypertext Transfer Protocol，超文本传输协议）定义了服务器和 客户端之间信息交流的格式和传递方式，它是万维网（World Wide Web）中数据交换的基础。</p><h3 id="请求响应循环"><a href="#请求响应循环" class="headerlink" title="请求响应循环"></a>请求响应循环</h3><p>为了更贴近现实，我们以一个真实的URL为例：</p><blockquote><p><a href="http://helloflask.com/hello">http://helloflask.com/hello</a></p></blockquote><p>当我们在浏览器中的地址栏中输入这个URL，然后按下Enter时，稍等片刻，浏览器会显示一个问候页面。<br>这背后到底发生了什么？你一定 可以猜想到，这背后也有一个web程序运行着。<br>它负责接收用户的请求，并把对应的内容返回给客户端，显示在用户的浏览 器上。<br>事实上，每一个Web应用都包含这种处理模式，即“请求-响应循 环（Request-Response Cycle）”：<br>客户端发出请求，服务器端处理请求 并返回响应，如图所示。</p><p><img src="/memoirs/images/python/2-1.png" alt="请求响应循环示意图"></p><p>这是每一个Web程序的基本工作模式，如果再进一步，这个模式又 包含着更多的工作单元，下图展示了一个Flask程序工作的实际流程。<br>从下图中可以看出，HTTP在整个流程中起到了至关重要的作用， 它是客户端和服务器端之间沟通的桥梁。</p><p><img src="/memoirs/images/python/2-2.png" alt="Flask Web程序工作流程"></p><p>当用户访问一个URL，浏览器便生成对应的HTTP请求，经由互联 网发送到对应的Web服务器。<br>Web服务器接收请求，通过WSGI将HTTP 格式的请求数据转换成我们的Flask程序能够使用的Python数据。<br>在程序中，Flask根据请求的URL执行对应的视图函数，获取返回值生成响应。<br>响应依次经过WSGI转换生成HTTP响应，再经由Web服务器传递，最终 被发出请求的客户端接收。<br>浏览器渲染响应中包含的HTML和CSS代 码，并执行JavaScript代码，最终把解析后的页面呈现在用户浏览器的窗口中。</p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>URL是一个请求的起源。不论服务器是运行在美国洛杉矶，还是运 行在我们自己的电脑上，当我们输入指向服务器所在地址的URL，都会 向服务器发送一个HTTP请求。一个标准的URL由很多部分组成，以下面这个URL为例：</p><blockquote><p><a href="http://helloflask.com/hello?name=Grey">http://helloflask.com/hello?name=Grey</a></p></blockquote><p>当我们在浏览器中访问这个URL时，随之产生的是一个发向<a href="http://helloflask.com/">http://helloflask.com</a>所在服务器的请求。<br>请求的实质是发送到服务器 上的一些数据，这种浏览器与服务器之间交互的数据被称为报文(message)，请求时浏览器发送的数据被称为请求报文(request message)，而服务器返回的数据被称为响应报文(response message)。</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>请求报文由请求的方法、URL、协议版本、首部字段（header）以及内容实体组成。<br>报文由报文首部和报文主体组成，两者由空行分隔，请求报文的主 体一般为空。<br>如果URL中包含查询字符串，或是提交了表单，那么报文 主体将会是查询字符串和表单数据。<br>报文首部包含了请求的各种信息和设置，比如客户端的类型、是否 设置缓存、语言偏好等。</p><p><img src="/memoirs/images/python/2-3.png" alt="请求报文示意表"></p><h4 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h4><p>现在该让Flask的请求对象request出场了，这个请求对象封装了从客 户端发来的请求报文，我们能从它获取请求报文中的所有数据。</p><p>请求解析和响应封装实际上大部分是由Werkzeug完成的，Flask子 类化Werkzeug的请求（Request）和响应（Response）对象并添加了和程 序相关的特定功能。</p><p>当Flask接收到请求后，请求对 象会提供多个属性来获取URL的各个部分，常用的属性如下表所示。</p><p><img src="/memoirs/images/python/2-4.png" alt="使用request的属性获取请求URL"></p><p>除了URL，请求报文中的其他信息都可以通过request对象提供的属性和方法获取。</p><p><img src="/memoirs/images/python/2-5.png" alt="request对象常用的属性和方法"></p><h4 id="在Flask中处理请求"><a href="#在Flask中处理请求" class="headerlink" title="在Flask中处理请求"></a>在Flask中处理请求</h4><p>URL是指向网络上资源的地址。在Flask中，我们需要让请求的URL 匹配对应的视图函数，视图函数返回值就是URL对应的资源。</p><ol><li>路由匹配<br>为了便于将请求分发到对应的视图函数，程序实例中存储了一个路由表（app.url_map），其中定义了URL规则和视图函数的映射关系。<br>当请求发来后，Flask会根据请求报文中的URL（path部分）来尝试与这个 表中的所有URL规则进行匹配，调用匹配成功的视图函数。<br>如果没有找到匹配的URL规则，说明程序中没有处理这个URL的视图函数，Flask会 自动返回404错误响应（Not Found，表示资源未找到）。<br>你可以尝试在 浏览器中访问<a href="http://localhost:5000/nothing">http://localhost:5000/nothing</a> ，因为我们的程序中没有视图 函数负责处理这个URL，所以你会得到404响应。</li><li>设置监听的HTTP方法<br>通过flask routes命令打印出的路由列表可以看到，每一个 路由除了包含URL规则外，还设置了监听的HTTP方法。<br>GET是最常用 的HTTP方法，所以视图函数默认监听的方法类型就是GET，HEAD、 OPTIONS方法的请求由Flask处理，而像DELETE、PUT等方法一般不会在程序中实现，在后面我们构建Web API时才会用到这些方法。</li></ol><p>我们可以在app.route()装饰器中使用methods参数传入一个包含监 听的HTTP方法的可迭代对象。<br>比如，下面的视图函数同时监听GET请 求和POST请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>当某个请求的方法不符合要求时，请求将无法被正常处理。比如， 在提交表单时通常使用POST方法，而如果提交的目标URL对应的视图 函数只允许GET方法，这时Flask会自动返回一个405错误响应（Method Not Allowed，表示请求方法不允许）。<br>3. URL处理<br>从前面的路由列表中可以看到，除了&#x2F;hello，这个程序还包含许多 URL规则，比如和go_back端点对应的&#x2F;goback&#x2F;&lt;int：year&gt;。现在请尝试 访问<a href="http://localhost:5000/goback/34">http://localhost:5000/goback/34</a> ，在URL中加入一个数字作为时光倒 流的年数，你会发现加载后的页面中有通过传入的年数计算出的年 份：“Welcome to 1984！”。仔细观察一下，你会发现URL规则中的变量 部分有一些特别，&lt;int：year&gt;表示为year变量添加了一个int转换器， Flask在解析这个URL变量时会将其转换为整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;goback/&lt;int:year&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go_back</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;Welcome to %d!&lt;/p&gt;&#x27;</span> % (<span class="number">2018</span> - year)</span><br></pre></td></tr></table></figure><h4 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h4><p>有时我们需要对请求进行预处理（preprocessing）和后处理 （postprocessing），这时可以使用Flask提供的一些请求钩子 （Hook），它们可以用来注册在请求处理的不同阶段执行的处理函数 （或称为回调函数，即Callback）。这些请求钩子使用装饰器实现，通 过程序实例app调用，用法很简单：以before_request钩子（请求之前） 为例，当你对一个函数附加了app.before_request装饰器后，就会将这个 函数注册为before_request处理函数，每次执行请求前都会触发所有 before_request处理函数。</p><p><img src="/memoirs/images/python/2-7.png" alt="请求钩子"></p><p>这些钩子使用起来和app.route()装饰器基本相同，每个钩子可以 注册任意多个处理函数，函数名并不是必须和钩子名称相同，下面是一 个基本示例：</p><p>假如我们创建了三个视图函数A、B、C，其中视图C使用了 after_this_request钩子，那么当请求A进入后，整个请求处理周期的请求 处理函数调用流程如图2-7所示。 下面是请求钩子的一些常见应用场景：</p><ul><li>before_first_request：<br>在玩具程序中，运行程序前我们需要进行一 些程序的初始化操作，比如创建数据库表，添加管理员用户。这些工作 可以放到使用before_first_request装饰器注册的函数中。</li><li>before_request：<br>比如网站上要记录用户最后在线的时间，可以通 过用户最后发送的请求时间来实现。为了避免在每个视图函数都添加更 新在线时间的代码，我们可以仅在使用before_request钩子注册的函数中 调用这段代码。</li><li>after_request：<br>我们经常在视图函数中进行数据库操作，比如更 新、插入等，之后需要将更改提交到数据库中。提交更改的代码就可以 放到after_request钩子注册的函数中。</li></ul><p><img src="/memoirs/images/python/2-8.png" alt="请求处理函数调用示意图"></p><p>另一种常见的应用是建立数据库连接，通常会有多个视图函数需要 建立和关闭数据库连接，这些操作基本相同。一个理想的解决方法是在 请求之前（before_request）建立连接，在请求之后（teardown_request） 关闭连接。通过在使用相应的请求钩子注册的函数中添加代码就可以实 现。这很像单元测试中的setUp()方法和tearDown()方法。</p><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>在Flask程序中，客户端发出的请求触发相应的视图函数，获取返回 值会作为响应的主体，最后生成完整的响应，即响应报文。</p><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>响应报文主要由协议版本、状态码（status code）、原因短语 （reason phrase）、响应首部和响应主体组成。<br>以发向localhost:5000&#x2F;hello的请求为例，服务器生成的响应报文示意如下表所示。</p><p><img src="/memoirs/images/python/2-8-1.png" alt="响应报文"></p><p>响应报文的首部包含一些关于响应和服务器的信息，这些内容由 Flask生成，而我们在视图函数中返回的内容即为响应报文中的主体内容。<br>浏览器接收到响应后，会把返回的响应主体解析并显示在浏览器窗口上。<br>HTTP状态码用来表示请求处理的结果，表2-9是常见的几种状态码 和相应的原因短语。</p><p><img src="/memoirs/images/python/2-9.png" alt="常见的HTTP状态码"></p><h4 id="在Flask中生成响应"><a href="#在Flask中生成响应" class="headerlink" title="在Flask中生成响应"></a>在Flask中生成响应</h4><p>响应在Flask中使用Response对象表示，响应报文中的大部分内容由 服务器处理，大多数情况下，我们只负责返回主体内容。<br>根据我们在上一节介绍的内容，Flask会先判断是否可以找到与请求 URL相匹配的路由，如果没有则返回404响应。<br>如果找到，则调用对应 的视图函数，视图函数的返回值构成了响应报文的主体内容，正确返回 时状态码默认为200。<br>Flask会调用make_response()方法将视图函数返 回值转换为响应对象。<br>完整地说，视图函数可以返回最多由三个元素组成的元组：响应主 体、状态码、首部字段。其中首部字段可以为字典，或是两元素元组组成的列表。</p><p>比如，普通的响应可以只包含主体内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>默认的状态码为200，下面指定了不同的状态码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#x27;</span>, <span class="number">201</span></span><br></pre></td></tr></table></figure><p>有时你会想附加或修改某个首部字段。比如，要生成状态码为3XX 的重定向响应，需要将首部中的Location字段设置为重定向的目标 URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>, <span class="number">302</span>, &#123;<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;http://www.example.com&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>现在访问<a href="http://localhost:5000/hello">http://localhost:5000/hello</a> ，会重定向 到<a href="http://www.example.com/">http://www.example.com</a> 。在多数情况下，除了响应主体，其他部分我们通常只需要使用默认值即可。</p><ol><li>重定向<br>在Web程序中，我们经常需要进行重定向。比如，当某个用户在没 有经过认证的情况下访问需要登录后才能访问的资源，程序通常会重定向到登录页面。<br>对于重定向这一类特殊响应，Flask提供了一些辅助函数。<br>除了像前面那样手动生成302响应，我们可以使用Flask提供的redirect（）函数来生成重定向响应，重定向的目标URL作为第一个参数。<br>前面的例子可以简化为：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.example.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用redirect()函数时，默认的状态码为302，即临时重定向。如果你想修改状态码，可以在redirect()函数中作为第二个参数或使用code关键字传入。</p><p>如果要在程序内重定向到其他视图，那么只需在redirect()函数中<br>使用url_for()函数生成目标URL即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hi&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>():</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redierct(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="comment"># 重定向到/hello</span></span><br></pre></td></tr></table></figure><ol start="2"><li>错误响应<br>大多数情况下，Flask会自动处理常见的错误响应。HTTP错误对应的异常类在Werkzeug的werkzeug.exceptions模块中定义，抛出这些异常即可返回对应的错误响应。<br>如果你想手动返回错误响应，更方便的方法 是使用Flask提供的abort()函数。 在abort()函数中传入状态码即可返回对应的错误响应</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/404&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>():</span><br><span class="line">    abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure><h4 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h4><p>在HTTP响应中，数据可以通过多种格式传输。大多数情况下，我 们会使用HTML格式，这也是Flask中的默认设置。在特定的情况下，我 们也会使用其他格式。<br>MIME类型（又称为media type或content type）是一种用来标识文件 类型的机制，它与文件扩展名相对应，可以让客户端区分不同的内容类型，并执行不同的操作。一般的格式为“类型名&#x2F;子类型名”，其中的子类 型名一般为文件扩展名。<br>比如，HTML的MIME类型为“text&#x2F;html”，png图片的MIME类型为“image&#x2F;png”。完整的标准MIME类型列表可以在这 里看到：<a href="https://www.iana.org/assignments/media-types/media-types.xhtml">https://www.iana.org/assignments/media-types/media-types.xhtml</a>。</p><p>如果你想使用其他MIME类型，可以通过Flask提供的 make_response（）方法生成响应对象，传入响应的主体作为参数，然后 使用响应对象的mimetype属性设置MIME类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    response = make_response(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br><span class="line">    response.mimetype = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>你也可以直接设置首部字段，比如<code>response.headers[&#39;Content-Type&#39;]=&#39;text/xml；charset=utf-8&#39;</code>。但操作mimetype属性更加方便，而且不用设置字符集（charset）选项。</p><p>常用的数据格式有纯文本、HTML、XML和JSON，下面我们分别 对这几种数据进行简单的介绍和分析。</p><ol><li>纯文本<br> MIME类型：<code>text/plain</code><br> 事实上，其他几种格式本质上都是纯文本。比如同样是一行包含 HTML标签的文本<code>&lt;h1&gt;Hello，Flask！&lt;/h1&gt;</code>，当MIME类型设置为纯 文本时，浏览器会以文本形式显示<code>&lt;h1&gt;Hello，Flask！&lt;/h1&gt;</code>；当 MIME类型声明为text&#x2F;html时，浏览器则会将其作为标题1样式的HTML 代码渲染。</li><li>HTML<br> MIME类型：<code>text/html</code><br> <a href="https://www.w3.org/html/">HTML</a>指Hypertext Markup Language（超文本标记语言），是最常用的数据格式，也是Flask返回响 应的默认数据类型。从我们在本书一开始的最小程序中的视图函数返回 的字符串，到我们后面会学习的HTML模板，都是HTML。当数据类型 为HTML时，浏览器会自动根据HTML标签以及样式类定义渲染对应的 样式。<br> 因为HTML常常包含丰富的信息，我们可以直接将HTML嵌入页面 中，处理起来比较方便。因此，在普通的HTTP请求中我们使用HTTP作 为响应的内容，这也是默认的数据类型。</li><li>XML<br> MIME类型：<code>application/xml</code><br> <a href="https://www.w3.org/XML/">XML</a>指Extensible Markup Language（可扩展标记语言），它是一种简单灵活的文本格式，被设计 用来存储和交换数据。XML的出现主要就是为了弥补HTML的不足：对 于仅仅需要数据的请求来说，HTML提供的信息太过丰富了，而且不易 于重用。XML和HTML一样都是标记性语言，使用标签来定义文本，但 HTML中的标签用于显示内容，而XML中的标签只用于定义数据。 XML一般作为AJAX请求的响应格式，或是Web API的响应格式。</li><li>JSON<br> MIME类型：<code>application/json</code><br> <a href="http://json.org/">JSON</a>指JavaScript Object Notation（JavaScript对 象表示法），是一种流行的、轻量的数据交换格式。它的出现又弥补了 XML的诸多不足：XML有较高的重用性，但XML相对于其他文档格式 来说体积稍大，处理和解析的速度较慢。JSON轻量，简洁，容易阅读 和解析，而且能和Web默认的客户端语言JavaScript更好地兼容。JSON 的结构基于“键值对的集合”和“有序的值列表”，这两种数据结构类似 Python中的字典（dictionary）和列表（list）。正是因为这种通用的数据 结构，使得JSON在同样基于这些结构的编程语言之间交换成为可能。</li></ol><h4 id="来一块Cookie"><a href="#来一块Cookie" class="headerlink" title="来一块Cookie"></a>来一块Cookie</h4><p><code>HTTP</code>是无状态（<code>stateless</code>）协议。也就是说，在一次请求响应结束后，服务器不会留下任何关于对方状态的信息。<br>但是对于某些Web程序来说，客户端的某些信息又必须被记住，比如用户的登录状态，这样才可以根据用户的状态来返回不同的响应。<br>为了解决这类问题，就有了<code>Cookie</code>技术。<code>Cookie</code>技术通过在请求和响应报文中添加<code>Cookie</code>数据来保 存客户端的状态信息。</p><p>在Flask中，如果想要在响应中添加一个cookie，最方便的方法是使 用Response类提供的set_cookie()方法。要使用这个方法，我们需要先 使用make_response()方法手动生成一个响应对象，传入响应主体作为 参数。这个响应对象默认实例化内置的Response类。</p><p><img src="/memoirs/images/python/2-10.png" alt="Response类的常用属性和方法"></p><p><img src="/memoirs/images/python/2-11.png" alt="set_cookie()方法的参数"></p><p>set_cookie视图用来设置cookie，它会将URL中的name变量的值设置 到名为name的cookie里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, url_for</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">name</span>):</span><br><span class="line">    response = make_response(redirect(url_for(<span class="string">&#x27;hello&#x27;</span>)))</span><br><span class="line">    response.set_cookie(<span class="string">&#x27;name&#x27;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>当浏览器保存了服务器端设置的Cookie后，浏览器再次发送到该服 务器的请求会自动携带设置的Cookie信息，Cookie的内容存储在请求首部的Cookie字段中，整个交互过程由上到下如下图所示。</p><p><img src="/memoirs/images/python/2-11-1.png" alt="Cookie设置示意图"></p><p>在Flask中，Cookie可以通过请求对象的cookies属性读取。在修改后 的hello视图中，如果没有从查询参数中获取到name的值，就从Cookie中寻找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>: name = request.cookies.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Human&#x27;</span>)</span><br><span class="line">    <span class="comment"># 从Cookie中获取name值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure><h4 id="session：安全的Cookie"><a href="#session：安全的Cookie" class="headerlink" title="session：安全的Cookie"></a>session：安全的Cookie</h4><p>Cookie在Web程序中发挥了很大的作用，其中最重要的功能是存储 用户的认证信息。我们先来看看基于浏览器的用户认证是如何实现的。<br>当我们使用浏览器登录某个社交网站时，会在登录表单中填写用户名和 密码，单击登录按钮后，这会向服务器发送一个包含认证数据的请求。<br>服务器接收请求后会查找对应的账户，然后验证密码是否匹配，如果匹 配，就在返回的响应中设置一个cookie，比如，<code>login_user：greyli</code>。<br>响应被浏览器接收后，cookie会被保存在浏览器中。当用户再次向 这个服务器发送请求时，根据请求附带的Cookie字段中的内容，服务器 上的程序就可以判断用户的认证状态，并识别出用户。<br>但是这会带来一个问题，在浏览器中手动添加和修改Cookie是很容 易的事，仅仅通过浏览器插件就可以实现。<br>所以，如果直接把认证信息 以明文的方式存储在Cookie里，那么恶意用户就可以通过伪造cookie的 内容来获得对网站的权限，冒用别人的账户。<br>为了避免这个问题，我们 需要对敏感的Cookie内容进行加密。方便的是，Flask提供了session对象 用来将Cookie数据加密储存。</p><ol><li>设置程序密钥<br>session通过密钥对数据进行签名以加密数据，因此，我们得先设置 一个密钥。这里的密钥就是一个具有一定复杂度和随机性的字符串，比 如“Drmhze6EPcv0fN_81Bj-nA”。<br>程序的密钥可以通过Flask.secret_key属性或配置变量SECRET_KEY 设置，比如：<br>更安全的做法是把密钥写进系统环境变量（在命令行中使用export 或set命令），或是保存在.env文件中：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br><span class="line"></span><br><span class="line">SECRET_KEY=secret string</span><br><span class="line">app.secret_key = SECRET_KEY</span><br></pre></td></tr></table></figure><p>然后在程序脚本中使用os模块提供的getenv（）方法获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">app.secret_key = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>, <span class="string">&#x27;secret string&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟用户认证<br>下面我们会使用session模拟用户的认证功能。代码清单2-5是用来 登入用户的login视图。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect, session, url_for</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    session[<span class="string">&#x27;logged_in&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 写入session</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这个登录视图只是简化的示例，在实际的登录中，我们需要在页面 上提供登录表单，供用户填写账户和密码，然后在登录视图里验证账户和密码的有效性。<br>session对象可以像字典一样操作，我们向session中添 加一个logged-in cookie，将它的值设为True，表示用户已认证。<br>当我们使用session对象添加cookie时，数据会使用程序的密钥对其 进行签名，加密后的数据存储在一块名为session的cookie里。</p><h3 id="Flask上下文"><a href="#Flask上下文" class="headerlink" title="Flask上下文"></a>Flask上下文</h3><p>我们可以把编程中的上下文理解为当前环境（environment）的快照 （snapshot）。如果把一个Flask程序比作一条可怜的生活在鱼缸里的鱼 的话，那么它当然离不开身边的环境。</p><h4 id="上下文全局变量"><a href="#上下文全局变量" class="headerlink" title="上下文全局变量"></a>上下文全局变量</h4><p>每一个视图函数都需要上下文信息，在前面我们学习过Flask将请求 报文封装在request对象中。按照一般的思路，如果我们要在视图函数中使用它，就得把它作为参数传入视图函数，就像我们接收URL变量一 样。但是这样一来就会导致大量的重复，而且增加了视图函数的复杂度。</p><p>在前面的示例中，我们并没有传递这个参数，而是直接从Flask导入 一个全局的request对象，然后在视图函数里直接调用request的属性获取数据。你一定好奇，我们在全局导入时request只是一个普通的Python对 象，为什么在处理请求时，视图函数里的request就会自动包含对应请求 的数据？这是因为Flask会在每个请求产生后自动激活当前请求的上下文，激活请求上下文后，request被临时设为全局可访问。而当每个请求结束后，Flask就销毁对应的请求上下文。</p><p>我们在前面说request是全局对象，但这里的“全局”并不是实际意义 上的全局。我们可以把这些变量理解为动态的全局变量。<br>在多线程服务器中，在同一时间可能会有多个请求在处理。假设有 三个客户端同时向服务器发送请求，这时每个请求都有各自不同的请求报文，所以请求对象也必然是不同的。<br>因此，请求对象只在各自的线程 内是全局的。Flask通过本地线程（thread local）技术将请求对象在特定 的线程和请求中全局可访问。具体内容和应用我们会在后面进行详细介绍。</p><p><img src="/memoirs/images/python/2-12.png" alt="Flask中的上下文变量"></p><p>我们在前面对session和request都了解得差不多了，这里简单介绍一 下current_app和g。<br>你在这里也许会疑惑，既然有了程序实例app对象，为什么还需要 current_app变量。在不同的视图函数中，request对象都表示和视图函数 对应的请求，也就是当前请求（current request）。而程序也会有多个程 序实例的情况，为了能获取对应的程序实例，而不是固定的某一个程序实例，我们就需要使用current_app变量，后面会详细介绍。</p><p>因为g存储在程序上下文中，而程序上下文会随着每一个请求的进入而激活，随着每一个请求的处理完毕而销毁，所以每次请求都会重设 这个值。我们通常会使用它结合请求钩子来保存每个请求处理前所需要 的全局变量，比如当前登入的用户对象，数据库连接等。<br>在前面的示例中，我们在hello视图中从查询字符串获取name的值，如果每一个视图都需要这个值，那么就要在每个视图重复这行代码。借助g我们可以将这 个操作移动到before_request处理函数中执行，然后保存到g的任意属性上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>():</span><br><span class="line">    g.name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设置这个函数后，在其他视图中可以直接使用g.name获取对应的值。另外，g也支持使用类似字典的get()、pop()以及setdefault()方法进行操作。</p><h4 id="激活上下文"><a href="#激活上下文" class="headerlink" title="激活上下文"></a>激活上下文</h4><p>阳光柔和，鱼儿在水里欢快地游动，这一切都是上下文存在后的美好景象。如果没有上下文，我们的程序只能直挺挺地躺在鱼缸里。<br>在下 面这些情况下，Flask会自动帮我们激活程序上下文：</p><ul><li>当我们使用flask run命令启动程序时。</li><li>使用旧的app.run()方法启动程序时。</li><li>执行使用@app.cli.command()装饰器注册的flask命令时。</li><li>使用flask shell命令启动Python Shell时。</li></ul><p>当请求进入时，Flask会自动激活请求上下文，这时我们可以使用request和session变量。<br>另外，当请求上下文被激活时，程序上下文也被自动激活。当请求处理完毕后，请求上下文和程序上下文也会自动销毁。<br>也就是说，在请求处理时这两者拥有相同的生命周期。<br>结合Python的代码执行机制理解，这也就意味着，我们可以在视图 函数中或在视图函数内调用的函数&#x2F;方法中使用所有上下文全局变量。<br>在使用flask shell命令打开的Python Shell中，或是自定义的flask命令函数 中，我们可以使用current_app和g变量，也可以手动激活请求上下文来使用request和session。<br>如果我们在没有激活相关上下文时使用这些变量，Flask就会抛出 RuntimeError异常：<code>RuntimeError：Working outside of application context.</code>或是<code>RuntimeError：Working outside of request context.</code>。</p><h4 id="上下文钩子"><a href="#上下文钩子" class="headerlink" title="上下文钩子"></a>上下文钩子</h4><p>在前面我们学习了请求生命周期中可以使用的几种钩子，Flask也为上下文提供了一个teardown_appcontext钩子，使用它注册的回调函数会 在程序上下文被销毁时调用，而且通常也会在请求上下文被销毁时调用。<br>比如，你需要在每个请求处理结束后销毁数据库连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_db</span>(<span class="params">exception</span>):</span><br><span class="line">    ...</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>使用app.teardown_appcontext装饰器注册的回调函数需要接收异常 对象作为参数，当请求被正常处理时这个参数值将是None，这个函数的 返回值将被忽略。<br>上下文是Flask的重要话题，在这里我们也只是简单了解一下，后面我们会详细了解上下文的实现原理。</p><h3 id="HTTP进阶实践"><a href="#HTTP进阶实践" class="headerlink" title="HTTP进阶实践"></a>HTTP进阶实践</h3><h4 id="重定向回上一个页面"><a href="#重定向回上一个页面" class="headerlink" title="重定向回上一个页面"></a>重定向回上一个页面</h4><p>在前面的示例程序中，我们使用redirect()函数生成重定向响应。 比如，在login视图中，登入用户后我们将用户重定向到&#x2F;hello页面。在 复杂的应用场景下，我们需要在用户访问某个URL后重定向到上一个页 面。最常见的情况是，用户单击某个需要登录才能访问的链接，这时程 序会重定向到登录页面，当用户登录后合理的行为是重定向到用户登录 前浏览的页面，以便用户执行未完成的操作，而不是直接重定向到主页。在示例程序中，我们创建了两个视图函数foo和bar，分别显示一个 Foo页面和一个Bar页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Foo page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something&lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/bar&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Bar page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something &lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/do_something&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_something</span>():</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><ol><li>获取上一个页面的URL</li></ol><p>要重定向回上一个页面，最关键的是获取上一个页面的URL。上一 个页面的URL一般可以通过两种方式获取：</p><ul><li>（1）HTTP referer<br>HTTP referer（起源为referrer在HTTP规范中的错误拼写）是一个用来记录请求发源地址的HTTP首部字段（HTTP_REFERER），即访问来源。<br>当用户在某个站点单击链接，浏览器向新链接所在的服务器发起请求，请求的数据中包含的HTTP_REFERER字段记录了用户所在的原站点URL。<br>这个值通常会用来追踪用户，比如记录用户进入程序的外部站点，以此来更有针对性地进行营销。在Flask中，referer的值可以通过请求对象的referrer属性获取，即request.referrer（正确拼写形式）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(request.referrer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(request.referrer <span class="keyword">or</span> url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>（2）查询参数<br>除了自动从referrer获取，另一种更常见的方式是在URL中手动加入包含当前页面URL的查询参数，这个查询参数一般命名为next。比如，下面在foo和bar视图的返回值中的URL后添加next参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Foo page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something and redirect&lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>, <span class="built_in">next</span>=request.full_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/bar&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Bar page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something and redirect&lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>, <span class="built_in">next</span>=request.full_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(request.args.get(<span class="string">&#x27;next&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(request.args.get(<span class="string">&#x27;next&#x27;</span>, url_for(<span class="string">&#x27;hello&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>对URL进行安全验证<br>虽然我们已经实现了重定向回上一个页面的功能，但安全问题不容 小觑，鉴于referer和next容易被篡改的特性，如果我们不对这些值进行 验证，则会形成开放重定向（Open Redirect）漏洞。</li></ol><p>以URL中的next参数为例，next变量以查询字符串的方式写在URL里，因此任何人都可以发给某个用户一个包含next变量指向任何站点的链接。举个简单的例子，如果你访问下面的URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:<span class="number">5000</span>/do-something?<span class="built_in">next</span>=http://helloflask.com</span><br></pre></td></tr></table></figure><p>程序会被重定向到<a href="http://helloflask.com/">http://helloflask.com</a> 。也就是说，如果我们不验 证next变量指向的URL地址是否属于我们的应用内，那么程序很容易就 会被重定向到外部地址。</p><p>假设我们的应用是一个银行业务系统（下面简称网站A），某个攻击者模仿我们的网站外观做了一个几乎一模一样的网站（下面简称网站 B）。<br>接着，攻击者伪造了一封电子邮件，告诉用户网站A账户信息需要更新，然后向用户提供一个指向网站A登录页面的链接，但链接中包 含一个重定向到网站B的next变量，比如：<a href="http://examplea.com/login?next=http://maliciousB.com">http://exampleA.com/login?next=http://maliciousB.com</a>。<br>当用户在A网站登录后，如果A网站重定向到next对应的URL，那么就会导致重定向到攻击者编写的B网站。因为B网站完全模仿A网站的外观，攻击者就可以在重定向后的B网站诱导用户输入敏感信息，比如银行卡号及密码。<br>确保URL安全的关键就是判断URL是否属于程序内部，我们创建了一个URL验证函数is_safe_url()，用来验证next变 量值是否属于程序内部URL。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urlparse <span class="keyword">import</span> urlparse, urljoin</span><br><span class="line"><span class="comment"># Python3需要从urllib.parse导入</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_safe_url</span>(<span class="params">target</span>):</span><br><span class="line">    ref_url = urlparse(request.host_url)</span><br><span class="line">    test_url = urlparse(urljoin(request.host_url, target))</span><br><span class="line">    <span class="keyword">return</span> test_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>) <span class="keyword">and</span> ref_url.netloc == test_url.netloc</span><br></pre></td></tr></table></figure><h4 id="使用AJAX技术发送异步请求"><a href="#使用AJAX技术发送异步请求" class="headerlink" title="使用AJAX技术发送异步请求"></a>使用AJAX技术发送异步请求</h4><p>在传统的Web应用中，程序的操作都是基于请求响应循环来实现的。每当页面状态需要变动，或是需要更新数据时，都伴随着一个发向服务器的请求。<br>当服务器返回响应时，整个页面会重载，并渲染新页面。<br>这种模式会带来一些问题。首先，频繁更新页面会牺牲性能，浪费 服务器资源，同时降低用户体验。<br>另外，对于一些操作性很强的程序来说，重载页面会显得很不合理。比如我们做了一个Web计算器程序，所有的按钮和显示屏幕都很逼真，但当我们单击“等于”按钮时，要等到页面重新加载后才在显示屏幕上看到结果，这显然会严重影响用户体验。<br>我们这一节要学习的AJAX技术可以完美地解决这些问题。</p><h4 id="HTTP服务器端推送"><a href="#HTTP服务器端推送" class="headerlink" title="HTTP服务器端推送"></a>HTTP服务器端推送</h4><p>不论是传统的HTTP请求-响应式的通信模式，还是异步的AJAX式请求，服务器端始终处于被动的应答状态，只有在客户端发出请求的情况下，服务器端才会返回响应。这种通信模式被称为客户端拉取 （client pull）。在这种模式下，用户只能通过刷新页面或主动单击加载 按钮来拉取新数据。</p><p>然而，在某些场景下，我们需要的通信模式是服务器端的主动推送 （server push）。比如，一个聊天室有很多个用户，当某个用户发送消息后，服务器接收到这个请求，然后把消息推送给聊天室的所有用户。 类似这种关注实时性的情况还有很多，比如社交网站在导航栏实时显示新提醒和私信的数量，用户的在线状态更新，股价行情监控、显示商品 库存信息、多人游戏、文档协作等。</p><p><img src="/memoirs/images/python/2-14.png" alt="常用推送技术"></p><h4 id="Web安全防范"><a href="#Web安全防范" class="headerlink" title="Web安全防范"></a>Web安全防范</h4><p>无论是简单的博客，还是大型的社交网站，Web安全都应该放在首位。Web安全问题涉及广泛，我们在这里介绍其中常见的几种攻击（attack）和其他常见的漏洞（vulnerability）。</p><p>对于Web程序的安全问题，一个首要的原则是：永远不要相信你的用户。大部分Web安全问题都是因为没有对用户输入的内容进行“消 毒”造成的。</p><ol><li><p>注入攻击<br>在OWASP（<code>Open Web Application Security Project</code>，开放式Web程 序安全项目）发布的最危险的Web程序安全风险Top 10中，无论是最新 的2017年的排名，2013年的排名还是最早的2010年，注入攻击 （Injection）都位列第一。<br>注入攻击包括系统命令（OS Command）注 入、SQL（Structured Query Language，结构化查询语言）注入（SQL Injection）、NoSQL注入、ORM（Object Relational Mapper，对象关系 映射）注入等。我们这里重点介绍的是SQL注入。</p></li><li><p>XSS攻击<br>XSS（Cross-Site Scripting，跨站脚本）攻击历史悠久，最远可以追溯到90年代，但至今仍然是危害范围非常广的攻击方式。在OWASP TOP 10中排名第7。</p></li><li><p>CSRF攻击<br>CSRF（Cross Site Request Forgery，跨站请求伪造）是一种近年来才逐渐被大众了解的网络攻击方式，又被称为One-Click Attack或Session Riding。在OWASP上一次（2013）的TOP 10 Web程序安全风险中，它位列第8。随着大部分程序的完善，各种框架都内置了对CSRF保护的支 持，但目前仍有5%的程序受到威胁。</p></li></ol><h3 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h3><p>HTTP是各种Web程序的基础，本章只是简要介绍了和Flask相关的部分，没有涉及HTTP底层的TCP&#x2F;IP或DNS协议。<br>建议你通过阅读相关 书籍来了解完整的Web原理，这将有助于编写更完善和安全的Web程序。</p><p>在下一章，我们会学习使用Flask的模板引擎——Jinja2，通过学习运用模板和静态文件，我们可以让程序变得更加丰富和完善。<br>现在前后端分离的架构下，Jinja2我们就简单的介绍一下。</p><h2 id="Jinja模板"><a href="#Jinja模板" class="headerlink" title="Jinja模板"></a>Jinja模板</h2><p>在动态Web程序中，视图函数返回的HTML数据往往需要根据相应的变量（比如查询参数）动态生成。<br>当HTML代码保存到单独的文件中时，我们没法再使用字符串格式化或拼接字符串的方式来在HTML代码中插入变量，这时我们需要使用模板引擎（template engine）。<br>借助模板引擎，我们可以在HTML文件中使用特殊的语法来标记出变量，这类包含固定内容和动态部分的可重用文件称为模板（template）。<br>模板引擎的作用就是读取并执行模板中的特殊语法标记，并根据传入的数据将变量替换为实际值，输出最终的HTML页面，这个过程被称为渲染（rendering）。<br>Flask默认使用的模板引擎是Jinja2，它是一个功 能齐全的Python模板引擎，除了设置变量，还允许我们在模板中添加if判断，执行for迭代，调用函数等，以各种方式控制模板的输出。<br>对于Jinja2来说，模板可以是任何格式的纯文本文件，比如HTML、XML、 CSV、LaTeX等。</p><h3 id="模板基本用法"><a href="#模板基本用法" class="headerlink" title="模板基本用法"></a>模板基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">user = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Grey Li&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bio&#x27;</span>: <span class="string">&#x27;A boy who loves movies and music.&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">movies = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;My Neighbor Totoro&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1988&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Three Colours trilogy&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1993&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Forrest Gump&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1994&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Perfect Blue&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1997&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;The Matrix&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1999&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Memento&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2000&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;The Bucket list&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2007&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Black Swan&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2010&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Gone Girl&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2014&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;CoCo&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2017&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们在templates目录下创建一个watchlist.html作为模板文件，然后 使用Jinja2支持的语法在模板中操作这些变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; user.username &#125;&#125;&#x27;s Watchlist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span> Return<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% if user.bio %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123; user.bio &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>This user has not provided a bio.<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">    &#123;# 下面是电影清单（这是注释） #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; user.username &#125;&#125;&#x27;s Watchlist (&#123;&#123; movies|length &#125;&#125;):<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;% for movie in movies %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; movie.name &#125;&#125; - &#123;&#123; movie.year &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>Jinja2 的用法很多，其实和Java的那个jsp用法差不多，具体的用法可以查询文档</p><p><a href="http://docs.jinkan.org/docs/jinja2/">Jinja2文档</a></p><p>Jinja2 其实跟jsp的优缺点也很像，在复杂的页面并不太好用，还是用Web API和Vue比较适合我。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的3章介绍的都是Flask的基础知识，比较简单也比较枯燥，主要的篇幅放在了HTTP上面，其他两章在官方的文档中介绍的很详细。<br>基础篇还剩一部分，将会在后面介绍，剩下的基础篇会结合基础知识和实际的用途，以及代码来介绍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第1章-初识Flask&quot;&gt;&lt;a href=&quot;#第1章-初识Flask&quot; class=&quot;headerlink&quot; title=&quot;第1章 初识Flask&quot;&gt;&lt;/a&gt;第1章 初识Flask&lt;/h2&gt;&lt;h3 id=&quot;Flask介绍&quot;&gt;&lt;a href=&quot;#Flask介绍&quot; class=&quot;headerlink&quot; title=&quot;Flask介绍&quot;&gt;&lt;/a&gt;Flask介绍&lt;/h3&gt;&lt;p&gt;搭建开发环境，编写一个最小的Flask程序并运行它，了解 Flask基本知识&lt;/p&gt;
&lt;p&gt;这一切开始于2010年4月1日，Armin Ronacher在网上发布了一篇关 于“下一代Python微框架”的介绍文章，文章里称这个Denied框架不依赖 Python标准库，只需要复制一份deny.py放到你的项目文件夹就可以开始 编程。伴随着一本正经的介绍、名人推荐语、示例代码和演示视频，这 个“虚假”的项目让不少人都信以为真。&lt;/p&gt;
&lt;p&gt;5天后， &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;就从这么一个愚人节玩笑诞生了。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Flask" scheme="https://aichiko0225.github.com/memoirs/tags/Flask/"/>
    
    <category term="Python" scheme="https://aichiko0225.github.com/memoirs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-100天(三)-数据库基础和进阶</title>
    <link href="https://aichiko0225.github.com/memoirs/20200312/python/Python-100-3/"/>
    <id>https://aichiko0225.github.com/memoirs/20200312/python/Python-100-3/</id>
    <published>2020-03-12T12:14:23.000Z</published>
    <updated>2024-12-13T03:05:58.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系数据库入门"><a href="#关系数据库入门" class="headerlink" title="关系数据库入门"></a>关系数据库入门</h2><span id="more"></span><h3 id="关系数据库概述"><a href="#关系数据库概述" class="headerlink" title="关系数据库概述"></a>关系数据库概述</h3><ol><li><p>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</p></li><li><p>数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL数据库。</p><blockquote><p>1970年，IBM的研究员E.F.Codd在<em>Communication of the ACM</em>上发表了名为<em>A Relational Model of Data for Large Shared Data Banks</em>的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p></blockquote></li><li><p>关系数据库特点。</p><ul><li>理论基础：集合论和关系代数。</li><li>具体表象：用二维表（有行和列）组织数据。</li><li>编程语言：结构化查询语言（SQL）。</li></ul></li><li><p>ER模型（实体关系模型）和概念模型图。<br><strong>ER模型</strong>，全称为<strong>实体关系模型</strong>（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式.</p><ul><li>实体 - 矩形框</li><li>属性 - 椭圆框</li><li>关系 - 菱形框</li><li>重数 - 1:1（一对一） &#x2F; 1:N（一对多） &#x2F; M:N（多对多）</li></ul><p>实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型（其本质就是ER模型），然后再设置好目标数据库系统，将概念模型转换成物理模型，最终生成创建二维表的SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出SQL或直接生成数据表）。</p></li><li><p>关系数据库产品。</p><ul><li><a href="https://www.oracle.com/index.html">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li><li><a href="https://www.ibm.com/analytics/us/en/db2/">DB2</a> - IBM公司开发的、主要运行于Unix（包括IBM自家的<a href="https://zh.wikipedia.org/wiki/AIX">AIX</a>）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。</li><li><a href="https://www.microsoft.com/en-us/sql-server/">SQL Server</a> - 由Microsoft开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li><li><a href="https://www.mysql.com/">MySQL</a> - MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。</li><li><a href="/">PostgreSQL</a> - 在BSD许可证下发行的开放源代码的关系数据库产品。</li></ul></li></ol><h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><p>MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。</p><p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。</p><p>甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目<a href="https://zh.wikipedia.org/wiki/OpenSolaris">OpenSolaris</a>的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划<a href="https://zh.wikipedia.org/wiki/MariaDB">MariaDB</a>（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。</p><ol><li><p>安装和配置</p><blockquote><p><strong>说明</strong>：下面的安装和配置都是以CentOS Linux环境为例，如果需要在其他系统下安装MySQL，读者可以自行在网络上查找对应的安装教程）。</p></blockquote><ul><li><p>刚才说过，MySQL有一个分支版本名叫MariaDB，该数据库旨在继续保持MySQL数据库在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81">GNU GPL</a>下开源。如果要使用MariaDB作为MySQL的替代品，可以使用下面的命令进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure></li><li><p>如果要安装官方版本的MySQL，可以在<a href="https://www.mysql.com/">MySQL官方网站</a>下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接。下面以MySQL 5.7.26版本和Red Hat Enterprise Linux为例，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><p>如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep mariadb | awk &#x27;&#123;print $1&#125;&#x27; | xargs yum erase -y</span><br></pre></td></tr></table></figure><p>接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>可以使用下面的命令查看已经安装的MySQL相关的包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>配置MySQL。</p><p>MySQL的配置文件在<code>/etc</code>目录下，名为<code>my.cnf</code>，默认的配置文件内容如下所示。如果对这个文件不理解并没有关系，什么时候用到这个配置文件什么时候再了解它就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log-error</span>=/var/log/mysqld.log</span><br><span class="line"><span class="attr">pid-file</span>=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL服务。</p><p>可以使用下面的命令来启动MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>在CentOS 7中，更推荐使用下面的命令来启动MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>启动MySQL成功后，可以通过下面的命令来检查网络端口使用情况，MySQL默认使用3306端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp | grep mysql</span><br></pre></td></tr></table></figure><p>也可以使用下面的命令查找是否有名为mysqld的进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep mysqld</span><br></pre></td></tr></table></figure></li><li><p>使用MySQL客户端工具连接服务器。</p><p>命令行工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><blockquote><p>说明：启动客户端时，<code>-u</code>参数用来指定用户名，MySQL默认的超级管理账号为<code>root</code>；<code>-p</code>表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用<code>-h</code>来指定连接主机的主机名或IP地址。</p></blockquote><p>如果是首次安装MySQL，可以使用下面的命令来找到默认的初始密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure><p>上面的命令会查看MySQL的日志带有password的行，在显示的结果中<code>root@localhost:</code>后面的部分就是默认设置的初始密码。</p><p>修改超级管理员（root）的访问口令为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：MySQL较新的版本默认不允许使用弱口令作为用户口令，所以我们通过上面的前两条命令修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，攻击数据库窃取数据和劫持数据库勒索比特币的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是不要让数据库服务器暴露在公网上（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好<code>root</code>账号的口令，应用系统需要访问数据库时，通常不使用<code>root</code>账号进行访问，而是创建其他拥有适当权限的账号来访问。</p></blockquote><p>再次使用客户端工具连接MySQL服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接MySQL服务器，包括：</p><ul><li>MySQL Workbench（官方提供的工具）</li><li>Navicat for MySQL（界面简单优雅，功能直观强大）</li><li>SQLyog for MySQL（强大的MySQL数据库管理员工具）</li></ul></li></ul></li><li><p>常用命令。</p><ul><li><p>查看服务器版本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version();</span><br></pre></td></tr></table></figure></li><li><p>查看所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure></li><li><p>切换到指定数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库下所有表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>获取帮助。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">? contents;</span><br><span class="line">? functions;</span><br><span class="line">? <span class="type">numeric</span> functions;</span><br><span class="line">? round;</span><br><span class="line"></span><br><span class="line">? data types;</span><br><span class="line">? longblob;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="SQL详解"><a href="#SQL详解" class="headerlink" title="SQL详解"></a>SQL详解</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）。</p><blockquote><p>说明：SQL是不区分大小写的语言，为了书写方便，下面的SQL都使用了小写字母来书写。</p></blockquote><ol><li><p>DDL（数据定义语言）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果存在名为school的数据库就删除它</span></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> school;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建名为school的数据库并设置默认的字符集和排序方式</span></span><br><span class="line"><span class="keyword">create</span> database school <span class="keyword">default</span> charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换到school数据库上下文环境</span></span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学院表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_college</span><br><span class="line">(</span><br><span class="line">collid <span class="type">int</span> auto_increment comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">collname <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">collintro <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (collid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">stuid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">stuname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">stusex <span class="type">boolean</span> <span class="keyword">default</span> <span class="number">1</span> comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">stubirth <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">stuaddr <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;籍贯&#x27;</span>,</span><br><span class="line">collid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;所属学院&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (stuid),</span><br><span class="line"><span class="keyword">foreign</span> key (collid) <span class="keyword">references</span> tb_college (collid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建教师表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_teacher</span><br><span class="line">(</span><br><span class="line">teaid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">teaname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">teatitle <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;助教&#x27;</span> comment <span class="string">&#x27;职称&#x27;</span>,</span><br><span class="line">collid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;所属学院&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (teaid),</span><br><span class="line"><span class="keyword">foreign</span> key (collid) <span class="keyword">references</span> tb_college (collid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_course</span><br><span class="line">(</span><br><span class="line">couid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">couname <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">coucredit <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学分&#x27;</span>,</span><br><span class="line">teaid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;授课老师&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (couid),</span><br><span class="line"><span class="keyword">foreign</span> key (teaid) <span class="keyword">references</span> tb_teacher (teaid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建选课记录表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_record</span><br><span class="line">(</span><br><span class="line">recid <span class="type">int</span> auto_increment comment <span class="string">&#x27;选课记录编号&#x27;</span>,</span><br><span class="line">sid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;选课学生&#x27;</span>,</span><br><span class="line">cid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;所选课程&#x27;</span>,</span><br><span class="line">seldate datetime <span class="keyword">default</span> now() comment <span class="string">&#x27;选课时间日期&#x27;</span>,</span><br><span class="line">score <span class="type">decimal</span>(<span class="number">4</span>,<span class="number">1</span>) comment <span class="string">&#x27;考试成绩&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (recid),</span><br><span class="line"><span class="keyword">foreign</span> key (sid) <span class="keyword">references</span> tb_student (stuid),</span><br><span class="line"><span class="keyword">foreign</span> key (cid) <span class="keyword">references</span> tb_course (couid),</span><br><span class="line"><span class="keyword">unique</span> (sid, cid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的DDL有几个地方需要强调一下：</p><ul><li><p>创建数据库时，我们通过<code>default charset utf8</code>指定了数据库默认使用的字符集，我们推荐使用该字符集，因为utf8能够支持国际化编码。如果将来数据库中用到的字符可能包括类似于Emoji这样的图片字符，也可以将默认字符集设定为utf8mb4（最大4字节的utf-8编码）。查看MySQL支持的字符集可以执行下面的语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="type">character</span> <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">+----------+---------------------------------+---------------------+--------+</span><br><span class="line">| Charset  | Description                     | Default collation   | Maxlen |</span><br><span class="line">+----------+---------------------------------+---------------------+--------+</span><br><span class="line">| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |</span><br><span class="line">| dec8     | DEC West European               | dec8_swedish_ci     |      1 |</span><br><span class="line">| cp850    | DOS West European               | cp850_general_ci    |      1 |</span><br><span class="line">| hp8      | HP West European                | hp8_english_ci      |      1 |</span><br><span class="line">| koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 |</span><br><span class="line">| latin1   | cp1252 West European            | latin1_swedish_ci   |      1 |</span><br><span class="line">| latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 |</span><br><span class="line">| swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 |</span><br><span class="line">| ascii    | US ASCII                        | ascii_general_ci    |      1 |</span><br><span class="line">| ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 |</span><br><span class="line">| sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 |</span><br><span class="line">| hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 |</span><br><span class="line">| tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 |</span><br><span class="line">| euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 |</span><br><span class="line">| koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 |</span><br><span class="line">| gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 |</span><br><span class="line">| greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 |</span><br><span class="line">| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |</span><br><span class="line">| gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 |</span><br><span class="line">| latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 |</span><br><span class="line">| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |</span><br><span class="line">| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |</span><br><span class="line">| ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 |</span><br><span class="line">| cp866    | DOS Russian                     | cp866_general_ci    |      1 |</span><br><span class="line">| keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 |</span><br><span class="line">| macce    | Mac Central European            | macce_general_ci    |      1 |</span><br><span class="line">| macroman | Mac West European               | macroman_general_ci |      1 |</span><br><span class="line">| cp852    | DOS Central European            | cp852_general_ci    |      1 |</span><br><span class="line">| latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 |</span><br><span class="line">| utf8mb4  | UTF-8 Unicode                   | utf8mb4_general_ci  |      4 |</span><br><span class="line">| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |</span><br><span class="line">| utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 |</span><br><span class="line">| utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 |</span><br><span class="line">| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |</span><br><span class="line">| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |</span><br><span class="line">| utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 |</span><br><span class="line">| binary   | Binary pseudo charset           | binary              |      1 |</span><br><span class="line">| geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 |</span><br><span class="line">| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |</span><br><span class="line">| eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 |</span><br><span class="line">| gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |</span><br><span class="line">+----------+---------------------------------+---------------------+--------+</span><br><span class="line">41 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果要设置MySQL服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure></li><li><p>在创建表的时候，我们可以在右圆括号的后面通过<code>engine=XXX</code>来指定表的存储引擎，MySQL支持多种存储引擎，可以通过<code>show engines</code>命令进行查看。MySQL 5.5以后的版本默认使用的存储引擎是InnoDB，它正好也就是我们推荐大家使用的存储引擎（因为InnoDB更适合互联网应用对高并发、性能以及事务支持等方面的需求）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines\G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">      Engine: InnoDB</span><br><span class="line">     Support: DEFAULT</span><br><span class="line">     Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">      Engine: MRG_MYISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Collection of identical MyISAM tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">      Engine: MEMORY</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">      Engine: BLACKHOLE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: /dev/null storage engine (anything you write to it disappears)</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">      Engine: MyISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">      Engine: CSV</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: CSV storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">      Engine: ARCHIVE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Archive storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">      Engine: PERFORMANCE_SCHEMA</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Performance Schema</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">      Engine: FEDERATED</span><br><span class="line">     Support: NO</span><br><span class="line">     Comment: Federated MySQL storage engine</span><br><span class="line">Transactions: NULL</span><br><span class="line">          XA: NULL</span><br><span class="line">  Savepoints: NULL</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>下面的表格对MySQL几种常用的数据引擎进行了简单的对比。</p><table><thead><tr><th>特性</th><th>InnoDB</th><th>MRG_MYISAM</th><th>MEMORY</th><th>MyISAM</th></tr></thead><tbody><tr><td>存储限制</td><td>有</td><td>没有</td><td>有</td><td>有</td></tr><tr><td>事务</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td></tr><tr><td>全文检索</td><td>支持（5.6+）</td><td></td><td></td><td>支持</td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td></td><td></td><td>支持</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>存储空间使用</td><td>高</td><td>低</td><td></td><td>低</td></tr><tr><td>批量插入性能</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>是否支持外键</td><td>支持</td><td></td><td></td><td></td></tr></tbody></table><p>通过上面的比较我们可以了解到，InnoDB是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且它也是较新的MySQL版本中默认使用的存储引擎。</p></li><li><p>在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过MySQL的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? data types</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">You asked for help about help category: &quot;Data Types&quot;</span><br><span class="line">For more information, type &#x27;help &lt;item&gt;&#x27;, where &lt;item&gt; is one of the following</span><br><span class="line">topics:</span><br><span class="line">   AUTO_INCREMENT</span><br><span class="line">   BIGINT</span><br><span class="line">   BINARY</span><br><span class="line">   BIT</span><br><span class="line">   BLOB</span><br><span class="line">   BLOB DATA TYPE</span><br><span class="line">   BOOLEAN</span><br><span class="line">   CHAR</span><br><span class="line">   CHAR BYTE</span><br><span class="line">   DATE</span><br><span class="line">   DATETIME</span><br><span class="line">   DEC</span><br><span class="line">   DECIMAL</span><br><span class="line">   DOUBLE</span><br><span class="line">   DOUBLE PRECISION</span><br><span class="line">   ENUM</span><br><span class="line">   FLOAT</span><br><span class="line">   INT</span><br><span class="line">   INTEGER</span><br><span class="line">   LONGBLOB</span><br><span class="line">   LONGTEXT</span><br><span class="line">   MEDIUMBLOB</span><br><span class="line">   MEDIUMINT</span><br><span class="line">   MEDIUMTEXT</span><br><span class="line">   SET DATA TYPE</span><br><span class="line">   SMALLINT</span><br><span class="line">   TEXT</span><br><span class="line">   TIME</span><br><span class="line">   TIMESTAMP</span><br><span class="line">   TINYBLOB</span><br><span class="line">   TINYINT</span><br><span class="line">   TINYTEXT</span><br><span class="line">   VARBINARY</span><br><span class="line">   VARCHAR</span><br><span class="line">   YEAR DATA TYPE</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="type">varchar</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Name: &#x27;VARCHAR&#x27;</span><br><span class="line">Description:</span><br><span class="line">[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE</span><br><span class="line">collation_name]</span><br><span class="line"></span><br><span class="line">A variable-length string. M represents the maximum column length in</span><br><span class="line">characters. The range of M is 0 to 65,535. The effective maximum length</span><br><span class="line">of a VARCHAR is subject to the maximum row size (65,535 bytes, which is</span><br><span class="line">shared among all columns) and the character set used. For example, utf8</span><br><span class="line">characters can require up to three bytes per character, so a VARCHAR</span><br><span class="line">column that uses the utf8 character set can be declared to be a maximum</span><br><span class="line">of 21,844 characters. See</span><br><span class="line">http://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html.</span><br><span class="line"></span><br><span class="line">MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus</span><br><span class="line">data. The length prefix indicates the number of bytes in the value. A</span><br><span class="line">VARCHAR column uses one length byte if values require no more than 255</span><br><span class="line">bytes, two length bytes if values may require more than 255 bytes.</span><br><span class="line"></span><br><span class="line">*Note*:</span><br><span class="line"></span><br><span class="line">MySQL follows the standard SQL specification, and does not remove</span><br><span class="line">trailing spaces from VARCHAR values.</span><br><span class="line"></span><br><span class="line">VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the</span><br><span class="line">standard SQL way to define that a VARCHAR column should use some</span><br><span class="line">predefined character set. MySQL uses utf8 as this predefined character</span><br><span class="line">set. http://dev.mysql.com/doc/refman/5.7/en/charset-national.html.</span><br><span class="line">NVARCHAR is shorthand for NATIONAL VARCHAR.</span><br><span class="line"></span><br><span class="line">URL: http://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html</span><br></pre></td></tr></table></figure><p>在数据类型的选择上，保存字符串数据通常都使用VARCHAR和CHAR两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于InnoDB存储引擎，行存储格式没有区分固定长度和可变长度列，因此VARCHAR类型好CHAR类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用TEXT类型；如果要保存很大的字节串，可以使用BLOB（二进制大对象）类型。在MySQL中，TEXT和BLOB又分别包括TEXT、MEDIUMTEXT、LONGTEXT和BLOB、MEDIUMBLOB、LONGBLOB三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用FLOAT或DOUBLE类型，而保存定点数应该使用DECIMAL类型。如果要保存时间日期，DATETIME类型优于TIMESTAMP类型，因为前者能表示的时间日期范围更大。</p></li></ul></li><li><p>DML</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入学院数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_college (collname, collintro) <span class="keyword">values</span> </span><br><span class="line">(<span class="string">&#x27;计算机学院&#x27;</span>, <span class="string">&#x27;创建于1956年是我国首批建立计算机专业。学院现有计算机科学与技术一级学科和网络空间安全一级学科博士学位授予权，其中计算机科学与技术一级学科具有博士后流动站。计算机科学与技术一级学科在2017年全国第四轮学科评估中评为A；2019 U.S.News全球计算机学科排名26名；ESI学科排名0.945‰，进入全球前1‰，位列第43位。&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;外国语学院&#x27;</span>, <span class="string">&#x27;1998年浙江大学、杭州大学、浙江农业大学、浙江医科大学四校合并，成立新的浙江大学。1999年原浙江大学外语系、原杭州大学外国语学院、原杭州大学大外部、原浙江农业大学公外部、原浙江医科大学外语教学部合并，成立浙江大学外国语学院。2003年学院更名为浙江大学外国语言文化与国际交流学院。&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;经济管理学院&#x27;</span>, <span class="string">&#x27;四川大学经济学院历史悠久、传承厚重，其前身是创办于1905年的四川大学经济科,距今已有100多年的历史。已故著名经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代著名学者刘诗白等曾先后在此任教或学习。在长期的办学过程中，学院坚持以马克思主义的立场、观点、方法为指导，围绕建设世界一流经济学院的奋斗目标，做实“两个伟大”深度融合，不断提高党的建设质量与科学推进一流事业深度融合。&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入学生数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1001</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1990-3-4&#x27;</span>, <span class="string">&#x27;四川成都&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="string">&#x27;任我行&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1992-2-2&#x27;</span>, <span class="string">&#x27;湖南长沙&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1033</span>, <span class="string">&#x27;王语嫣&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;1989-12-3&#x27;</span>, <span class="string">&#x27;四川成都&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1572</span>, <span class="string">&#x27;岳不群&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1993-7-19&#x27;</span>, <span class="string">&#x27;陕西咸阳&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1378</span>, <span class="string">&#x27;纪嫣然&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;1995-8-12&#x27;</span>, <span class="string">&#x27;四川绵阳&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1954</span>, <span class="string">&#x27;林平之&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1994-9-20&#x27;</span>, <span class="string">&#x27;福建莆田&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">2035</span>, <span class="string">&#x27;东方不败&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1988-6-30&#x27;</span>, <span class="keyword">null</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">3011</span>, <span class="string">&#x27;林震南&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1985-12-12&#x27;</span>, <span class="string">&#x27;福建莆田&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">3755</span>, <span class="string">&#x27;项少龙&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1993-1-25&#x27;</span>, <span class="keyword">null</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">3923</span>, <span class="string">&#x27;杨不悔&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;1985-4-17&#x27;</span>, <span class="string">&#x27;四川成都&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">4040</span>, <span class="string">&#x27;隔壁老王&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1989-1-1&#x27;</span>, <span class="string">&#x27;四川成都&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学生数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuid<span class="operator">=</span><span class="number">4040</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新学生数据</span></span><br><span class="line"><span class="keyword">update</span> tb_student <span class="keyword">set</span> stuname<span class="operator">=</span><span class="string">&#x27;杨过&#x27;</span>, stuaddr<span class="operator">=</span><span class="string">&#x27;湖南长沙&#x27;</span> <span class="keyword">where</span> stuid<span class="operator">=</span><span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入老师数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_teacher (teaid, teaname, teatitle, collid) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1122</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;教授&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1133</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1144</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">2255</span>, <span class="string">&#x27;范遥&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">3366</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入课程数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_course (couid, couname, coucredit, teaid) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1111</span>, <span class="string">&#x27;Python程序设计&#x27;</span>, <span class="number">3</span>, <span class="number">1122</span>),</span><br><span class="line">(<span class="number">2222</span>, <span class="string">&#x27;Web前端开发&#x27;</span>, <span class="number">2</span>, <span class="number">1122</span>),</span><br><span class="line">(<span class="number">3333</span>, <span class="string">&#x27;操作系统&#x27;</span>, <span class="number">4</span>, <span class="number">1122</span>),</span><br><span class="line">(<span class="number">4444</span>, <span class="string">&#x27;计算机网络&#x27;</span>, <span class="number">2</span>, <span class="number">1133</span>),</span><br><span class="line">(<span class="number">5555</span>, <span class="string">&#x27;编译原理&#x27;</span>, <span class="number">4</span>, <span class="number">1144</span>),</span><br><span class="line">(<span class="number">6666</span>, <span class="string">&#x27;算法和数据结构&#x27;</span>, <span class="number">3</span>, <span class="number">1144</span>),</span><br><span class="line">(<span class="number">7777</span>, <span class="string">&#x27;经贸法语&#x27;</span>, <span class="number">3</span>, <span class="number">2255</span>),</span><br><span class="line">(<span class="number">8888</span>, <span class="string">&#x27;成本会计&#x27;</span>, <span class="number">2</span>, <span class="number">3366</span>),</span><br><span class="line">(<span class="number">9999</span>, <span class="string">&#x27;审计学&#x27;</span>, <span class="number">3</span>, <span class="number">3366</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入选课数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_record (sid, cid, seldate, score) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1001</span>, <span class="number">1111</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">95</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="number">2222</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">87.5</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="number">3333</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="number">4444</span>, <span class="string">&#x27;2018-09-03&#x27;</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="number">6666</span>, <span class="string">&#x27;2017-09-02&#x27;</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="number">1111</span>, <span class="string">&#x27;2017-09-03&#x27;</span>, <span class="number">65</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="number">5555</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">42</span>),</span><br><span class="line">(<span class="number">1033</span>, <span class="number">1111</span>, <span class="string">&#x27;2017-09-03&#x27;</span>, <span class="number">92.5</span>),</span><br><span class="line">(<span class="number">1033</span>, <span class="number">4444</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">78</span>),</span><br><span class="line">(<span class="number">1033</span>, <span class="number">5555</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">82.5</span>),</span><br><span class="line">(<span class="number">1572</span>, <span class="number">1111</span>, <span class="string">&#x27;2017-09-02&#x27;</span>, <span class="number">78</span>),</span><br><span class="line">(<span class="number">1378</span>, <span class="number">1111</span>, <span class="string">&#x27;2017-09-05&#x27;</span>, <span class="number">82</span>),</span><br><span class="line">(<span class="number">1378</span>, <span class="number">7777</span>, <span class="string">&#x27;2017-09-02&#x27;</span>, <span class="number">65.5</span>),</span><br><span class="line">(<span class="number">2035</span>, <span class="number">7777</span>, <span class="string">&#x27;2018-09-03&#x27;</span>, <span class="number">88</span>),</span><br><span class="line">(<span class="number">2035</span>, <span class="number">9999</span>, <span class="keyword">default</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">3755</span>, <span class="number">1111</span>, <span class="keyword">default</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">3755</span>, <span class="number">8888</span>, <span class="keyword">default</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">3755</span>, <span class="number">9999</span>, <span class="string">&#x27;2017-09-01&#x27;</span>, <span class="number">92</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有课程名称及学分(投影和别名)</span></span><br><span class="line"><span class="keyword">select</span> couname, coucredit <span class="keyword">from</span> tb_course;</span><br><span class="line"><span class="keyword">select</span> couname <span class="keyword">as</span> 课程名称, coucredit <span class="keyword">as</span> 学分 <span class="keyword">from</span> tb_course;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学生的姓名和性别(条件运算)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">as</span> 姓名, <span class="keyword">case</span> stusex <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> 性别 <span class="keyword">from</span> tb_student;</span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">as</span> 姓名, if(stusex, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>) <span class="keyword">as</span> 性别 <span class="keyword">from</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有女学生的姓名和出生日期(筛选)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stubirth <span class="keyword">from</span> tb_student <span class="keyword">where</span> stusex<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有80后学生的姓名、性别和出生日期(筛选)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stusex, stubirth <span class="keyword">from</span> tb_student <span class="keyword">where</span> stubirth<span class="operator">&gt;=</span><span class="string">&#x27;1980-1-1&#x27;</span> <span class="keyword">and</span> stubirth<span class="operator">&lt;=</span><span class="string">&#x27;1989-12-31&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> stuname, stusex, stubirth <span class="keyword">from</span> tb_student <span class="keyword">where</span> stubirth <span class="keyword">between</span> <span class="string">&#x27;1980-1-1&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1989-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓&quot;杨&quot;的学生姓名和性别(模糊)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stusex <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname <span class="keyword">like</span> <span class="string">&#x27;杨%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓&quot;杨&quot;名字两个字的学生姓名和性别(模糊)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stusex <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname <span class="keyword">like</span> <span class="string">&#x27;杨_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓&quot;杨&quot;名字三个字的学生姓名和性别(模糊)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stusex <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname <span class="keyword">like</span> <span class="string">&#x27;杨__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中有&quot;不&quot;字或&quot;嫣&quot;字的学生的姓名(模糊)</span></span><br><span class="line"><span class="keyword">select</span> stuname, stusex <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname <span class="keyword">like</span> <span class="string">&#x27;%不%&#x27;</span> <span class="keyword">or</span> stuname <span class="keyword">like</span> <span class="string">&#x27;%嫣%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有录入家庭住址的学生姓名(空值)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuaddr <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询录入了家庭住址的学生姓名(空值)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuaddr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生选课的所有日期(去重)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> seldate <span class="keyword">from</span> tb_record;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生的家庭住址(去重)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> stuaddr <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuaddr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询男学生的姓名和生日按年龄从大到小排列(排序)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">as</span> 姓名, datediff(curdate(), stubirth) div <span class="number">365</span> <span class="keyword">as</span> 年龄 <span class="keyword">from</span> tb_student <span class="keyword">where</span> stusex<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> 年龄 <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄最大的学生的出生日期(聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(stubirth) <span class="keyword">from</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄最小的学生的出生日期(聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(stubirth) <span class="keyword">from</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询男女学生的人数(分组和聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> stusex, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_student <span class="keyword">group</span> <span class="keyword">by</span> stusex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(score) <span class="keyword">from</span> tb_record <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">1111</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(score) <span class="keyword">from</span> tb_record <span class="keyword">where</span> sid<span class="operator">=</span><span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个学生的学号和平均成绩(分组和聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> sid <span class="keyword">as</span> 学号, <span class="built_in">avg</span>(score) <span class="keyword">as</span> 平均分 <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询平均成绩大于等于90分的学生的学号和平均成绩</span></span><br><span class="line"><span class="comment">-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句</span></span><br><span class="line"><span class="keyword">select</span> sid <span class="keyword">as</span> 学号, <span class="built_in">avg</span>(score) <span class="keyword">as</span> 平均分 <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid <span class="keyword">having</span> 平均分<span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">from</span> tb_student <span class="keyword">where</span> stubirth<span class="operator">=</span>( <span class="keyword">select</span> <span class="built_in">min</span>(stubirth) <span class="keyword">from</span> tb_student );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄最大的学生姓名和年龄(子查询+运算)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">as</span> 姓名, datediff(curdate(), stubirth) div <span class="number">365</span> <span class="keyword">as</span> 年龄 <span class="keyword">from</span> tb_student <span class="keyword">where</span> stubirth<span class="operator">=</span>( <span class="keyword">select</span> <span class="built_in">min</span>(stubirth) <span class="keyword">from</span> tb_student );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</span></span><br><span class="line"><span class="keyword">select</span> stuname <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuid <span class="keyword">in</span> ( <span class="keyword">select</span> stuid <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> stuid <span class="keyword">having</span> <span class="built_in">count</span>(stuid)<span class="operator">&gt;</span><span class="number">2</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生姓名、课程名称以及成绩(连接查询)</span></span><br><span class="line"><span class="keyword">select</span> stuname, couname, score <span class="keyword">from</span> tb_student t1, tb_course t2, tb_record t3 <span class="keyword">where</span> stuid<span class="operator">=</span>sid <span class="keyword">and</span> couid<span class="operator">=</span>cid <span class="keyword">and</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)</span></span><br><span class="line"><span class="keyword">select</span> stuname, couname, score <span class="keyword">from</span> tb_student <span class="keyword">inner</span> <span class="keyword">join</span> tb_record <span class="keyword">on</span> stuid<span class="operator">=</span>sid <span class="keyword">inner</span> <span class="keyword">join</span> tb_course <span class="keyword">on</span> couid<span class="operator">=</span>cid <span class="keyword">where</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span> limit <span class="number">5</span> <span class="keyword">offset</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> stuname, couname, score <span class="keyword">from</span> tb_student <span class="keyword">inner</span> <span class="keyword">join</span> tb_record <span class="keyword">on</span> stuid<span class="operator">=</span>sid <span class="keyword">inner</span> <span class="keyword">join</span> tb_course <span class="keyword">on</span> couid<span class="operator">=</span>cid <span class="keyword">where</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span> limit <span class="number">10</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询选课学生的姓名和平均成绩(子查询和连接查询)</span></span><br><span class="line"><span class="keyword">select</span> stuname, avgmark <span class="keyword">from</span> tb_student, ( <span class="keyword">select</span> sid, <span class="built_in">avg</span>(score) <span class="keyword">as</span> avgmark <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid ) temp <span class="keyword">where</span> stuid<span class="operator">=</span>sid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> stuname, avgmark <span class="keyword">from</span> tb_student <span class="keyword">inner</span> <span class="keyword">join</span> ( <span class="keyword">select</span> sid, <span class="built_in">avg</span>(score) <span class="keyword">as</span> avgmark <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid ) temp <span class="keyword">on</span> stuid<span class="operator">=</span>sid;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个学生的姓名和选课数量(左外连接和子查询)</span></span><br><span class="line"><span class="keyword">select</span> stuname, ifnull(total, <span class="number">0</span>) <span class="keyword">from</span> tb_student <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> ( <span class="keyword">select</span> sid, <span class="built_in">count</span>(sid) <span class="keyword">as</span> total <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid ) temp <span class="keyword">on</span> stuid<span class="operator">=</span>sid;</span><br></pre></td></tr></table></figure><p>上面的DML有几个地方需要加以说明：</p><ol><li><p>MySQL中支持多种类型的运算符，包括：算术运算符（+、-、*、&#x2F;、%）、比较运算符（&#x3D;、&lt;&gt;、&lt;&#x3D;&gt;、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、BETWEEN…AND…、IN、IS NULL、IS NOT NULL、LIKE、RLIKE、REGEXP）、逻辑运算符（NOT、AND、OR、XOR）和位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;），我们可以在DML中使用这些运算符处理数据。</p></li><li><p>在查询数据时，可以在SELECT语句及其子句（如WHERE子句、ORDER BY子句、HAVING子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。</p><p>常用字符串函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT</td><td>将多个字符串连接成一个字符串</td></tr><tr><td>FORMAT</td><td>将数值格式化成字符串并指定保留几位小数</td></tr><tr><td>FROM_BASE64 &#x2F; TO_BASE64</td><td>BASE64解码&#x2F;编码</td></tr><tr><td>BIN &#x2F; OCT &#x2F; HEX</td><td>将数值转换成二进制&#x2F;八进制&#x2F;十六进制字符串</td></tr><tr><td>LOCATE</td><td>在字符串中查找一个子串的位置</td></tr><tr><td>LEFT &#x2F; RIGHT</td><td>返回一个字符串左边&#x2F;右边指定长度的字符</td></tr><tr><td>LENGTH &#x2F; CHAR_LENGTH</td><td>返回字符串的长度以字节&#x2F;字符为单位</td></tr><tr><td>LOWER &#x2F; UPPER</td><td>返回字符串的小写&#x2F;大写形式</td></tr><tr><td>LPAD &#x2F; RPAD</td><td>如果字符串的长度不足，在字符串左边&#x2F;右边填充指定的字符</td></tr><tr><td>LTRIM &#x2F; RTRIM</td><td>去掉字符串前面&#x2F;后面的空格</td></tr><tr><td>ORD &#x2F; CHAR</td><td>返回字符对应的编码&#x2F;返回编码对应的字符</td></tr><tr><td>STRCMP</td><td>比较字符串，返回-1、0、1分别表示小于、等于、大于</td></tr><tr><td>SUBSTRING</td><td>返回字符串指定范围的子串</td></tr></tbody></table><p>常用数值函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS</td><td>返回一个数的绝度值</td></tr><tr><td>CEILING &#x2F; FLOOR</td><td>返回一个数上取整&#x2F;下取整的结果</td></tr><tr><td>CONV</td><td>将一个数从一种进制转换成另一种进制</td></tr><tr><td>CRC32</td><td>计算循环冗余校验码</td></tr><tr><td>EXP &#x2F; LOG &#x2F; LOG2 &#x2F; LOG10</td><td>计算指数&#x2F;对数</td></tr><tr><td>POW</td><td>求幂</td></tr><tr><td>RAND</td><td>返回[0,1)范围的随机数</td></tr><tr><td>ROUND</td><td>返回一个数四舍五入后的结果</td></tr><tr><td>SQRT</td><td>返回一个数的平方根</td></tr><tr><td>TRUNCATE</td><td>截断一个数到指定的精度</td></tr><tr><td>SIN &#x2F; COS &#x2F; TAN &#x2F; COT &#x2F; ASIN &#x2F; ACOS &#x2F; ATAN</td><td>三角函数</td></tr></tbody></table><p>常用时间日期函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE &#x2F; CURTIME &#x2F; NOW</td><td>获取当前日期&#x2F;时间&#x2F;日期和时间</td></tr><tr><td>ADDDATE &#x2F; SUBDATE</td><td>将两个日期表达式相加&#x2F;相减并返回结果</td></tr><tr><td>DATE &#x2F; TIME</td><td>从字符串中获取日期&#x2F;时间</td></tr><tr><td>YEAR &#x2F; MONTH &#x2F; DAY</td><td>从日期中获取年&#x2F;月&#x2F;日</td></tr><tr><td>HOUR &#x2F; MINUTE &#x2F; SECOND</td><td>从时间中获取时&#x2F;分&#x2F;秒</td></tr><tr><td>DATEDIFF &#x2F; TIMEDIFF</td><td>返回两个时间日期表达式相差多少天&#x2F;小时</td></tr><tr><td>MAKEDATE &#x2F; MAKETIME</td><td>制造一个日期&#x2F;时间</td></tr></tbody></table><p>常用流程函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF</td><td>根据条件是否成立返回不同的值</td></tr><tr><td>IFNULL</td><td>如果为NULL则返回指定的值否则就返回本身</td></tr><tr><td>NULLIF</td><td>两个表达式相等就返回NULL否则返回第一个表达式的值</td></tr></tbody></table><p>其他常用函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>MD5 &#x2F; SHA1 &#x2F; SHA2</td><td>返回字符串对应的哈希摘要</td></tr><tr><td>CHARSET &#x2F; COLLATION</td><td>返回字符集&#x2F;校对规则</td></tr><tr><td>USER &#x2F; CURRENT_USER</td><td>返回当前用户</td></tr><tr><td>DATABASE</td><td>返回当前数据库名</td></tr><tr><td>VERSION</td><td>返回当前数据库版本</td></tr><tr><td>FOUND_ROWS &#x2F; ROW_COUNT</td><td>返回查询到的行数&#x2F;受影响的行数</td></tr><tr><td>LAST_INSERT_ID</td><td>返回最后一个自增主键的值</td></tr><tr><td>UUID &#x2F; UUID_SHORT</td><td>返回全局唯一标识符</td></tr></tbody></table></li></ol></li><li><p>DCL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建可以远程登录的root账号并为其指定口令</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建名为hellokitty的用户并为其指定口令</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;hellokitty&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将对school数据库所有对象的所有操作权限授予hellokitty</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> school.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;hellokitty&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 召回hellokitty对school数据库所有对象的insert/delete/update权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span>, <span class="keyword">delete</span>, <span class="keyword">update</span> <span class="keyword">on</span> school.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;hellokitty&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：创建一个可以允许任意主机登录并且具有超级管理员权限的用户在现实中并不是一个明智的决定，因为一旦该账号的口令泄露或者被破解，数据库将会面临灾难级的风险。</p></blockquote></li></ol><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是意见多么可怕的事情（我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置）。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分的篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。</p><p>MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。</p><p>接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品道理是一样的。我们可以使用MySQL的<code>explain</code>关键字来查看SQL的执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname<span class="operator">=</span><span class="string">&#x27;林震南&#x27;</span>\G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tb_student</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 11</span><br><span class="line">     filtered: 10.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>在上面的SQL执行计划中，有几项值得我们关注：</p><ol><li>type：MySQL在表中找到满足条件的行的方式，也称为访问类型，包括：ALL（全表扫描）、index（索引全扫描）、range（索引范围扫描）、ref（非唯一索引扫描）、eq_ref（唯一索引扫描）、const&#x2F;system、NULL。在所有的访问类型中，很显然ALL是性能最差的，它代表了全表扫描是指要扫描表中的每一行才能找到匹配的行。</li><li>possible_keys：MySQL可以选择的索引，但是<strong>有可能不会使用</strong>。</li><li>key：MySQL真正使用的索引。</li><li>rows：执行查询需要扫描的行数，这是一个<strong>预估值</strong>。</li></ol><p>从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_student_name <span class="keyword">on</span> tb_student(stuname);</span><br></pre></td></tr></table></figure><p>再次查看刚才的SQL对应的执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname<span class="operator">=</span><span class="string">&#x27;林震南&#x27;</span>\G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tb_student</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: idx_student_name</span><br><span class="line">          key: idx_student_name</span><br><span class="line">      key_len: 62</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，<strong>时间和空间是不可调和的矛盾</strong>），如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_student_name_1 <span class="keyword">on</span> tb_student(stuname(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看SQL执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student <span class="keyword">where</span> stuname<span class="operator">=</span><span class="string">&#x27;林震南&#x27;</span>\G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tb_student</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: idx_student_name</span><br><span class="line">          key: idx_student_name</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。</p><p>如果要删除索引，可以使用下面的SQL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_student <span class="keyword">drop</span> index idx_student_name;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_student_name <span class="keyword">on</span> tb_student;</span><br></pre></td></tr></table></figure><p>我们简单的为大家总结一下索引的设计原则：</p><ol><li><strong>最适合</strong>索引的列是出现在<strong>WHERE子句</strong>和连接子句中的列。</li><li>索引列的基数越大（取值多重复值少），索引的效果就越好。</li><li>使用<strong>前缀索引</strong>可以减少索引占用的空间，内存中可以缓存更多的索引。</li><li><strong>索引不是越多越好</strong>，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。</li><li>使用InnoDB存储引擎时，表的普通索引都会保存主键的值，所以<strong>主键要尽可能选择较短的数据类型</strong>，这样可以有效的减少索引占用的空间，利用提升索引的缓存效果。</li></ol><p>最后，还有一点需要说明，InnoDB使用的B-tree索引，数值类型的列除了等值判断时索引会生效之外，使用&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、BETWEEN…AND… 、&lt;&gt;时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。</p><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。</p><p>使用视图可以获得以下好处：</p><ol><li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li><li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li><li>重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li><li>视图可以返回与实体数据表不同格式的数据，</li></ol><p>创建视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_avg_score </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">    <span class="keyword">select</span> sid, round(<span class="built_in">avg</span>(score), <span class="number">1</span>) <span class="keyword">as</span> avgscore </span><br><span class="line">    <span class="keyword">from</span> tb_record <span class="keyword">group</span> <span class="keyword">by</span> sid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_student_score </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">    <span class="keyword">select</span> stuname, avgscore </span><br><span class="line">    <span class="keyword">from</span> tb_student, vw_avg_score </span><br><span class="line">    <span class="keyword">where</span> stuid<span class="operator">=</span>sid;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。</p></blockquote><p>使用视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stuname, avgscore <span class="keyword">from</span> vw_student_score <span class="keyword">order</span> <span class="keyword">by</span> avgscore <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+----------+</span><br><span class="line">| stuname      | avgscore |</span><br><span class="line">+--------------+----------+</span><br><span class="line">| 杨过         |     95.6 |</span><br><span class="line">| 任我行       |     53.5 |</span><br><span class="line">| 王语嫣       |     84.3 |</span><br><span class="line">| 纪嫣然       |     73.8 |</span><br><span class="line">| 岳不群       |     78.0 |</span><br><span class="line">| 东方不败     |     88.0 |</span><br><span class="line">| 项少龙       |     92.0 |</span><br><span class="line">+--------------+----------+</span><br></pre></td></tr></table></figure><p>既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的：</p><ol><li>使用了聚合函数（SUM、MIN、MAX、AVG、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL的视图。</li><li>SELECT中包含了子查询的视图。</li><li>FROM子句中包含了一个不能更新的视图的视图。</li><li>WHERE子句的子查询引用了FROM子句中的表的视图。</li></ol><p>删除视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> vw_student_score;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：如果希望更新视图，可以先用上面的命令删除视图，也可以通过<code>create or replace view</code>来更新视图。</p></blockquote><p>视图的规则和限制。</p><ol><li>视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。</li><li>创建视图时可以使用<code>order by</code>子句，但如果从视图中检索数据时也使用了<code>order by</code>，那么该视图中原先的<code>order by</code>会被覆盖。</li><li>视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。</li></ol><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>存储过程是事先编译好存储在数据库中的一组SQL的集合，调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的SQL语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条SQL语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。 </p><ol><li>通过查询来核对库存中是否有对应的物品以及库存是否充足。</li><li>如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。</li><li>如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。 </li><li>不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。</li></ol><p>我们可以通过存储过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改存储过程即可。对于调用存储过程的用户来说，存储过程并没有暴露数据表的细节，而且执行存储过程比一条条的执行一组SQL要快得多。</p><p>下面的存储过程实现了查询某门课程的最高分、最低分和平均分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> sp_score_by_cid;</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp_score_by_cid(</span><br><span class="line">courseId <span class="type">int</span>, </span><br><span class="line"><span class="keyword">out</span> maxScore <span class="type">decimal</span>(<span class="number">4</span>,<span class="number">1</span>), </span><br><span class="line"><span class="keyword">out</span> minScore <span class="type">decimal</span>(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line"><span class="keyword">out</span> avgScore <span class="type">decimal</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(score) <span class="keyword">into</span> maxScore <span class="keyword">from</span> tb_record </span><br><span class="line"><span class="keyword">where</span> cid<span class="operator">=</span>courseId;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(score) <span class="keyword">into</span> minScore <span class="keyword">from</span> tb_record </span><br><span class="line"><span class="keyword">where</span> cid<span class="operator">=</span>courseId;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(score) <span class="keyword">into</span> avgScore <span class="keyword">from</span> tb_record </span><br><span class="line"><span class="keyword">where</span> cid<span class="operator">=</span>courseId;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> sp_score_by_cid(<span class="number">1111</span>, <span class="variable">@a</span>, <span class="variable">@b</span>, <span class="variable">@c</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>, <span class="variable">@b</span>, <span class="variable">@c</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：在定义存储过程时，因为可能需要书写多条SQL，而分隔这些SQL需要使用分号作为分隔符，如果这个时候，仍然用分号表示整段代码结束，那么定义存储过程的SQL就会出现错误，所以上面我们用<code>delimiter $$</code>将整段代码结束的标记定义为<code>$$</code>，那么代码中的分号将不再表示整段代码的结束，需要马上执行，整段代码在遇到<code>end $$</code>时才输入完成并执行。在定义完存储过程后，通过<code>delimiter ;</code>将结束符重新改回成分号。</p></blockquote><p>上面定义的存储过程有四个参数，其中第一个参数是输入参数，代表课程的编号，后面的参数都是输出参数，因为存储过程不能定义返回值，只能通过输出参数将执行结果带出，定义输出参数的关键字是<code>out</code>，默认情况下参数都是输入参数。</p><p>调用存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> sp_score_by_cid(<span class="number">1111</span>, <span class="variable">@a</span>, <span class="variable">@b</span>, <span class="variable">@c</span>);</span><br></pre></td></tr></table></figure><p>获取输出参数的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@a</span> <span class="keyword">as</span> 最高分, <span class="variable">@b</span> <span class="keyword">as</span> 最低分, <span class="variable">@c</span> <span class="keyword">as</span> 平均分;</span><br></pre></td></tr></table></figure><p>删除存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> sp_score_by_cid;</span><br></pre></td></tr></table></figure><p>在存储过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多存储过程的好处，但是在实际开发中，如果过度的使用存储过程，将大量复杂的运算放到存储过程中，也会导致占用数据库服务器的CPU资源，造成数据库服务器承受巨大的压力。为此，我们一般会将复杂的运算和处理交给应用服务器，因为很容易部署多台应用服务器来分摊这些压力。</p><h3 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h3><h4 id="范式理论-设计二维表的指导思想"><a href="#范式理论-设计二维表的指导思想" class="headerlink" title="范式理论 - 设计二维表的指导思想"></a>范式理论 - 设计二维表的指导思想</h4><ol><li>第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。</li><li>第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。</li><li>第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。</li></ol><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><ol><li><p>实体完整性 - 每个实体都是独一无二的</p><ul><li>主键（primary key） &#x2F; 唯一约束 &#x2F; 唯一索引（unique）</li></ul></li><li><p>引用完整性（参照完整性）- 关系中不允许引用不存在的实体</p><ul><li>外键（foreign key）</li></ul></li><li><p>域完整性 - 数据是有效的</p><ul><li><p>数据类型及长度</p></li><li><p>非空约束（not null）</p></li><li><p>默认值约束（default）</p></li><li><p>检查约束（check）</p><blockquote><p>说明：在MySQL数据库中，检查约束并不起作用。</p></blockquote></li></ul></li></ol><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><ol><li><p>事务：一系列对数据库进行读&#x2F;写的操作，这些操作要么全都成功，要么全都失败。</p></li><li><p>事务的ACID特性</p><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul></li><li><p>MySQL中的事务操作</p><ul><li><p>开启事务环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><p>大家应该能够想到，关于MySQL的知识肯定远远不止上面列出的这些，比如MySQL的性能优化、管理和维护MySQL的相关工具、MySQL数据的备份和恢复、监控MySQL、部署高可用架构等问题我们在这里都没有进行讨论。当然，这些内容也都是跟项目开发密切相关的，我们就留到后续的章节中再续点进行讲解。</p><h3 id="Python数据库编程"><a href="#Python数据库编程" class="headerlink" title="Python数据库编程"></a>Python数据库编程</h3><p>我们用如下所示的数据库来演示在Python中如何访问MySQL数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> hrs;</span><br><span class="line"><span class="keyword">create</span> database hrs <span class="keyword">default</span> charset utf8;</span><br><span class="line"></span><br><span class="line">use hrs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_emp;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_dept</span><br><span class="line">(</span><br><span class="line">dno   <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">dname <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">dloc  <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;所在地&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (dno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_dept <span class="keyword">values</span> </span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;会计部&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;研发部&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>),</span><br><span class="line">(<span class="number">30</span>, <span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>),</span><br><span class="line">(<span class="number">40</span>, <span class="string">&#x27;运维部&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_emp</span><br><span class="line">(</span><br><span class="line">eno   <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;员工编号&#x27;</span>,</span><br><span class="line">ename <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;员工姓名&#x27;</span>,</span><br><span class="line">job   <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;员工职位&#x27;</span>,</span><br><span class="line">mgr   <span class="type">int</span> comment <span class="string">&#x27;主管编号&#x27;</span>,</span><br><span class="line">sal   <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;员工月薪&#x27;</span>,</span><br><span class="line">comm  <span class="type">int</span> comment <span class="string">&#x27;每月补贴&#x27;</span>,</span><br><span class="line">dno   <span class="type">int</span> comment <span class="string">&#x27;所在部门编号&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (eno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dno <span class="keyword">foreign</span> key (dno) <span class="keyword">references</span> tb_dept (dno);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_emp <span class="keyword">values</span> </span><br><span class="line">(<span class="number">7800</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;总裁&#x27;</span>, <span class="keyword">null</span>, <span class="number">9000</span>, <span class="number">1200</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">2056</span>, <span class="string">&#x27;乔峰&#x27;</span>, <span class="string">&#x27;分析师&#x27;</span>, <span class="number">7800</span>, <span class="number">5000</span>, <span class="number">1500</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3088</span>, <span class="string">&#x27;李莫愁&#x27;</span>, <span class="string">&#x27;设计师&#x27;</span>, <span class="number">2056</span>, <span class="number">3500</span>, <span class="number">800</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3211</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="number">2056</span>, <span class="number">3200</span>, <span class="keyword">null</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3233</span>, <span class="string">&#x27;丘处机&#x27;</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="number">2056</span>, <span class="number">3400</span>, <span class="keyword">null</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3251</span>, <span class="string">&#x27;张翠山&#x27;</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="number">2056</span>, <span class="number">4000</span>, <span class="keyword">null</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">5566</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="string">&#x27;会计师&#x27;</span>, <span class="number">7800</span>, <span class="number">4000</span>, <span class="number">1000</span>, <span class="number">10</span>),</span><br><span class="line">(<span class="number">5234</span>, <span class="string">&#x27;郭靖&#x27;</span>, <span class="string">&#x27;出纳&#x27;</span>, <span class="number">5566</span>, <span class="number">2000</span>, <span class="keyword">null</span>, <span class="number">10</span>),</span><br><span class="line">(<span class="number">3344</span>, <span class="string">&#x27;黄蓉&#x27;</span>, <span class="string">&#x27;销售主管&#x27;</span>, <span class="number">7800</span>, <span class="number">3000</span>, <span class="number">800</span>, <span class="number">30</span>),</span><br><span class="line">(<span class="number">1359</span>, <span class="string">&#x27;胡一刀&#x27;</span>, <span class="string">&#x27;销售员&#x27;</span>, <span class="number">3344</span>, <span class="number">1800</span>, <span class="number">200</span>, <span class="number">30</span>),</span><br><span class="line">(<span class="number">4466</span>, <span class="string">&#x27;苗人凤&#x27;</span>, <span class="string">&#x27;销售员&#x27;</span>, <span class="number">3344</span>, <span class="number">2500</span>, <span class="keyword">null</span>, <span class="number">30</span>),</span><br><span class="line">(<span class="number">3244</span>, <span class="string">&#x27;欧阳锋&#x27;</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="number">3088</span>, <span class="number">3200</span>, <span class="keyword">null</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3577</span>, <span class="string">&#x27;杨过&#x27;</span>, <span class="string">&#x27;会计&#x27;</span>, <span class="number">5566</span>, <span class="number">2200</span>, <span class="keyword">null</span>, <span class="number">10</span>),</span><br><span class="line">(<span class="number">3588</span>, <span class="string">&#x27;朱九真&#x27;</span>, <span class="string">&#x27;会计&#x27;</span>, <span class="number">5566</span>, <span class="number">2500</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>在Python 3中，我们通常使用纯Python的三方库PyMySQL来访问MySQL数据库，它应该是目前Python操作MySQL数据库最好的选择。</p><ol><li><p>安装PyMySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></li><li><p>添加一个部门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    no = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;编号: &#x27;</span>))</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;名字: &#x27;</span>)</span><br><span class="line">    loc = <span class="built_in">input</span>(<span class="string">&#x27;所在地: &#x27;</span>)</span><br><span class="line">    <span class="comment"># 1. 创建数据库连接对象</span></span><br><span class="line">    con = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">                          database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                          user=<span class="string">&#x27;yourname&#x27;</span>, password=<span class="string">&#x27;yourpass&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 2. 通过连接对象获取游标</span></span><br><span class="line">        <span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 3. 通过游标执行SQL并获得执行结果</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">&#x27;insert into tb_dept values (%s, %s, %s)&#x27;</span>,</span><br><span class="line">                (no, name, loc)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;添加成功!&#x27;</span>)</span><br><span class="line">        <span class="comment"># 4. 操作成功提交事务</span></span><br><span class="line">        con.commit()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 5. 关闭连接释放资源</span></span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>删除一个部门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    no = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;编号: &#x27;</span>))</span><br><span class="line">    con = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">                          database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                          user=<span class="string">&#x27;yourname&#x27;</span>, password=<span class="string">&#x27;yourpass&#x27;</span>,</span><br><span class="line">                          autocommit=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">&#x27;delete from tb_dept where dno=%s&#x27;</span>,</span><br><span class="line">                (no, )</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;删除成功!&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：如果不希望每次SQL操作之后手动提交或回滚事务，可以像上面的代码那样，在创建连接的时候多加一个名为<code>autocommit</code>的参数并将它的值设置为<code>True</code>，表示每次执行SQL之后自动提交。如果程序中不需要使用事务环境也不希望手动的提交或回滚就可以这么做。</p></blockquote></li><li><p>更新一个部门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    no = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;编号: &#x27;</span>))</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;名字: &#x27;</span>)</span><br><span class="line">    loc = <span class="built_in">input</span>(<span class="string">&#x27;所在地: &#x27;</span>)</span><br><span class="line">    con = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">                          database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                          user=<span class="string">&#x27;yourname&#x27;</span>, password=<span class="string">&#x27;yourpass&#x27;</span>,</span><br><span class="line">                          autocommit=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">&#x27;update tb_dept set dname=%s, dloc=%s where dno=%s&#x27;</span>,</span><br><span class="line">                (name, loc, no)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;更新成功!&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>查询所有部门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> pymysql.cursors <span class="keyword">import</span> DictCursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    con = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">                          database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                          user=<span class="string">&#x27;yourname&#x27;</span>, password=<span class="string">&#x27;yourpass&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> con.cursor(cursor=DictCursor) <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">&#x27;select dno as no, dname as name, dloc as loc from tb_dept&#x27;</span>)</span><br><span class="line">            results = cursor.fetchall()</span><br><span class="line">            <span class="built_in">print</span>(results)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;编号\t名称\t\t所在地&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> dept <span class="keyword">in</span> results:</span><br><span class="line">                <span class="built_in">print</span>(dept[<span class="string">&#x27;no&#x27;</span>], end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(dept[<span class="string">&#x27;name&#x27;</span>], end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(dept[<span class="string">&#x27;loc&#x27;</span>])</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>分页查询员工信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> pymysql.cursors <span class="keyword">import</span> DictCursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, no, name, job, sal</span>):</span><br><span class="line">        <span class="variable language_">self</span>.no = no</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.job = job</span><br><span class="line">        <span class="variable language_">self</span>.sal = sal</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;\n编号：<span class="subst">&#123;self.no&#125;</span>\n姓名：<span class="subst">&#123;self.name&#125;</span>\n职位：<span class="subst">&#123;self.job&#125;</span>\n月薪：<span class="subst">&#123;self.sal&#125;</span>\n&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;页码: &#x27;</span>))</span><br><span class="line">    size = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;大小: &#x27;</span>))</span><br><span class="line">    con = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">                          database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                          user=<span class="string">&#x27;yourname&#x27;</span>, password=<span class="string">&#x27;yourpass&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(</span><br><span class="line">                <span class="string">&#x27;select eno as no, ename as name, job, sal from tb_emp limit %s,%s&#x27;</span>,</span><br><span class="line">                ((page - <span class="number">1</span>) * size, size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> emp_tuple <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">                emp = Emp(*emp_tuple)</span><br><span class="line">                <span class="built_in">print</span>(emp)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ol><h2 id="NoSQL入门"><a href="#NoSQL入门" class="headerlink" title="NoSQL入门"></a>NoSQL入门</h2><h3 id="NoSQL概述"><a href="#NoSQL概述" class="headerlink" title="NoSQL概述"></a>NoSQL概述</h3><p>如今，大多数的计算机系统（包括服务器、PC、移动设备等）都会产生庞大的数据量。其实，早在2012年的时候，全世界每天产生的数据量就达到了2.5EB（艾字节，$$1EB\approx10^{18}B$$）。这些数据有很大一部分是由关系型数据库来存储和管理的。 早在1970年，E.F.Codd发表了论述关系型数据库的著名论文“<em>A relational model of data for large shared data banks</em>”，这篇文章奠定了关系型数据库的基础并在接下来的数十年时间内产生了深远的影响。实践证明，关系型数据库是实现数据持久化最为重要的方式，它也是大多数应用在选择持久化方案时的首选技术。</p><p>NoSQL是一项全新的数据库革命性运动，虽然它的历史可以追溯到1998年，但是NoSQL真正深入人心并得到广泛的应用是在进入大数据时候以后，业界普遍认为NoSQL是更适合大数据存储的技术方案，这才使得NoSQL的发展达到了前所未有的高度。2012年《纽约时报》的一篇专栏中写到，大数据时代已经降临，在商业、经济及其他领域中，决策将不再基于经验和直觉而是基于数据和分析而作出。事实上，在天文学、气象学、基因组学、生物学、社会学、互联网搜索引擎、金融、医疗、社交网络、电子商务等诸多领域，由于数据过于密集和庞大，在数据的分析和处理上也遇到了前所未有的限制和阻碍，这一切都使得对大数据处理技术的研究被提升到了新的高度，也使得各种NoSQL的技术方案进入到了公众的视野。</p><p>NoSQL数据库按照其存储类型可以大致分为以下几类：</p><table><thead><tr><th>类型</th><th>部分代表</th><th>特点</th></tr></thead><tbody><tr><td>列族数据库</td><td>HBase<br>Cassandra<br>Hypertable</td><td>顾名思义是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的I&#x2F;O优势，适合于批量数据处理和即时查询。</td></tr><tr><td>文档数据库</td><td>MongoDB<br>CouchDB<br>ElasticSearch</td><td>文档数据库一般用类JSON格式存储数据，存储的内容是文档型的。这样也就有机会对某些字段建立索引，实现关系数据库的某些功能，但不提供对参照完整性和分布事务的支持。</td></tr><tr><td>KV数据库</td><td>DynamoDB<br>Redis<br>LevelDB</td><td>可以通过key快速查询到其value，有基于内存和基于磁盘两种实现方案。</td></tr><tr><td>图数据库</td><td>Neo4J<br>FlockDB<br>JanusGraph</td><td>使用图结构进行语义查询的数据库，它使用节点、边和属性来表示和存储数据。图数据库从设计上，就可以简单快速的检索难以在关系系统中建模的复杂层次结构。</td></tr><tr><td>对象数据库</td><td>db4o<br>Versant</td><td>通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。</td></tr></tbody></table><blockquote><p>说明：想了解更多的NoSQL数据库，可以访问<a href="http://nosql-database.org/">http://nosql-database.org/</a>。</p></blockquote><h3 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h3><p>Redis是一种基于键值对的NoSQL数据库，它提供了对多种数据类型（字符串、哈希、列表、集合、有序集合、位图等）的支持，能够满足很多应用场景的需求。Redis将数据放在内存中，因此读写性能是非常惊人的。与此同时，Redis也提供了持久化机制，能够将内存中的数据保存到硬盘上，在发生意外状况时数据也不会丢掉。此外，Redis还支持键过期、地理信息运算、发布订阅、事务、管道、Lua脚本扩展等功能，总而言之，Redis的功能和性能都非常强大，如果项目中要实现高速缓存和消息队列这样的服务，直接交给Redis就可以了。目前，国内外很多著名的企业和商业项目都使用了Redis，包括：Twitter、Github、StackOverflow、新浪微博、百度、优酷土豆、美团、小米、唯品会等。</p><h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><p>2008年，一个名为Salvatore Sanfilippo的程序员为他开发的LLOOGG项目定制了专属的数据库（因为之前他无论怎样优化MySQL，系统性能已经无法再提升了），这项工作的成果就是Redis的初始版本。后来他将Redis的代码放到了全球最大的代码托管平台<a href="https://github.com/antirez/redis">Github</a>，从那以后，Redis引发了大量开发者的好评和关注，继而有数百人参与了Redis的开发和维护，这使得Redis的功能越来越强大和性能越来越好。</p><p>Redis是REmote DIctionary Server的缩写，它是一个用ANSI C编写的高性能的key-value存储系统，与其他的key-value存储系统相比，Redis有以下一些特点（也是优点）：</p><ul><li>Redis的读写性能极高，并且有丰富的特性（发布&#x2F;订阅、事务、通知等）。</li><li>Redis支持数据的持久化（RDB和AOF两种方式），可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis支持多种数据类型，包括：string、hash、list、set，zset、bitmap、hyperloglog等。</li><li>Redis支持主从复制（实现读写分析）以及哨兵模式（监控master是否宕机并自动调整配置）。</li><li>Redis支持分布式集群，可以很容易的通过水平扩展来提升系统的整体性能。</li><li>Redis基于TCP提供的可靠传输服务进行通信，很多编程语言都提供了Redis客户端支持。</li></ul><h4 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h4><ol><li>高速缓存  - 将不常变化但又经常被访问的热点数据放到Redis数据库中，可以大大降低关系型数据库的压力，从而提升系统的响应性能。</li><li>排行榜 - 很多网站都有排行榜功能，利用Redis中的列表和有序集合可以非常方便的构造各种排行榜系统。</li><li>商品秒杀&#x2F;投票点赞 - Redis提供了对计数操作的支持，网站上常见的秒杀、点赞等功能都可以利用Redis的计数器通过+1或-1的操作来实现，从而避免了使用关系型数据的<code>update</code>操作。</li><li>分布式锁 - 利用Redis可以跨多台服务器实现分布式锁（类似于线程锁，但是能够被多台机器上的多个线程或进程共享）的功能，用于实现一个阻塞式操作。</li><li>消息队列 - 消息队列和高速缓存一样，是一个大型网站不可缺少的基础服务，可以实现业务解耦和非实时业务削峰等特性，这些我们都会在后面的项目中为大家展示。</li></ol><h4 id="Redis的安装和配置"><a href="#Redis的安装和配置" class="headerlink" title="Redis的安装和配置"></a>Redis的安装和配置</h4><p>可以使用Linux系统的包管理工具（如yum）来安装Redis，也可以通过在Redis的<a href="https://redis.io/">官方网站</a>下载Redis的源代码，解压缩解归档之后通过make工具对源代码进行构建并安装，在更新这篇文档时，Redis官方提供的最新稳定版本是<a href="http://download.redis.io/releases/redis-5.0.4.tar.gz">Redis 5.0.4</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.4.tar.gz</span><br><span class="line">gunzip redis-5.0.4.tar.gz</span><br><span class="line">tar -xvf redis-5.0.4.tar</span><br><span class="line">cd redis-5.0.4</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在redis源代码目录下有一个名为redis.conf的配置文件，我们可以先查看一下该文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>配置将Redis服务绑定到指定的IP地址和端口。<br>配置底层有多少个数据库。<br>配置Redis的持久化机制 - RDB。<br>配置Redis的持久化机制 - AOF。<br>配置访问Redis服务器的验证口令。<br>配置Redis的主从复制，通过主从复制可以实现读写分离。<br>配置慢查询。</p><p>上面这些内容就是Redis的基本配置，如果你对上面的内容感到困惑也没有关系，先把Redis用起来再回头去推敲这些内容就行了。如果想找一些参考书，<a href="https://item.jd.com/12121730.html">《Redis开发与运维》</a>是一本不错的入门读物，而<a href="https://item.jd.com/11791607.html">《Redis实战》</a>是不错的进阶读物。</p><h4 id="Redis的服务器和客户端"><a href="#Redis的服务器和客户端" class="headerlink" title="Redis的服务器和客户端"></a>Redis的服务器和客户端</h4><p>接下来启动Redis服务器，下面的方式将以默认的配置启动Redis服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如果希望修改Redis的配置（如端口、认证口令、持久化方式等），可以通过下面两种方式。</p><p>方式一：通过参数指定认证口令和AOF持久化方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --requirepass yourpass --appendonly yes</span><br></pre></td></tr></table></figure><p>方式二：通过指定的配置文件来修改Redis的配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /root/redis-5.0.4/redis.conf</span><br></pre></td></tr></table></figure><p>下面我们使用第一种方式来启动Redis并将其置于后台运行，将Redis产生的输出重定向到名为redis.log的文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --requirepass yourpass &gt; redis.log &amp;</span><br></pre></td></tr></table></figure><p>可以通过ps或者netstat来检查Redis服务器是否启动成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis-server</span><br><span class="line">netstat -nap | grep redis-server</span><br></pre></td></tr></table></figure><p>接下来，我们尝试用Redis客户端去连接服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth yourpass</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>Redis有着非常丰富的数据类型，也有很多的命令来操作这些数据，具体的内容可以查看<a href="http://redisdoc.com/">Redis命令参考</a>，在这个网站上，除了Redis的命令参考，还有Redis的详细文档，其中包括了通知、事务、主从复制、持久化、哨兵、集群等内容。</p><p><img src="/memoirs/./res/redis-data-types.png"></p><blockquote><p>说明：上面的插图来自付磊和张益军先生编著的《Redis开发与运维》一书。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set username admin</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get username</span><br><span class="line">&quot;admin&quot;</span><br><span class="line">127.0.0.1:6379&gt; set password &quot;123456&quot; ex 300</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get password</span><br><span class="line">&quot;123456&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl username</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; ttl password</span><br><span class="line">(integer) 286</span><br><span class="line">127.0.0.1:6379&gt; hset stu1 name hao</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hset stu1 age 38</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset stu1 gender male</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall stu1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;hao&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;38&quot;</span><br><span class="line">5) &quot;gender&quot;</span><br><span class="line">6) &quot;male&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals stu1</span><br><span class="line">1) &quot;hao&quot;</span><br><span class="line">2) &quot;38&quot;</span><br><span class="line">3) &quot;male&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmset stu2 name wang age 18 gender female tel 13566778899</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall stu2</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;wang&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br><span class="line">5) &quot;gender&quot;</span><br><span class="line">6) &quot;female&quot;</span><br><span class="line">7) &quot;tel&quot;</span><br><span class="line">8) &quot;13566778899&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpush nums 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop nums</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop nums</span><br><span class="line">&quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop nums</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop nums</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; sadd fruits apple banana orange apple grape grape</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; scard fruits</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers fruits</span><br><span class="line">1) &quot;grape&quot;</span><br><span class="line">2) &quot;orange&quot;</span><br><span class="line">3) &quot;banana&quot;</span><br><span class="line">4) &quot;apple&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember fruits apple</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember fruits durian</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; sadd nums1 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd nums2 2 4 6 8</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sinter nums1 nums2</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; sunion nums1 nums2</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff nums1 nums2</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd topsinger 5234 zhangxy 1978 chenyx 2235 zhoujl 3520 xuezq</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; zrange topsinger 0 -1 withscores</span><br><span class="line">1) &quot;chenyx&quot;</span><br><span class="line">2) &quot;1978&quot;</span><br><span class="line">3) &quot;zhoujl&quot;</span><br><span class="line">4) &quot;2235&quot;</span><br><span class="line">5) &quot;xuezq&quot;</span><br><span class="line">6) &quot;3520&quot;</span><br><span class="line">7) &quot;zhangxy&quot;</span><br><span class="line">8) &quot;5234&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrange topsinger 0 -1</span><br><span class="line">1) &quot;zhangxy&quot;</span><br><span class="line">2) &quot;xuezq&quot;</span><br><span class="line">3) &quot;zhoujl&quot;</span><br><span class="line">4) &quot;chenyx&quot;</span><br><span class="line">127.0.0.1:6379&gt; geoadd pois 116.39738549206541 39.90862689286386 tiananmen 116.27172936413572 39.99</span><br><span class="line">135172904494 yiheyuan 117.27766503308104 40.65332064313784 gubeishuizhen</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; geodist pois tiananmen gubeishuizhen km</span><br><span class="line">&quot;111.5333&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist pois tiananmen yiheyuan km</span><br><span class="line">&quot;14.1230&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadius pois 116.86499108288572 40.40149669363615 50 km withdist</span><br><span class="line">1) 1) &quot;gubeishuizhen&quot;</span><br><span class="line">   2) &quot;44.7408&quot;</span><br></pre></td></tr></table></figure><h4 id="在Python程序中使用Redis"><a href="#在Python程序中使用Redis" class="headerlink" title="在Python程序中使用Redis"></a>在Python程序中使用Redis</h4><p>可以使用pip安装redis模块。redis模块的核心是名为Redis的类，该类的对象代表一个Redis客户端，通过该客户端可以向Redis服务器发送命令并获取执行的结果。上面我们在Redis客户端中使用的命令基本上就是Redis对象可以接收的消息，所以如果了解了Redis的命令就可以在Python中玩转Redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install redis</span><br><span class="line">python3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = redis.Redis(host=<span class="string">&#x27;1.2.3.4&#x27;</span>, port=<span class="number">6379</span>, password=<span class="string">&#x27;yourpass&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.<span class="built_in">set</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hset(<span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hao&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hset(<span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="number">38</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.keys(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">[<span class="string">b&#x27;username&#x27;</span>, <span class="string">b&#x27;student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;admin&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hgetall(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">&#123;<span class="string">b&#x27;name&#x27;</span>: <span class="string">b&#x27;hao&#x27;</span>, <span class="string">b&#x27;age&#x27;</span>: <span class="string">b&#x27;38&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="MongoDB概述"><a href="#MongoDB概述" class="headerlink" title="MongoDB概述"></a>MongoDB概述</h3><h4 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h4><p>MongoDB是2009年问世的一个面向文档的数据库管理系统，由C++语言编写，旨在为Web应用提供可扩展的高性能数据存储解决方案。虽然在划分类别的时候后，MongoDB被认为是NoSQL的产品，但是它更像一个介于关系数据库和非关系数据库之间的产品，在非关系数据库中它功能最丰富，最像关系数据库。</p><p>MongoDB将数据存储为一个文档，一个文档由一系列的“键值对”组成，其文档类似于JSON对象，但是MongoDB对JSON进行了二进制处理（能够更快的定位key和value），因此其文档的存储格式称为BSON。关于JSON和BSON的差别大家可以看看MongoDB官方网站的文章<a href="https://www.mongodb.com/json-and-bson">《JSON and BSON》</a>。</p><p>目前，MongoDB已经提供了对Windows、MacOS、Linux、Solaris等多个平台的支持，而且也提供了多种开发语言的驱动程序，Python当然是其中之一。</p><h4 id="MongoDB的安装和配置"><a href="#MongoDB的安装和配置" class="headerlink" title="MongoDB的安装和配置"></a>MongoDB的安装和配置</h4><p>可以从MongoDB的<a href="https://www.mongodb.com/download-center#community">官方下载链接</a>下载MongoDB，官方为Windows系统提供了一个Installer程序，而Linux和MacOS则提供了压缩文件。下面简单说一下Linux系统如何安装和配置MongoDB。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon-3.6.5.tgz</span><br><span class="line">gunzip mongodb-linux-x86_64-amazon-3.6.5.tgz</span><br><span class="line">mkdir mongodb-3.6.5</span><br><span class="line">tar -xvf mongodb-linux-x86_64-amazon-3.6.5.tar --strip-components 1 -C mongodb-3.6.5/</span><br><span class="line">export PATH=$PATH:~/mongodb-3.6.5/bin</span><br><span class="line">mkdir -p /data/db</span><br><span class="line">mongod --bind_ip 172.18.61.250</span><br><span class="line"></span><br><span class="line">2018-06-03T18:03:28.232+0800 I CONTROL  [initandlisten] MongoDB starting : pid=1163 port=27017 dbpath=/data/db 64-bit host=iZwz97tbgo9lkabnat2lo8Z</span><br><span class="line">2018-06-03T18:03:28.232+0800 I CONTROL  [initandlisten] db version v3.6.5</span><br><span class="line">2018-06-03T18:03:28.232+0800 I CONTROL  [initandlisten] git version: a20ecd3e3a174162052ff99913bc2ca9a839d618</span><br><span class="line">2018-06-03T18:03:28.232+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.0-fips29 Mar 2010</span><br><span class="line">...</span><br><span class="line">2018-06-03T18:03:28.945+0800 I NETWORK  [initandlisten] waiting for connections on port 27017</span><br></pre></td></tr></table></figure><blockquote><p>说明：上面的操作中，export命令是设置PATH环境变量，这样可以在任意路径下执行mongod来启动MongoDB服务器。MongoDB默认保存数据的路径是&#x2F;data&#x2F;db目录，为此要提前创建该目录。此外，在使用mongod启动MongoDB服务器时，–bind_ip参数用来将服务绑定到指定的IP地址，也可以用–port参数来指定端口，默认端口为27017。</p></blockquote><h4 id="MongoDB基本概念"><a href="#MongoDB基本概念" class="headerlink" title="MongoDB基本概念"></a>MongoDB基本概念</h4><p>我们通过与关系型数据库进行对照的方式来说明MongoDB中的一些概念。</p><table><thead><tr><th>SQL</th><th>MongoDB</th><th>解释（SQL&#x2F;MongoDB）</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库&#x2F;数据库</td></tr><tr><td>table</td><td>collection</td><td>二维表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>记录（行）&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>字段（列）&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引&#x2F;索引</td></tr><tr><td>table joins</td><td>—</td><td>表连接&#x2F;嵌套文档</td></tr><tr><td>primary key</td><td>primary key</td><td>主键&#x2F;主键（<code>_id</code>字段）</td></tr></tbody></table><h4 id="通过Shell操作MongoDB"><a href="#通过Shell操作MongoDB" class="headerlink" title="通过Shell操作MongoDB"></a>通过Shell操作MongoDB</h4><p>启动服务器后可以使用交互式环境跟服务器通信，如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongo --host 172.18.61.250</span><br><span class="line"></span><br><span class="line">MongoDB shell version v3.6.5</span><br><span class="line">connecting to: mongodb://172.18.61.250:27017/</span><br></pre></td></tr></table></figure><ol><li><p>查看、创建和删除数据库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 显示所有数据库</span></span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   <span class="number">0.</span>000GB</span><br><span class="line">config  <span class="number">0.</span>000GB</span><br><span class="line">local   <span class="number">0.</span>000GB</span><br><span class="line">&gt; <span class="comment">// 创建并切换到school数据库</span></span><br><span class="line">&gt; use school</span><br><span class="line">switched to db school</span><br><span class="line">&gt; <span class="comment">// 删除当前数据库</span></span><br><span class="line">&gt; db.<span class="title function_">dropDatabase</span>(<span class="params"></span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建、删除和查看集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 创建并切换到school数据库</span></span><br><span class="line">&gt; use school</span><br><span class="line">switched to db school</span><br><span class="line">&gt; <span class="comment">// 创建colleges集合</span></span><br><span class="line">&gt; db.<span class="title function_">createCollection</span>(<span class="params"><span class="string">&#x27;colleges&#x27;</span></span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 创建students集合</span></span><br><span class="line">&gt; db.<span class="title function_">createCollection</span>(<span class="params"><span class="string">&#x27;students&#x27;</span></span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 查看所有集合</span></span><br><span class="line">&gt; show collections</span><br><span class="line">colleges</span><br><span class="line">students</span><br><span class="line">&gt; <span class="comment">// 删除colleges集合</span></span><br><span class="line">&gt; db.<span class="property">colleges</span>.<span class="title function_">drop</span>()</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><blockquote><p>说明：在MongoDB中插入文档时如果集合不存在会自动创建集合，所以也可以按照下面的方式通过创建文档来创建集合。</p></blockquote></li><li><p>文档的CRUD操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 向students集合插入文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">insert</span>(&#123;<span class="attr">stuid</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="attr">age</span>: <span class="number">38</span>&#125;)</span><br><span class="line"><span class="title class_">WriteResult</span>(&#123; <span class="string">&quot;nInserted&quot;</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; <span class="comment">// 向students集合插入文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">save</span>(&#123;<span class="attr">stuid</span>: <span class="number">1002</span>, <span class="attr">name</span>: <span class="string">&#x27;王大锤&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;13012345678&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line"><span class="title class_">WriteResult</span>(&#123; <span class="string">&quot;nInserted&quot;</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; <span class="comment">// 查看所有文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>(<span class="params"></span>)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c72e006ad854460ee70b&quot;</span>), <span class="string">&quot;stuid&quot;</span> : <span class="number">1001</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;骆昊&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">38</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c790006ad854460ee70c&quot;</span>), <span class="string">&quot;stuid&quot;</span> : <span class="number">1002</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13012345678&quot;</span>, <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 更新stuid为1001的文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">update</span>(&#123;<span class="attr">stuid</span>: <span class="number">1001</span>&#125;, &#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="attr">tel</span>: <span class="string">&#x27;13566778899&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="title class_">WriteResult</span>(&#123; <span class="string">&quot;nMatched&quot;</span> : <span class="number">1</span>, <span class="string">&quot;nUpserted&quot;</span> : <span class="number">0</span>, <span class="string">&quot;nModified&quot;</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; <span class="comment">// 插入或更新stuid为1003的文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">update</span>(&#123;<span class="attr">stuid</span>: <span class="number">1003</span>&#125;, &#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;白元芳&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;13022223333&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;&#125;,  upsert=<span class="literal">true</span>)</span><br><span class="line"><span class="title class_">WriteResult</span>(&#123;</span><br><span class="line">        <span class="string">&quot;nMatched&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;nUpserted&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;nModified&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c92dd185894d7283efab&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&gt; <span class="comment">// 查询所有文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>().<span class="title function_">pretty</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c72e006ad854460ee70b&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1001</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;骆昊&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span> : <span class="number">38</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13566778899&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c790006ad854460ee70c&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1002</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13012345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c92dd185894d7283efab&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1003</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;白元芳&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13022223333&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="comment">// 查询stuid大于1001的文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="attr">stuid</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">1001</span>&#125;&#125;).<span class="title function_">pretty</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c790006ad854460ee70c&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1002</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13012345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c92dd185894d7283efab&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1003</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;白元芳&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13022223333&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="comment">// 查询stuid大于1001的文档只显示name和tel字段</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="attr">stuid</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">1001</span>&#125;&#125;, &#123;<span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">tel</span>: <span class="number">1</span>&#125;).<span class="title function_">pretty</span>(<span class="params"></span>)</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13012345678&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;白元芳&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13022223333&quot;</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 查询name为“骆昊”或者tel为“13022223333”的文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;$or&#x27;</span>: [&#123;<span class="attr">name</span>: <span class="string">&#x27;骆昊&#x27;</span>&#125;, &#123;<span class="attr">tel</span>: <span class="string">&#x27;13022223333&#x27;</span>&#125;]&#125;, &#123;<span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">tel</span>: <span class="number">1</span>&#125;).<span class="title function_">pretty</span>(<span class="params"></span>)</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;骆昊&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13566778899&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;白元芳&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13022223333&quot;</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 查询学生文档跳过第1条文档只查1条文档</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>().<span class="title function_">skip</span>(<span class="number">1</span>).<span class="title function_">limit</span>(<span class="number">1</span>).<span class="title function_">pretty</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5b13c790006ad854460ee70c&quot;</span>),</span><br><span class="line">        <span class="string">&quot;stuid&quot;</span> : <span class="number">1002</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;13012345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="comment">// 对查询结果进行排序(1表示升序，-1表示降序)</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;&#125;, &#123;<span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">stuid</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>&#125;).<span class="title function_">sort</span>(<span class="params">&#123;stuid: -<span class="number">1</span>&#125;</span>)</span><br><span class="line">&#123; <span class="string">&quot;stuid&quot;</span> : <span class="number">1003</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;白元芳&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;stuid&quot;</span> : <span class="number">1002</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;王大锤&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;stuid&quot;</span> : <span class="number">1001</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;骆昊&quot;</span> &#125;</span><br><span class="line">&gt; <span class="comment">// 在指定的一个或多个字段上创建索引</span></span><br><span class="line">&gt; db.<span class="property">students</span>.<span class="title function_">ensureIndex</span>(<span class="params">&#123;name: <span class="number">1</span>&#125;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure></li></ol><p>使用MongoDB可以非常方便的配置数据复制，通过冗余数据来实现数据的高可用以及灾难恢复，也可以通过数据分片来应对数据量迅速增长的需求。关于MongoDB更多的操作可以查阅<a href="https://mongodb-documentation.readthedocs.io/en/latest/">官方文档</a> ，同时推荐大家阅读Kristina Chodorow写的<a href="http://www.ituring.com.cn/book/1172">《MongoDB权威指南》</a>。</p><h4 id="在Python程序中操作MongoDB"><a href="#在Python程序中操作MongoDB" class="headerlink" title="在Python程序中操作MongoDB"></a>在Python程序中操作MongoDB</h4><p>可以通过pip安装pymongo来实现对MongoDB的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymongo</span><br><span class="line">python3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient(<span class="string">&#x27;mongodb://127.0.0.1:27017&#x27;</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db = client.school</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> student <span class="keyword">in</span> db.students.find():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;学号:&#x27;</span>, student[<span class="string">&#x27;stuid&#x27;</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, student[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;电话:&#x27;</span>, student[<span class="string">&#x27;tel&#x27;</span>])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">学号: <span class="number">1001.0</span></span><br><span class="line">姓名: 骆昊</span><br><span class="line">电话: <span class="number">13566778899</span></span><br><span class="line">学号: <span class="number">1002.0</span></span><br><span class="line">姓名: 王大锤</span><br><span class="line">电话: <span class="number">13012345678</span></span><br><span class="line">学号: <span class="number">1003.0</span></span><br><span class="line">姓名: 白元芳</span><br><span class="line">电话: <span class="number">13022223333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.find().count()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.remove()</span><br><span class="line">&#123;<span class="string">&#x27;n&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;ok&#x27;</span>: <span class="number">1.0</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.find().count()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll = db.students</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> ASCENDING</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.create_index([(<span class="string">&#x27;name&#x27;</span>, ASCENDING)], unique=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&#x27;name_1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.insert_one(&#123;<span class="string">&#x27;stuid&#x27;</span>: <span class="built_in">int</span>(<span class="number">1001</span>), <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">&lt;pymongo.results.InsertOneResult <span class="built_in">object</span> at <span class="number">0x1050cc6c8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.insert_many([&#123;<span class="string">&#x27;stuid&#x27;</span>: <span class="built_in">int</span>(<span class="number">1002</span>), <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王大锤&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;stuid&#x27;</span>: <span class="built_in">int</span>(<span class="number">1003</span>), <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;白元芳&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;])</span><br><span class="line">&lt;pymongo.results.InsertManyResult <span class="built_in">object</span> at <span class="number">0x1050cc8c8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> student <span class="keyword">in</span> coll.find(&#123;<span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;学号:&#x27;</span>, student[<span class="string">&#x27;stuid&#x27;</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, student[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;性别:&#x27;</span>, <span class="string">&#x27;男&#x27;</span> <span class="keyword">if</span> student[<span class="string">&#x27;gender&#x27;</span>] <span class="keyword">else</span> <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">学号: <span class="number">1001</span></span><br><span class="line">姓名: 骆昊</span><br><span class="line">性别: 男</span><br><span class="line">学号: <span class="number">1003</span></span><br><span class="line">姓名: 白元芳</span><br><span class="line">性别: 男</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>关于PyMongo更多的知识可以通过它的<a href="https://api.mongodb.com/python/current/tutorial.html">官方文档</a>进行了解，也可以使用<a href="https://pypi.org/project/mongoengine/">MongoEngine</a>这样的库来简化Python程序对MongoDB的操作，除此之外，还有以异步I&#x2F;O方式访问MongoDB的三方库<a href="https://pypi.org/project/motor/">motor</a>都是不错的选择。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;关系数据库入门&quot;&gt;&lt;a href=&quot;#关系数据库入门&quot; class=&quot;headerlink&quot; title=&quot;关系数据库入门&quot;&gt;&lt;/a&gt;关系数据库入门&lt;/h2&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://aichiko0225.github.com/memoirs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-100天(二)-Python语言进阶</title>
    <link href="https://aichiko0225.github.com/memoirs/20200310/python/Python-100-2/"/>
    <id>https://aichiko0225.github.com/memoirs/20200310/python/Python-100-2/</id>
    <published>2020-03-10T13:51:59.000Z</published>
    <updated>2024-12-13T03:02:36.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li>算法：解决问题的方法和步骤</li><li>评价算法的好坏：渐近时间复杂度和渐近空间复杂度。</li><li>渐近时间复杂度的大O标记：<ul><li><p><img src="http://latex.codecogs.com/gif.latex?O(c)" style="margin-bottom: 0; display:inline;" /> - 常量时间复杂度 - 布隆过滤器 &#x2F; 哈希存储</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(log_2n)" style="margin-bottom: 0; display:inline;" /> - 对数时间复杂度 - 折半查找（二分查找）</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(n)" style="margin-bottom: 0; display:inline;"/> - 线性时间复杂度 - 顺序查找 &#x2F; 桶排序</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(n*log_2n)" style="margin-bottom: 0; display:inline;"/> - 对数线性时间复杂度 - 高级排序算法（归并排序、快速排序）</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(n^2)" style="margin-bottom: 0; display:inline;"/> - 平方时间复杂度 - 简单排序算法（选择排序、插入排序、冒泡排序）</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(n^3)" style="margin-bottom: 0; display:inline;"/> - 立方时间复杂度 - Floyd算法 &#x2F; 矩阵乘法运算</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(2^n)" style="margin-bottom: 0; display:inline;"/> - 几何级数时间复杂度 - 汉诺塔</p></li><li><p><img src="http://latex.codecogs.com/gif.latex?O(n!)" style="margin-bottom: 0; display:inline;"/> - 阶乘时间复杂度 - 旅行经销商问题 - NP</p></li></ul></li></ul><span id="more"></span><ul><li>排序算法（选择、冒泡和归并）和查找算法（顺序和折半）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">origin_items, comp=<span class="keyword">lambda</span> x, y: x &lt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class="line">    items = origin_items[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(items)):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[min_index]):</span><br><span class="line">                min_index = j</span><br><span class="line">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">origin_items, comp=<span class="keyword">lambda</span> x, y: x &gt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;高质量冒泡排序(搅拌排序)&quot;&quot;&quot;</span></span><br><span class="line">    items = origin_items[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span>):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(items) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[j + <span class="number">1</span>]):</span><br><span class="line">                items[j], items[j + <span class="number">1</span>] = items[j + <span class="number">1</span>], items[j]</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> swapped:</span><br><span class="line">            swapped = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">2</span> - i, i, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> comp(items[j - <span class="number">1</span>], items[j]):</span><br><span class="line">                    items[j], items[j - <span class="number">1</span>] = items[j - <span class="number">1</span>], items[j]</span><br><span class="line">                    swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &lt;= y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序(分治法)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> items[:]</span><br><span class="line">    mid = <span class="built_in">len</span>(items) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(items[:mid], comp)</span><br><span class="line">    right = merge_sort(items[mid:], comp)</span><br><span class="line">    <span class="keyword">return</span> merge(left, right, comp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">items1, items2, comp</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;</span></span><br><span class="line">    items = []</span><br><span class="line">    index1, index2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index1 &lt; <span class="built_in">len</span>(items1) <span class="keyword">and</span> index2 &lt; <span class="built_in">len</span>(items2):</span><br><span class="line">        <span class="keyword">if</span> comp(items1[index1], items2[index2]):</span><br><span class="line">            items.append(items1[index1])</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items.append(items2[index2])</span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line">    items += items1[index1:]</span><br><span class="line">    items += items2[index2:]</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">seq_search</span>(<span class="params">items, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;顺序查找&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">        <span class="keyword">if</span> item == key:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bin_search</span>(<span class="params">items, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;折半查找&quot;&quot;&quot;</span></span><br><span class="line">    start, end = <span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> key &gt; items[mid]:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> key &lt; items[mid]:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用生成式（推导式）语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prices = &#123;</span><br><span class="line">    <span class="string">&#x27;AAPL&#x27;</span>: <span class="number">191.88</span>,</span><br><span class="line">    <span class="string">&#x27;GOOG&#x27;</span>: <span class="number">1186.96</span>,</span><br><span class="line">    <span class="string">&#x27;IBM&#x27;</span>: <span class="number">149.24</span>,</span><br><span class="line">    <span class="string">&#x27;ORCL&#x27;</span>: <span class="number">48.44</span>,</span><br><span class="line">    <span class="string">&#x27;ACN&#x27;</span>: <span class="number">166.89</span>,</span><br><span class="line">    <span class="string">&#x27;FB&#x27;</span>: <span class="number">208.09</span>,</span><br><span class="line">    <span class="string">&#x27;SYMC&#x27;</span>: <span class="number">21.29</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 用股票价格大于100元的股票构造一个新的字典</span></span><br><span class="line">prices2 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(prices2)</span><br></pre></td></tr></table></figure><blockquote><p>说明：生成式（推导式）可以用来生成列表、集合和字典。</p></blockquote><ul><li>嵌套的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>]</span><br><span class="line">courses = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line"><span class="comment"># 录入五个学生三门课程的成绩</span></span><br><span class="line"><span class="comment"># 错误 - 参考http://pythontutor.com/visualize.html#mode=edit</span></span><br><span class="line"><span class="comment"># scores = [[None] * len(courses)] * len(names)</span></span><br><span class="line">scores = [[<span class="literal">None</span>] * <span class="built_in">len</span>(courses) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names))]</span><br><span class="line"><span class="keyword">for</span> row, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    <span class="keyword">for</span> col, course <span class="keyword">in</span> <span class="built_in">enumerate</span>(courses):</span><br><span class="line">        scores[row][col] = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">f&#x27;请输入<span class="subst">&#123;name&#125;</span>的<span class="subst">&#123;course&#125;</span>成绩: &#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure><p><a href="http://pythontutor.com/">Python Tutor</a> - VISUALIZE CODE AND GET LIVE HELP</p><ul><li>heapq、itertools等的用法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">从列表中找出最大的或最小的N个元素</span></span><br><span class="line"><span class="string">堆结构(大根堆/小根堆)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">78</span>, <span class="number">88</span>, <span class="number">92</span>]</span><br><span class="line">list2 = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;AAPL&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;FB&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HPQ&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;YHOO&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ACME&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">3</span>, list1))</span><br><span class="line"><span class="built_in">print</span>(heapq.nsmallest(<span class="number">3</span>, list1))</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, list2, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, list2, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;shares&#x27;</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">迭代工具 - 排列 / 组合 / 笛卡尔积</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">itertools.permutations(<span class="string">&#x27;ABCD&#x27;</span>)</span><br><span class="line">itertools.combinations(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">itertools.product(<span class="string">&#x27;ABCD&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>collections模块下的工具类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">找出序列中出现次数最多的元素</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">words = [</span><br><span class="line">    <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;around&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&quot;don&#x27;t&quot;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;around&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&quot;you&#x27;re&quot;</span>, <span class="string">&#x27;under&#x27;</span></span><br><span class="line">]</span><br><span class="line">counter = Counter(words)</span><br><span class="line"><span class="built_in">print</span>(counter.most_common(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><ul><li>常用算法：<ul><li>穷举法 - 又称为暴力破解法，对所有的可能性进行验证，直到找到正确答案。</li><li>贪婪法 - 在对问题求解时，总是做出在当前看来</li><li>最好的选择，不追求最优解，快速找到满意解。</li><li>分治法 - 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题，直到可以直接求解的程度，最后将子问题的解进行合并得到原问题的解。</li><li>回溯法 - 回溯法又称为试探法，按选优条件向前搜索，当搜索到某一步发现原先选择并不优或达不到目标时，就退回一步重新选择。</li><li>动态规划 - 基本思想也是将待求解问题分解成若干个子问题，先求解并保存这些子问题的解，避免产生大量的重复运算。</li></ul></li></ul><p>穷举法例子：百钱百鸡和五人分鱼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公鸡5元一只 母鸡3元一只 小鸡1元三只</span></span><br><span class="line"><span class="comment"># 用100元买100只鸡 问公鸡/母鸡/小鸡各多少只</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">        z = <span class="number">100</span> - x - y</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * x + <span class="number">3</span> * y + z // <span class="number">3</span> == <span class="number">100</span> <span class="keyword">and</span> z % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A、B、C、D、E五人在某天夜里合伙捕鱼 最后疲惫不堪各自睡觉</span></span><br><span class="line"><span class="comment"># 第二天A第一个醒来 他将鱼分为5份 扔掉多余的1条 拿走自己的一份</span></span><br><span class="line"><span class="comment"># B第二个醒来 也将鱼分为5份 扔掉多余的1条 拿走自己的一份</span></span><br><span class="line"><span class="comment"># 然后C、D、E依次醒来也按同样的方式分鱼 问他们至少捕了多少条鱼</span></span><br><span class="line">fish = <span class="number">6</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    total = fish</span><br><span class="line">    enough = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> (total - <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            total = (total - <span class="number">1</span>) // <span class="number">5</span> * <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            enough = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> enough:</span><br><span class="line">        <span class="built_in">print</span>(fish)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    fish += <span class="number">5</span></span><br></pre></td></tr></table></figure><p>贪婪法例子：假设小偷有一个背包，最多能装20公斤赃物，他闯入一户人家，发现如下表所示的物品。很显然，他不能把所有物品都装进背包，所以必须确定拿走哪些物品，留下哪些物品。</p><pre><code>|  名称  | 价格（美元） | 重量（kg） || :----: | :----------: | :--------: ||  电脑  |     200      |     20     || 收音机 |      20      |     4      ||   钟   |     175      |     10     ||  花瓶  |      50      |     2      ||   书   |      10      |     1      ||  油画  |      90      |     9      |</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">贪婪法：在对问题求解时，总是做出在当前看来是最好的选择，不追求最优解，快速找到满意解。</span></span><br><span class="line"><span class="string">输入：</span></span><br><span class="line"><span class="string">20 6</span></span><br><span class="line"><span class="string">电脑 200 20</span></span><br><span class="line"><span class="string">收音机 20 4</span></span><br><span class="line"><span class="string">钟 175 10</span></span><br><span class="line"><span class="string">花瓶 50 2</span></span><br><span class="line"><span class="string">书 10 1</span></span><br><span class="line"><span class="string">油画 90 9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thing</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;物品&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, price, weight</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.price = price</span><br><span class="line">        <span class="variable language_">self</span>.weight = weight</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;价格重量比&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.price / <span class="variable language_">self</span>.weight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_thing</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;输入物品信息&quot;&quot;&quot;</span></span><br><span class="line">    name_str, price_str, weight_str = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">return</span> name_str, <span class="built_in">int</span>(price_str), <span class="built_in">int</span>(weight_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    max_weight, num_of_things = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    all_things = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_of_things):</span><br><span class="line">        all_things.append(Thing(*input_thing()))</span><br><span class="line">    all_things.sort(key=<span class="keyword">lambda</span> x: x.value, reverse=<span class="literal">True</span>)</span><br><span class="line">    total_weight = <span class="number">0</span></span><br><span class="line">    total_price = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> thing <span class="keyword">in</span> all_things:</span><br><span class="line">        <span class="keyword">if</span> total_weight + thing.weight &lt;= max_weight:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;小偷拿走了<span class="subst">&#123;thing.name&#125;</span>&#x27;</span>)</span><br><span class="line">            total_weight += thing.weight</span><br><span class="line">            total_price += thing.price</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;总价值: <span class="subst">&#123;total_price&#125;</span>美元&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>分治法例子：<a href="https://zh.wikipedia.org/zh/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">origin_items, comp=<span class="keyword">lambda</span> x, y: x &lt;= y</span>):</span><br><span class="line">    items = origin_items[:]</span><br><span class="line">    _quick_sort(items, <span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span>, comp)</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_quick_sort</span>(<span class="params">items, start, end, comp</span>):</span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        pos = _partition(items, start, end, comp)</span><br><span class="line">        _quick_sort(items, start, pos - <span class="number">1</span>, comp)</span><br><span class="line">        _quick_sort(items, pos + <span class="number">1</span>, end, comp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_partition</span>(<span class="params">items, start, end, comp</span>):</span><br><span class="line">    pivot = items[end]</span><br><span class="line">    i = start - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="keyword">if</span> comp(items[j], pivot):</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            items[i], items[j] = items[j], items[i]</span><br><span class="line">    items[i + <span class="number">1</span>], items[end] = items[end], items[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>回溯法例子：<a href="https://zh.wikipedia.org/zh/%E9%AA%91%E5%A3%AB%E5%B7%A1%E9%80%BB">骑士巡逻</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归回溯法：叫称为试探法，按选优条件向前搜索，当搜索到某一步，发现原先选择并不优或达不到目标时，就退回一步重新选择，比较经典的问题包括骑士巡逻、八皇后和迷宫寻路等。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">SIZE = <span class="number">5</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_board</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> board:</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(col).center(<span class="number">4</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patrol</span>(<span class="params">board, row, col, step=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> row &lt; SIZE <span class="keyword">and</span> \</span><br><span class="line">        col &gt;= <span class="number">0</span> <span class="keyword">and</span> col &lt; SIZE <span class="keyword">and</span> \</span><br><span class="line">        board[row][col] == <span class="number">0</span>:</span><br><span class="line">        board[row][col] = step</span><br><span class="line">        <span class="keyword">if</span> step == SIZE * SIZE:</span><br><span class="line">            <span class="keyword">global</span> total</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;total&#125;</span>种走法: &#x27;</span>)</span><br><span class="line">            print_board(board)</span><br><span class="line">        patrol(board, row - <span class="number">2</span>, col - <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row - <span class="number">1</span>, col - <span class="number">2</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row + <span class="number">1</span>, col - <span class="number">2</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row + <span class="number">2</span>, col - <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row + <span class="number">2</span>, col + <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row + <span class="number">1</span>, col + <span class="number">2</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row - <span class="number">1</span>, col + <span class="number">2</span>, step + <span class="number">1</span>)</span><br><span class="line">        patrol(board, row - <span class="number">2</span>, col + <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        board[row][col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    board = [[<span class="number">0</span>] * SIZE <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(SIZE)]</span><br><span class="line">    patrol(board, SIZE - <span class="number">1</span>, SIZE - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>动态规划例子1：<a href="">斐波拉切数列</a>。（不使用动态规划将会是几何级数复杂度）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">动态规划 - 适用于有重叠子问题和最优子结构性质的问题</span></span><br><span class="line"><span class="string">使用动态规划方法所耗时间往往远少于朴素解法(用空间换取时间)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">num, temp=&#123;&#125;</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用递归计算Fibonacci数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> temp[num]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        temp[num] = fib(num - <span class="number">1</span>) + fib(num - <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> temp[num]</span><br></pre></td></tr></table></figure><p>动态规划例子2：子列表元素之和的最大值。（使用动态规划可以避免二重循环）</p><blockquote><p>说明：子列表指的是列表中索引（下标）连续的元素构成的列表；列表中的元素是int类型，可能包含正整数、0、负整数；程序输入列表中的元素，输出子列表元素求和的最大值，例如：</p><p>输入：1 -2 3 5 -3 2</p><p>输出：8</p><p>输入：0 -2 3 5 -1 2</p><p>输出：9</p><p>输入：-9 -2 -3 -5 -3</p><p>输出：-2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    items = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    size = <span class="built_in">len</span>(items)</span><br><span class="line">    overall, partial = &#123;&#125;, &#123;&#125;</span><br><span class="line">    overall[size - <span class="number">1</span>] = partial[size - <span class="number">1</span>] = items[size - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        partial[i] = <span class="built_in">max</span>(items[i], partial[i + <span class="number">1</span>] + items[i])</span><br><span class="line">        overall[i] = <span class="built_in">max</span>(partial[i], overall[i + <span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(overall[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="函数的使用方式"><a href="#函数的使用方式" class="headerlink" title="函数的使用方式"></a>函数的使用方式</h3><ul><li><p>将函数视为“一等公民”</p><ul><li>函数可以赋值给变量</li><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li></ul></li><li><p>高阶函数的用法（<code>filter</code>、<code>map</code>以及它们的替代品）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))))</span><br><span class="line">items2 = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li><p>位置参数、可变参数、关键字参数、命名关键字参数</p></li><li><p>参数的元信息（代码可读性问题）</p></li><li><p>匿名函数和内联函数的用法（<code>lambda</code>函数）</p></li><li><p>闭包和作用域问题</p></li><li><p>Python搜索变量的LEGB顺序（Local –&gt; Embedded –&gt; Global –&gt; Built-in）</p></li><li><p><code>global</code>和<code>nonlocal</code>关键字的作用<br><code>global</code>：声明或定义全局变量（要么直接使用现有的全局作用域的变量，要么定义一个变量放到全局作用域）。<br><code>nonlocal</code>：声明使用嵌套作用域的变量（嵌套作用域必须存在该变量，否则报错）。</p></li><li><p>装饰器函数（使用装饰器和取消装饰器）</p></li></ul><p>例子：输出函数执行时间的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">record_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义装饰函数的装饰器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span>: <span class="subst">&#123;time() - start&#125;</span>秒&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>如果装饰器不希望跟<code>print</code>函数耦合，可以编写带参数的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record</span>(<span class="params">output</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义带参数的装饰器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">func</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        output(func.__name__, time() - start)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> decorate</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义装饰器类(通过__call__魔术方法使得对象可以当成函数调用)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, output</span>):</span><br><span class="line">        <span class="variable language_">self</span>.output = output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            start = time()</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            <span class="variable language_">self</span>.output(func.__name__, time() - start)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><blockquote><p>说明：由于对带装饰功能的函数添加了@wraps装饰器，可以通过<code>func.__wrapped__</code>方式获得被装饰之前的函数或类来取消装饰器的作用。</p></blockquote><p>例子：用装饰器来实现单例模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰类的装饰器&quot;&quot;&quot;</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">cls</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">President</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：上面的代码中用到了闭包（closure），不知道你是否已经意识到了。还没有一个小问题就是，上面的代码并没有实现线程安全的单例，如果要实现线程安全的单例应该怎么做呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;线程安全的单例装饰器&quot;&quot;&quot;</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    locker = Lock()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">cls</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            <span class="keyword">with</span> locker:</span><br><span class="line">                <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">                    instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="面向对象相关知识"><a href="#面向对象相关知识" class="headerlink" title="面向对象相关知识"></a>面向对象相关知识</h3><ul><li>三大支柱：封装、继承、多态</li></ul><p>例子：工资结算系统。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">月薪结算系统 - 部门经理每月15000 程序员每小时200 销售员1800底薪加销售额5%提成</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;员工(抽象类)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;结算月薪(抽象方法)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15000.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Programmer</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, working_hour=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.working_hour = working_hour</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200.0</span> * <span class="variable language_">self</span>.working_hour</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesman</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sales=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.sales = sales</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1800.0</span> + <span class="variable language_">self</span>.sales * <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeFactory</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建员工的工厂（工厂模式 - 通过工厂实现对象使用者和对象之间的解耦合）&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">emp_type, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建员工&quot;&quot;&quot;</span></span><br><span class="line">        emp_type = emp_type.upper()</span><br><span class="line">        emp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> emp_type == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            emp = Manager(*args, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> emp_type == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">            emp = Programmer(*args, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> emp_type == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            emp = Salesman(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> emp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    emps = [</span><br><span class="line">        EmployeeFactory.create(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;曹操&#x27;</span>), </span><br><span class="line">        EmployeeFactory.create(<span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;荀彧&#x27;</span>, <span class="number">120</span>),</span><br><span class="line">        EmployeeFactory.create(<span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;郭嘉&#x27;</span>, <span class="number">85</span>), </span><br><span class="line">        EmployeeFactory.create(<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;典韦&#x27;</span>, <span class="number">123000</span>),</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %.2f元&#x27;</span> % (emp.name, emp.get_salary()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li><p>类与类之间的关系</p><ul><li>is-a关系：继承</li><li>has-a关系：关联 &#x2F; 聚合 &#x2F; 合成</li><li>use-a关系：依赖</li></ul></li></ul><p>例子：扑克游戏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">经验：符号常量总是优于字面常量，枚举类型是定义符号常量的最佳选择</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Suite</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;花色&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    SPADE, HEART, CLUB, DIAMOND = <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.value &lt; other.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, suite, face</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.suite = suite</span><br><span class="line">        <span class="variable language_">self</span>.face = face</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示牌面&quot;&quot;&quot;</span></span><br><span class="line">        suites = [<span class="string">&#x27;♠️&#x27;</span>, <span class="string">&#x27;♥️&#x27;</span>, <span class="string">&#x27;♣️&#x27;</span>, <span class="string">&#x27;♦️&#x27;</span>]</span><br><span class="line">        faces = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;suites[self.suite.value]&#125;</span> <span class="subst">&#123;faces[self.face]&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;扑克&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.index = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.cards = [Card(suite, face)</span><br><span class="line">                    <span class="keyword">for</span> suite <span class="keyword">in</span> Suite</span><br><span class="line">                    <span class="keyword">for</span> face <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;洗牌（随机乱序）&quot;&quot;&quot;</span></span><br><span class="line">        random.shuffle(<span class="variable language_">self</span>.cards)</span><br><span class="line">        <span class="variable language_">self</span>.index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span></span><br><span class="line">        card = <span class="variable language_">self</span>.cards[<span class="variable language_">self</span>.index]</span><br><span class="line">        <span class="variable language_">self</span>.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_more</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.index &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.cards)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.cards = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_one</span>(<span class="params">self, card</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;摸一张牌&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.cards.append(card)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">self, comp=<span class="keyword">lambda</span> card: (<span class="params">card.suite, card.face</span>)</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;整理手上的牌&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.cards.sort(key=comp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    poker = Poker()</span><br><span class="line">    poker.shuffle()</span><br><span class="line">    players = [Player(<span class="string">&#x27;东邪&#x27;</span>), Player(<span class="string">&#x27;西毒&#x27;</span>), Player(<span class="string">&#x27;南帝&#x27;</span>), Player(<span class="string">&#x27;北丐&#x27;</span>)]</span><br><span class="line">    <span class="keyword">while</span> poker.has_more:</span><br><span class="line">        <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">                player.get_one(poker.deal())</span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        player.sort()</span><br><span class="line">        <span class="built_in">print</span>(player.name, end=<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(player.cards)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：上面的代码中使用了Emoji字符来表示扑克牌的四种花色，在某些不支持Emoji字符的系统上可能无法显示。</p></blockquote><ul><li>对象的复制（深复制&#x2F;深拷贝&#x2F;深度克隆和浅复制&#x2F;浅拷贝&#x2F;影子克隆）</li><li>垃圾回收、循环引用和弱引用<br>Python使用了自动化内存管理，这种管理机制以<strong>引用计数</strong>为基础，同时也引入了<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> struct_object &#123;</span><br><span class="line">    <span class="comment">/* 引用计数 */</span></span><br><span class="line">    <span class="type">int</span> ob_refcnt;</span><br><span class="line">    <span class="comment">/* 对象指针 */</span></span><br><span class="line">    struct_typeobject *ob_type;</span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 增加引用计数的宏定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Py_INCREF(op)   ((op)-&gt;ob_refcnt++)</span></span><br><span class="line"><span class="comment">/* 减少引用计数的宏定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Py_DECREF(op) \ <span class="comment">//减少计数</span></span></span><br><span class="line">    <span class="keyword">if</span> (--(op)-&gt;ob_refcnt != <span class="number">0</span>) \</span><br><span class="line">        ; \</span><br><span class="line">    <span class="keyword">else</span> \</span><br><span class="line">        __Py_Dealloc((PyObject *)(op))</span><br></pre></td></tr></table></figure><p>导致引用计数+1的情况：<br>    - 对象被创建，例如<code>a = 23</code><br>    - 对象被引用，例如<code>b = a</code><br>    - 对象被作为参数，传入到一个函数中，例如<code>f(a)</code><br>    - 对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></p><pre><code>导致引用计数-1的情况：- 对象的别名被显式销毁，例如`del a`- 对象的别名被赋予新的对象，例如`a = 24`- 一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）- 对象所在的容器被销毁，或从容器中删除对象引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收</span></span><br><span class="line"><span class="comment"># 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效</span></span><br><span class="line"><span class="comment"># 如果不想造成循环引用可以使用弱引用</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = [] </span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(list1)</span><br></pre></td></tr></table></figure>以下情况会导致垃圾回收：- 调用`gc.collect()`- gc模块的计数器达到阀值- 程序退出如果循环引用中两个对象都定义了`__del__`方法，gc模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的`__del__`方法，这个问题在Python 3.6中得到了解决。也可以通过`weakref`模块构造弱引用的方式来解决循环引用的问题。</code></pre><ul><li>魔法属性和方法（请参考《Python魔法方法指南》）</li></ul><p>有几个小问题请大家思考：<br>    - 自定义的对象能不能使用运算符做运算？<br>    - 自定义的对象能不能放到set中？能去重吗？<br>    - 自定义的对象能不能作为dict的键？<br>    - 自定义的对象能不能使用上下文语法？</p><ul><li>混入（Mixin）</li></ul><p>例子：自定义字典限制只有在指定的key不存在时才能在字典中设置键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SetOnceMappingMixin</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义混入类&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="built_in">str</span>(key) + <span class="string">&#x27; already set&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__setitem__(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SetOnceDict</span>(SetOnceMappingMixin, <span class="built_in">dict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义字典&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_dict= SetOnceDict()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_dict[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;jackfrued&#x27;</span></span><br><span class="line">    my_dict[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;hellokitty&#x27;</span></span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br></pre></td></tr></table></figure><ul><li>元编程和元类</li></ul><p>例子：用元类实现单例模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义元类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        cls.__instance = <span class="literal">None</span></span><br><span class="line">        cls.__lock = threading.Lock()</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> cls.__lock:</span><br><span class="line">                <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    cls.__instance = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">President</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>面向对象设计原则</p><ul><li>单一职责原则 （<strong>S</strong>RP）- 一个类只做该做的事情（类的设计要高内聚）</li><li>开闭原则 （<strong>O</strong>CP）- 软件实体应该对扩展开发对修改关闭</li><li>依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化）</li><li>里氏替换原则（<strong>L</strong>SP） - 任何时候可以用子类对象替换掉父类对象</li><li>接口隔离原则（<strong>I</strong>SP）- 接口要小而专不要大而全（Python中没有接口的概念）</li><li>合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码</li><li>最少知识原则（迪米特法则，Lo<strong>D</strong>）- 不要给没有必然联系的对象发消息</li></ul><blockquote><p>说明：上面加粗的字母放在一起称为面向对象的<strong>SOLID</strong>原则。</p></blockquote><p>  GoF设计模式</p><ul><li>创建型模式：单例、工厂、建造者、原型</li><li>结构型模式：适配器、门面（外观）、代理</li><li>行为型模式：迭代器、观察者、状态、策略</li></ul></li></ul><p>例子：可插拔的哈希算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StreamHasher</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;哈希摘要生成器(策略模式)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, alg=<span class="string">&#x27;md5&#x27;</span>, size=<span class="number">4096</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.size = size</span><br><span class="line">        alg = alg.lower()</span><br><span class="line">        <span class="variable language_">self</span>.hasher = <span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;hashlib&#x27;</span>), alg.lower())()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, stream</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.to_digest(stream)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_digest</span>(<span class="params">self, stream</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成十六进制形式的摘要&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> buf <span class="keyword">in</span> <span class="built_in">iter</span>(<span class="keyword">lambda</span>: stream.read(<span class="variable language_">self</span>.size), <span class="string">b&#x27;&#x27;</span>):</span><br><span class="line">            <span class="variable language_">self</span>.hasher.update(buf)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.hasher.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    hasher1 = StreamHasher()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Python-3.7.1.tgz&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> stream:</span><br><span class="line">        <span class="built_in">print</span>(hasher1.to_digest(stream))</span><br><span class="line">    hasher2 = StreamHasher(<span class="string">&#x27;sha1&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Python-3.7.1.tgz&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> stream:</span><br><span class="line">        <span class="built_in">print</span>(hasher2(stream))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><ul><li><p>和迭代器相关的魔术方法（<code>__iter__</code>和<code>__next__</code>）</p></li><li><p>两种创建生成器的方式（生成器表达式和<code>yield</code>关键字）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成器&quot;&quot;&quot;</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;迭代器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="variable language_">self</span>.num = num</span><br><span class="line">        <span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.idx &lt; <span class="variable language_">self</span>.num:</span><br><span class="line">            <span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b = <span class="variable language_">self</span>.b, <span class="variable language_">self</span>.a + <span class="variable language_">self</span>.b</span><br><span class="line">            <span class="variable language_">self</span>.idx += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.a</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><p>Python中实现并发编程的三种方案：多线程、多进程和异步I&#x2F;O。并发编程的好处在于可以提升程序的执行效率以及改善用户体验；坏处在于并发的程序不容易开发和调试，同时对其他程序来说它并不友好。</p><ul><li>多线程：Python中提供了Thread类并辅以Lock、Condition、Event、Semaphore和Barrier。Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">面试题：进程和线程的区别和联系？</span></span><br><span class="line"><span class="string">进程 - 操作系统分配内存的基本单位 - 一个进程可以包含一个或多个线程</span></span><br><span class="line"><span class="string">线程 - 操作系统分配CPU的基本单位</span></span><br><span class="line"><span class="string">并发编程（concurrent programming）</span></span><br><span class="line"><span class="string">1. 提升执行性能 - 让程序中没有因果关系的部分可以并发的执行</span></span><br><span class="line"><span class="string">2. 改善用户体验 - 让耗时间的操作不会造成程序的假死</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">PREFIX = <span class="string">&#x27;thumbnails&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_thumbnail</span>(<span class="params">infile, size, <span class="built_in">format</span>=<span class="string">&#x27;PNG&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成指定图片文件的缩略图&quot;&quot;&quot;</span></span><br><span class="line">file, ext = os.path.splitext(infile)</span><br><span class="line">file = file[file.rfind(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>:]</span><br><span class="line">outfile = <span class="string">f&#x27;<span class="subst">&#123;PREFIX&#125;</span>/<span class="subst">&#123;file&#125;</span>_<span class="subst">&#123;size[<span class="number">0</span>]&#125;</span>_<span class="subst">&#123;size[<span class="number">1</span>]&#125;</span>.<span class="subst">&#123;ext&#125;</span>&#x27;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(infile)</span><br><span class="line">img.thumbnail(size, Image.ANTIALIAS)</span><br><span class="line">img.save(outfile, <span class="built_in">format</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(PREFIX):</span><br><span class="line">    os.mkdir(PREFIX)</span><br><span class="line"><span class="keyword">for</span> infile <span class="keyword">in</span> glob.glob(<span class="string">&#x27;images/*.png&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> size <span class="keyword">in</span> (<span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>):</span><br><span class="line">            <span class="comment"># 创建并启动线程</span></span><br><span class="line">        threading.Thread(</span><br><span class="line">            target=generate_thumbnail, </span><br><span class="line">            args=(infile, (size, size))</span><br><span class="line">        ).start()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>多个线程竞争资源的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多线程程序如果没有竞争资源处理起来通常也比较简单</span></span><br><span class="line"><span class="string">当多个线程竞争临界资源的时候如果缺乏必要的保护措施就会导致数据错乱</span></span><br><span class="line"><span class="string">说明：临界资源就是被多个线程竞争的资源</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;银行账户&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.balance = <span class="number">0.0</span></span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="comment"># 通过锁保护临界资源</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">            new_balance = <span class="variable language_">self</span>.balance + money</span><br><span class="line">            time.sleep(<span class="number">0.001</span>)</span><br><span class="line">            <span class="variable language_">self</span>.balance = new_balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddMoneyThread</span>(threading.Thread):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义线程类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account, money</span>):</span><br><span class="line">        <span class="variable language_">self</span>.account = account</span><br><span class="line">        <span class="variable language_">self</span>.money = money</span><br><span class="line">        <span class="comment"># 自定义线程的初始化方法中必须调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 线程启动之后要执行的操作</span></span><br><span class="line">        <span class="variable language_">self</span>.account.deposit(<span class="variable language_">self</span>.money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    account = Account()</span><br><span class="line">    <span class="comment"># 创建线程池</span></span><br><span class="line">    pool = ThreadPoolExecutor(max_workers=<span class="number">10</span>)</span><br><span class="line">    futures = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># 创建线程的第1种方式</span></span><br><span class="line">        <span class="comment"># threading.Thread(</span></span><br><span class="line">        <span class="comment">#     target=account.deposit, args=(1, )</span></span><br><span class="line">        <span class="comment"># ).start()</span></span><br><span class="line">        <span class="comment"># 创建线程的第2种方式</span></span><br><span class="line">        <span class="comment"># AddMoneyThread(account, 1).start()</span></span><br><span class="line">        <span class="comment"># 创建线程的第3种方式</span></span><br><span class="line">        <span class="comment"># 调用线程池中的线程来执行特定的任务</span></span><br><span class="line">        future = pool.submit(account.deposit, <span class="number">1</span>)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    <span class="comment"># 关闭线程池</span></span><br><span class="line">    pool.shutdown()</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        future.result()</span><br><span class="line">    <span class="built_in">print</span>(account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>修改上面的程序，启动5个线程向账户中存钱，5个线程从账户中取钱，取钱时如果余额不足就暂停线程进行等待。为了达到上述目标，需要对存钱和取钱的线程进行调度，在余额不足时取钱的线程暂停并释放锁，而存钱的线程将钱存入后要通知取钱的线程，使其从暂停状态被唤醒。可以使用<code>threading</code>模块的Condition来实现线程调度，该对象也是基于锁来创建的，代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多个线程竞争一个资源 - 保护临界资源 - 锁（Lock/RLock）</span></span><br><span class="line"><span class="string">多个线程竞争多个资源（线程数&gt;资源数） - 信号量（Semaphore）</span></span><br><span class="line"><span class="string">多个线程的调度 - 暂停线程执行/唤醒等待中的线程 - Condition</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;银行账户&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.balance = balance</span><br><span class="line">        lock = threading.Lock()</span><br><span class="line">        <span class="variable language_">self</span>.condition = threading.Condition(lock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;取钱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.condition:</span><br><span class="line">            <span class="keyword">while</span> money &gt; <span class="variable language_">self</span>.balance:</span><br><span class="line">                <span class="variable language_">self</span>.condition.wait()</span><br><span class="line">            new_balance = <span class="variable language_">self</span>.balance - money</span><br><span class="line">            sleep(<span class="number">0.001</span>)</span><br><span class="line">            <span class="variable language_">self</span>.balance = new_balance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;存钱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.condition:</span><br><span class="line">            new_balance = <span class="variable language_">self</span>.balance + money</span><br><span class="line">            sleep(<span class="number">0.001</span>)</span><br><span class="line">            <span class="variable language_">self</span>.balance = new_balance</span><br><span class="line">            <span class="variable language_">self</span>.condition.notify_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_money</span>(<span class="params">account</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        money = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        account.deposit(money)</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name, </span><br><span class="line">            <span class="string">&#x27;:&#x27;</span>, money, <span class="string">&#x27;====&gt;&#x27;</span>, account.balance)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_money</span>(<span class="params">account</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        money = randint(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line">        account.withdraw(money)</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name, </span><br><span class="line">            <span class="string">&#x27;:&#x27;</span>, money, <span class="string">&#x27;&lt;====&#x27;</span>, account.balance)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    account = Account()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            pool.submit(add_money, account)</span><br><span class="line">            pool.submit(sub_money, account)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>多进程：多进程可以有效的解决GIL的问题，实现多进程主要的类是Process，其他辅助的类跟threading模块中的类似，进程间共享数据可以使用管道、套接字等，在multiprocessing模块中有一个Queue类，它基于管道和锁机制提供了多个进程共享的队列。下面是官方文档上关于多进程和进程池的一个示例。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多进程和进程池的使用</span></span><br><span class="line"><span class="string">多线程因为GIL的存在不能够发挥CPU的多核特性</span></span><br><span class="line"><span class="string">对于计算密集型任务应该考虑使用多进程</span></span><br><span class="line"><span class="string">time python3 example22.py</span></span><br><span class="line"><span class="string">real    0m11.512s</span></span><br><span class="line"><span class="string">user    0m39.319s</span></span><br><span class="line"><span class="string">sys     0m0.169s</span></span><br><span class="line"><span class="string">使用多进程后实际执行时间为11.512秒，而用户时间39.319秒约为实际执行时间的4倍</span></span><br><span class="line"><span class="string">这就证明我们的程序通过多进程使用了CPU的多核特性，而且这台计算机配置了4核的CPU</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">PRIMES = [</span><br><span class="line">    <span class="number">1116281</span>,</span><br><span class="line">    <span class="number">1297337</span>,</span><br><span class="line">    <span class="number">104395303</span>,</span><br><span class="line">    <span class="number">472882027</span>,</span><br><span class="line">    <span class="number">533000389</span>,</span><br><span class="line">    <span class="number">817504243</span>,</span><br><span class="line">    <span class="number">982451653</span>,</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">112582705942171</span>,</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">115280095190773</span>,</span><br><span class="line">    <span class="number">115797848077099</span>,</span><br><span class="line">    <span class="number">1099726899285419</span></span><br><span class="line">] * <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断素数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    sqrt_n = <span class="built_in">int</span>(math.floor(math.sqrt(n)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, sqrt_n + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> number, prime <span class="keyword">in</span> <span class="built_in">zip</span>(PRIMES, executor.<span class="built_in">map</span>(is_prime, PRIMES)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%d is prime: %s&#x27;</span> % (number, prime))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：<strong>多线程和多进程的比较</strong>。</p><p>以下情况需要使用多线程：</p><ol><li>程序需要维护许多共享的状态（尤其是可变状态），Python中的列表、字典、集合都是线程安全的，所以使用线程而不是进程维护共享状态的代价相对较小。</li><li>程序会花费大量时间在I&#x2F;O操作上，没有太多并行计算的需求且不需占用太多的内存。</li></ol><p>以下情况需要使用多进程：</p><ol><li>程序执行计算密集型任务（如：字节码操作、数据处理、科学计算）。</li><li>程序的输入可以并行的分成块，并且可以将运算结果合并。</li><li>程序在内存使用方面没有任何限制且不强依赖于I&#x2F;O操作（如：读写文件、套接字等）。</li></ol></blockquote><ul><li>异步处理：从调度程序的任务队列中挑选任务，该调度程序以交叉的形式执行这些任务，我们并不能保证任务将以某种顺序去执行，因为执行顺序取决于队列中的一项任务是否愿意将CPU处理时间让位给另一项任务。异步任务通常通过多任务协作处理的方式来实现，由于执行时间和顺序的不确定，因此需要通过回调式编程或者<code>future</code>对象来获取任务执行的结果。Python 3通过<code>asyncio</code>模块和<code>await</code>和<code>async</code>关键字（在Python 3.7中正式被列为关键字）来支持异步处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异步I/O - async / await</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_generator</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;指定范围的数字生成器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> <span class="built_in">range</span>(m, n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">prime_filter</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;素数过滤器&quot;&quot;&quot;</span></span><br><span class="line">    primes = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num_generator(m, n):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(i ** <span class="number">0.5</span> + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Prime =&gt;&#x27;</span>, i)</span><br><span class="line">            primes.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.001</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(primes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">square_mapper</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;平方映射器&quot;&quot;&quot;</span></span><br><span class="line">    squares = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num_generator(m, n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Square =&gt;&#x27;</span>, i * i)</span><br><span class="line">        squares.append(i * i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.001</span>)</span><br><span class="line">    <span class="keyword">return</span> squares</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    future = asyncio.gather(prime_filter(<span class="number">2</span>, <span class="number">100</span>), square_mapper(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">    future.add_done_callback(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(x.result()))</span><br><span class="line">    loop.run_until_complete(future)</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：上面的代码使用<code>get_event_loop</code>函数获得系统默认的事件循环，通过<code>gather</code>函数可以获得一个<code>future</code>对象，<code>future</code>对象的<code>add_done_callback</code>可以添加执行完成时的回调函数，<code>loop</code>对象的<code>run_until_complete</code>方法可以等待通过<code>future</code>对象获得协程执行结果。</p></blockquote><p>Python中有一个名为<code>aiohttp</code>的三方库，它提供了异步的HTTP客户端和服务器，这个三方库可以跟<code>asyncio</code>模块一起工作，并提供了对<code>Future</code>对象的支持。Python 3.6中引入了async和await来定义异步执行的函数以及创建异步上下文，在Python 3.7中它们正式成为了关键字。下面的代码异步的从5个URL中获取页面并通过正则表达式的命名捕获组提取了网站的标题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\&lt;title\&gt;(?P&lt;title&gt;.*)\&lt;\/title\&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_page</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, ssl=<span class="literal">False</span>) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> resp.text()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">show_title</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        html = <span class="keyword">await</span> fetch_page(session, url)</span><br><span class="line">        <span class="built_in">print</span>(PATTERN.search(html).group(<span class="string">&#x27;title&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = (<span class="string">&#x27;https://www.python.org/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://git-scm.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www.jd.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www.taobao.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www.douban.com/&#x27;</span>)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [show_title(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：<strong>异步I&#x2F;O与多进程的比较</strong>。</p><p>当程序不需要真正的并发性或并行性，而是更多的依赖于异步处理和回调时，asyncio就是一种很好的选择。如果程序中有大量的等待与休眠时，也应该考虑asyncio，它很适合编写没有实时数据处理需求的Web应用服务器。</p></blockquote><p>Python还有很多用于处理并行任务的三方库，例如：joblib、PyMP等。实际开发中，要提升系统的可扩展性和并发性通常有垂直扩展（增加单个节点的处理能力）和水平扩展（将单个节点变成多个节点）两种做法。可以通过消息队列来实现应用程序的解耦合，消息队列相当于是多线程同步队列的扩展版本，不同机器上的应用程序相当于就是线程，而共享的分布式消息队列就是原来程序中的Queue。消息队列（面向消息的中间件）的最流行和最标准化的实现是AMQP（高级消息队列协议），AMQP源于金融行业，提供了排队、路由、可靠传输、安全等功能，最著名的实现包括：Apache的ActiveMQ、RabbitMQ等。</p><p>要实现任务的异步化，可以使用名为Celery的三方库。Celery是Python编写的分布式任务队列，它使用分布式消息进行工作，可以基于RabbitMQ或Redis来作为后端的消息代理。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;算法：解决问题的方法和步骤&lt;/li&gt;
&lt;li&gt;评价算法的好坏：渐近时间复杂度和渐近空间复杂度。&lt;/li&gt;
&lt;li&gt;渐近时间复杂度的大O标记：&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(c)&quot; style=&quot;margin-bottom: 0; display:inline;&quot; /&gt; - 常量时间复杂度 - 布隆过滤器 &amp;#x2F; 哈希存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(log_2n)&quot; style=&quot;margin-bottom: 0; display:inline;&quot; /&gt; - 对数时间复杂度 - 折半查找（二分查找）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(n)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 线性时间复杂度 - 顺序查找 &amp;#x2F; 桶排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(n*log_2n)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 对数线性时间复杂度 - 高级排序算法（归并排序、快速排序）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(n^2)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 平方时间复杂度 - 简单排序算法（选择排序、插入排序、冒泡排序）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(n^3)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 立方时间复杂度 - Floyd算法 &amp;#x2F; 矩阵乘法运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(2^n)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 几何级数时间复杂度 - 汉诺塔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?O(n!)&quot; style=&quot;margin-bottom: 0; display:inline;&quot;/&gt; - 阶乘时间复杂度 - 旅行经销商问题 - NP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://aichiko0225.github.com/memoirs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-100天(一)</title>
    <link href="https://aichiko0225.github.com/memoirs/20200305/python/Python-100-1/"/>
    <id>https://aichiko0225.github.com/memoirs/20200305/python/Python-100-1/</id>
    <published>2020-03-05T15:54:55.000Z</published>
    <updated>2024-12-13T03:02:29.984Z</updated>
    
    <content type="html"><![CDATA[<p>之前<code>Python</code>就已经学过了，<code>Flask</code>也玩的一溜一溜的。<br>但是间隔时间有些长，所以就找个一个项目重新温习一下，顺便记录一下。<br>这个系列文章会根据 <code>Python - 100天</code> 的流程走下去，当然其中有一些重复性的我就不介绍了，<code>Django</code>这个就不介绍了，因为跟<code>Flask</code>重复了，而且<code>Django</code>体量太大，不适合拿来用于学习。</p><span id="more"></span><h3 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h3><h4 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h4><ol><li>1989年圣诞节：Guido von Rossum开始写<code>Python</code>语言的编译器。</li><li>1991年2月：第一个<code>Python</code>编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，<code>Python</code>已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li><li>1994年1月：<code>Python 1.0</code>正式发布。</li><li>2000年10月16日：<code>Python 2.0</code>发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的支持。与此同时，<code>Python</code>的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li><li>2008年12月3日：<code>Python 3.0</code>发布，它并不完全兼容之前的<code>Python</code>代码，不过因为目前还有不少公司在项目和运维中使用<code>Python 2.x</code>版本，所以<code>Python 3.x</code>的很多新特性后来也被移植到<code>Python 2.6/2.7</code>版本中。</li></ol><p>目前我们使用的<code>Python 3.7.x</code>的版本是在2018年发布的，<code>Python</code>的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对<code>Python</code>的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的博文。</p><h4 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h4><p><code>Python</code>的优点很多，简单的可以总结为以下几点。</p><ol><li>简单和明确，做一件事只有一种方法。</li><li>学习曲线低，跟其他很多语言相比，<code>Python</code>更容易上手。</li><li>开放源代码，拥有强大的社区和生态圈。</li><li>解释型语言，天生具有平台可移植性。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>可扩展性和可嵌入性，例如在<code>Python</code>中可以调用<code>C/C++</code>代码。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p><code>Python</code>的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，因此计算密集型任务可以由<code>C/C++</code>编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h4 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h4><p>目前<code>Python</code>在<code>Web</code>应用开发、云基础设施、<code>DevOps</code>、网络数据采集（爬虫）、数据分析挖掘、机器学习等领域都有着广泛的应用，因此也产生了<code>Web</code>后端开发、数据接口开发、自动化运维、自动化测试、科学计算和可视化、数据分析、量化交易、机器人开发、自然语言处理、图像识别等一系列相关的职位。</p><h3 id="100天计划-Day01-15"><a href="#100天计划-Day01-15" class="headerlink" title="100天计划 - Day01~15"></a>100天计划 - Day01~15</h3><p>基础知识就不详细介绍了，这个可以在下面这个网站上学习。<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><strong>Day01~15</strong> - <strong>Python语言基础</strong></p><p>当然也可以查看已经整理好的简要文档</p><h4 id="Day01-初识Python"><a href="#Day01-初识Python" class="headerlink" title="Day01 - 初识Python"></a>Day01 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/01.%E5%88%9D%E8%AF%86Python.md">初识Python</a></h4><ul><li>Python简介 - Python的历史 &#x2F; Python的优缺点 &#x2F; Python的应用领域</li><li>搭建编程环境 - Windows环境 &#x2F; Linux环境 &#x2F; MacOS环境</li><li>从终端运行Python程序 - Hello, world &#x2F; print函数 &#x2F; 运行程序</li><li>使用IDLE - 交互式环境(REPL) &#x2F; 编写多行代码 &#x2F; 运行程序 &#x2F; 退出IDLE</li><li>注释 - 注释的作用 &#x2F; 单行注释 &#x2F; 多行注释</li></ul><h4 id="Day02-语言元素"><a href="#Day02-语言元素" class="headerlink" title="Day02 - 语言元素"></a>Day02 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md">语言元素</a></h4><ul><li>程序和进制 - 指令和程序 &#x2F; 冯诺依曼机 &#x2F; 二进制和十进制 &#x2F; 八进制和十六进制</li><li>变量和类型 - 变量的命名 &#x2F; 变量的使用 &#x2F; input函数 &#x2F; 检查变量类型 &#x2F; 类型转换</li><li>数字和字符串 - 整数 &#x2F; 浮点数 &#x2F; 复数 &#x2F; 字符串 &#x2F; 字符串基本操作 &#x2F; 字符编码</li><li>运算符 - 数学运算符 &#x2F; 赋值运算符 &#x2F; 比较运算符 &#x2F; 逻辑运算符 &#x2F; 身份运算符 &#x2F; 运算符的优先级</li><li>应用案例 - 华氏温度转换成摄氏温度 &#x2F; 输入圆的半径计算周长和面积 &#x2F; 输入年份判断是否是闰年</li></ul><h4 id="Day03-分支结构"><a href="#Day03-分支结构" class="headerlink" title="Day03 - 分支结构"></a>Day03 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/03.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.md">分支结构</a></h4><ul><li>分支结构的应用场景 - 条件 &#x2F; 缩进 &#x2F; 代码块 &#x2F; 流程图</li><li>if语句 - 简单的if &#x2F; if-else结构 &#x2F; if-elif-else结构 &#x2F; 嵌套的if</li><li>应用案例 - 用户身份验证 &#x2F; 英制单位与公制单位互换 &#x2F; 掷骰子决定做什么 &#x2F; 百分制成绩转等级制 &#x2F; 分段函数求值 &#x2F; 输入三条边的长度如果能构成三角形就计算周长和面积</li></ul><h4 id="Day04-循环结构"><a href="#Day04-循环结构" class="headerlink" title="Day04 - 循环结构"></a>Day04 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/04.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.md">循环结构</a></h4><ul><li>循环结构的应用场景 - 条件 &#x2F; 缩进 &#x2F; 代码块 &#x2F; 流程图</li><li>while循环 - 基本结构 &#x2F; break语句 &#x2F; continue语句</li><li>for循环 - 基本结构 &#x2F; range类型 &#x2F; 循环中的分支结构 &#x2F; 嵌套的循环 &#x2F; 提前结束程序 </li><li>应用案例 - 1~100求和 &#x2F; 判断素数 &#x2F; 猜数字游戏 &#x2F; 打印九九表 &#x2F; 打印三角形图案 &#x2F; 猴子吃桃 &#x2F; 百钱百鸡</li></ul><h4 id="Day05-05-构造程序逻辑"><a href="#Day05-05-构造程序逻辑" class="headerlink" title="Day05 - 05.构造程序逻辑"></a>Day05 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/05.%E6%9E%84%E9%80%A0%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91.md">05.构造程序逻辑</a></h4><ul><li>经典案例：水仙花数 &#x2F; 百钱百鸡 &#x2F; Craps赌博游戏</li><li>练习题目：斐波那契数列 &#x2F; 完美数 &#x2F; 素数</li></ul><h4 id="Day06-函数和模块的使用"><a href="#Day06-函数和模块的使用" class="headerlink" title="Day06 - 函数和模块的使用"></a>Day06 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.md">函数和模块的使用</a></h4><ul><li>函数的作用 - 代码的坏味道 &#x2F; 用函数封装功能模块</li><li>定义函数 - def语句 &#x2F; 函数名 &#x2F; 参数列表 &#x2F; return语句 &#x2F; 调用自定义函数</li><li>调用函数 - Python内置函数 &#x2F;  导入模块和函数</li><li>函数的参数 - 默认参数 &#x2F; 可变参数 &#x2F; 关键字参数 &#x2F; 命名关键字参数</li><li>函数的返回值 - 没有返回值  &#x2F; 返回单个值 &#x2F; 返回多个值</li><li>作用域问题 - 局部作用域 &#x2F; 嵌套作用域 &#x2F; 全局作用域 &#x2F; 内置作用域 &#x2F; 和作用域相关的关键字</li><li>用模块管理函数 - 模块的概念 &#x2F; 用自定义模块管理函数 &#x2F; 命名冲突的时候会怎样（同一个模块和不同的模块）</li></ul><h4 id="Day07-字符串和常用数据结构"><a href="#Day07-字符串和常用数据结构" class="headerlink" title="Day07 - 字符串和常用数据结构"></a>Day07 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">字符串和常用数据结构</a></h4><ul><li>字符串的使用 - 计算长度 &#x2F; 下标运算 &#x2F; 切片 &#x2F; 常用方法</li><li>列表基本用法 - 定义列表 &#x2F; 用下表访问元素 &#x2F; 下标越界 &#x2F; 添加元素 &#x2F; 删除元素 &#x2F; 修改元素 &#x2F; 切片 &#x2F; 循环遍历</li><li>列表常用操作 - 连接 &#x2F; 复制(复制元素和复制数组) &#x2F; 长度 &#x2F; 排序 &#x2F; 倒转 &#x2F; 查找</li><li>生成列表 - 使用range创建数字列表 &#x2F; 生成表达式 &#x2F; 生成器</li><li>元组的使用 - 定义元组 &#x2F; 使用元组中的值 &#x2F; 修改元组变量 &#x2F; 元组和列表转换</li><li>集合基本用法 - 集合和列表的区别 &#x2F;  创建集合 &#x2F; 添加元素 &#x2F; 删除元素 &#x2F;  清空</li><li>集合常用操作 - 交集 &#x2F; 并集 &#x2F; 差集 &#x2F; 对称差 &#x2F; 子集 &#x2F; 超集</li><li>字典的基本用法 - 字典的特点 &#x2F; 创建字典 &#x2F; 添加元素 &#x2F; 删除元素 &#x2F; 取值 &#x2F; 清空</li><li>字典常用操作 - keys()方法 &#x2F; values()方法 &#x2F; items()方法 &#x2F; setdefault()方法</li><li>基础练习 - 跑马灯效果 &#x2F; 列表找最大元素 &#x2F; 统计考试成绩的平均分 &#x2F; Fibonacci数列 &#x2F; 杨辉三角</li><li>综合案例 - 双色球选号 &#x2F; 井字棋</li></ul><h4 id="Day08-面向对象编程基础"><a href="#Day08-面向对象编程基础" class="headerlink" title="Day08 - 面向对象编程基础"></a>Day08 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.md">面向对象编程基础</a></h4><ul><li>类和对象 - 什么是类 &#x2F; 什么是对象 &#x2F; 面向对象其他相关概念</li><li>定义类 - 基本结构 &#x2F; 属性和方法 &#x2F; 构造器 &#x2F; 析构器 &#x2F; __str__方法</li><li>使用对象 - 创建对象 &#x2F; 给对象发消息</li><li>面向对象的四大支柱 - 抽象 &#x2F; 封装 &#x2F; 继承 &#x2F; 多态</li><li>基础练习 - 定义学生类 &#x2F; 定义时钟类 &#x2F; 定义图形类 &#x2F; 定义汽车类</li></ul><h4 id="Day09-面向对象进阶"><a href="#Day09-面向对象进阶" class="headerlink" title="Day09 - 面向对象进阶"></a>Day09 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.md">面向对象进阶</a></h4><ul><li>属性 - 类属性 &#x2F; 实例属性 &#x2F; 属性访问器 &#x2F; 属性修改器 &#x2F; 属性删除器 &#x2F; 使用__slots__</li><li>类中的方法 - 实例方法 &#x2F; 类方法 &#x2F; 静态方法</li><li>运算符重载 - __add__ &#x2F; __sub__ &#x2F; __or__ &#x2F;__getitem__ &#x2F; __setitem__ &#x2F; __len__ &#x2F; __repr__ &#x2F; __gt__ &#x2F; __lt__ &#x2F; __le__ &#x2F; __ge__ &#x2F; __eq__ &#x2F; __ne__ &#x2F; __contains__ </li><li>类(的对象)之间的关系 - 关联 &#x2F; 继承 &#x2F; 依赖</li><li>继承和多态 - 什么是继承 &#x2F; 继承的语法 &#x2F; 调用父类方法 &#x2F; 方法重写 &#x2F; 类型判定 &#x2F; 多重继承 &#x2F; 菱形继承(钻石继承)和C3算法</li><li>综合案例 - 工资结算系统 &#x2F; 图书自动折扣系统 &#x2F; 自定义分数类</li></ul><h4 id="Day10-图形用户界面和游戏开发"><a href="#Day10-图形用户界面和游戏开发" class="headerlink" title="Day10 - 图形用户界面和游戏开发"></a>Day10 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/10.%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91.md">图形用户界面和游戏开发</a></h4><ul><li>使用tkinter开发GUI程序</li><li>使用pygame三方库开发游戏应用</li><li>“大球吃小球”游戏</li></ul><h4 id="Day11-文件和异常"><a href="#Day11-文件和异常" class="headerlink" title="Day11 - 文件和异常"></a>Day11 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/11.%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8.md">文件和异常</a></h4><ul><li>读文件 - 读取整个文件 &#x2F; 逐行读取 &#x2F; 文件路径</li><li>写文件 - 覆盖写入 &#x2F; 追加写入 &#x2F; 文本文件 &#x2F; 二进制文件</li><li>异常处理 - 异常机制的重要性 &#x2F; try-except代码块 &#x2F; else代码块 &#x2F; finally代码块 &#x2F; 内置异常类型 &#x2F; 异常栈 &#x2F; raise语句</li><li>数据持久化 - CSV文件概述 &#x2F; csv模块的应用 &#x2F; JSON数据格式 &#x2F; json模块的应用</li></ul><h4 id="Day12-字符串和正则表达式"><a href="#Day12-字符串和正则表达式" class="headerlink" title="Day12 - 字符串和正则表达式"></a>Day12 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md">字符串和正则表达式</a></h4><ul><li>字符串高级操作 - 转义字符 &#x2F; 原始字符串 &#x2F; 多行字符串 &#x2F; in和 not in运算符 &#x2F; is开头的方法 &#x2F; join和split方法 &#x2F; strip相关方法 &#x2F; pyperclip模块 &#x2F; 不变字符串和可变字符串 &#x2F; StringIO的使用</li><li>正则表达式入门 - 正则表达式的作用 &#x2F; 元字符 &#x2F; 转义 &#x2F; 量词 &#x2F; 分组 &#x2F; 零宽断言 &#x2F;贪婪匹配与惰性匹配懒惰 &#x2F; 使用re模块实现正则表达式操作（匹配、搜索、替换、捕获）</li><li>使用正则表达式 - re模块 &#x2F; compile函数 &#x2F; group和groups方法 &#x2F; match方法 &#x2F; search方法 &#x2F; findall和finditer方法 &#x2F; sub和subn方法 &#x2F; split方法</li><li>应用案例 - 使用正则表达式验证输入的字符串</li></ul><h4 id="Day13-进程和线程"><a href="#Day13-进程和线程" class="headerlink" title="Day13 - 进程和线程"></a>Day13 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md">进程和线程</a></h4><ul><li>进程和线程的概念 - 什么是进程 &#x2F; 什么是线程 &#x2F; 多线程的应用场景</li><li>使用进程 - fork函数 &#x2F; multiprocessing模块 &#x2F; 进程池 &#x2F; 进程间通信</li><li>使用线程 - thread模块 &#x2F; threading模块 &#x2F; Thread类 &#x2F; Lock类 &#x2F; Condition类 &#x2F; 线程池</li></ul><h4 id="Day14-网络编程入门和网络应用开发"><a href="#Day14-网络编程入门和网络应用开发" class="headerlink" title="Day14 - 网络编程入门和网络应用开发"></a>Day14 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/14.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.md">网络编程入门和网络应用开发</a></h4><ul><li>计算机网络基础 - 计算机网络发展史 &#x2F; “TCP-IP”模型 &#x2F; IP地址 &#x2F; 端口 &#x2F; 协议 &#x2F; 其他相关概念</li><li>网络应用模式 - “客户端-服务器”模式 &#x2F; “浏览器-服务器”模式</li><li>基于HTTP协议访问网络资源 - 网络API概述 &#x2F; 访问URL &#x2F; requests模块 &#x2F; 解析JSON格式数据</li><li>Python网络编程 - 套接字的概念 &#x2F; socket模块 &#x2F;  socket函数 &#x2F; 创建TCP服务器 &#x2F; 创建TCP客户端 &#x2F; 创建UDP服务器 &#x2F; 创建UDP客户端 &#x2F; SocketServer模块</li><li>电子邮件 - SMTP协议 &#x2F; POP3协议 &#x2F; IMAP协议 &#x2F; smtplib模块 &#x2F; poplib模块 &#x2F; imaplib模块</li><li>短信服务 - 调用短信服务网关</li></ul><h4 id="Day15-图像和办公文档处理"><a href="#Day15-图像和办公文档处理" class="headerlink" title="Day15 - 图像和办公文档处理"></a>Day15 - <a href="https://github.com/aichiko0225/Python-100-Days/blob/master/Day01-15/15.%E5%9B%BE%E5%83%8F%E5%92%8C%E5%8A%9E%E5%85%AC%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86.md">图像和办公文档处理</a></h4><ul><li>用Pillow处理图片 - 图片读写 &#x2F; 图片合成 &#x2F; 几何变换 &#x2F; 色彩转换 &#x2F; 滤镜效果</li><li>读写Word文档 - 文本内容的处理 &#x2F; 段落 &#x2F; 页眉和页脚 &#x2F; 样式的处理</li><li>读写Excel文件 - xlrd模块 &#x2F; xlwt模块</li><li>生成PDF文件 - pypdf2模块 &#x2F; reportlab模块</li></ul><p>第一篇我们就扯一些稀奇古怪的东西</p><h3 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h3><p>先列出一些<code>Python</code>学习的参考书籍</p><h4 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h4><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h4 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h4><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h4 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h4><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h4 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h4><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol><h3 id="Python编程惯例"><a href="#Python编程惯例" class="headerlink" title="Python编程惯例"></a>Python编程惯例</h3><p>“惯例”这个词指的是“习惯的做法，常规的办法，一贯的做法”，与这个词对应的英文单词叫“idiom”。由于<code>Python</code>跟其他很多编程语言在语法和使用上还是有比较显著的差别，因此作为一个<code>Python</code>开发者如果不能掌握这些惯例，就无法写出“Pythonic”的代码。下面我们总结了一些在<code>Python</code>开发中的惯用的代码。</p><ol><li><p>让代码既可以被导入又可以被执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure></li><li><p>用下面的方式判断逻辑“真”或“假”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> x:</span><br></pre></td></tr></table></figure><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;jackfrued&#x27;</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line">owners = &#123;<span class="string">&#x27;1001&#x27;</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>: <span class="string">&#x27;王大锤&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">and</span> fruits <span class="keyword">and</span> owners:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I love fruits!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;jackfrued&#x27;</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line">owners = &#123;<span class="string">&#x27;1001&#x27;</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>: <span class="string">&#x27;王大锤&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(fruits) &gt; <span class="number">0</span> <span class="keyword">and</span> owners != &#123;&#125;:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I love fruits!&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>善于使用in运算符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x <span class="keyword">in</span> items: <span class="comment"># 包含</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> items: <span class="comment"># 迭代</span></span><br></pre></td></tr></table></figure><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Hao LUO&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;L&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The name has an L in it.&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Hao LUO&#x27;</span></span><br><span class="line"><span class="keyword">if</span> name.find(<span class="string">&#x27;L&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This name has an L in it!&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>不使用临时变量交换两个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure></li><li><p>用序列构建字符串。</p><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">name = <span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment"># jackfrued</span></span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">    name += char</span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment"># jackfrued</span></span><br></pre></td></tr></table></figure></li><li><p>EAFP优于LBYL。</p><p>EAFP - <strong>E</strong>asier to <strong>A</strong>sk <strong>F</strong>orgiveness than <strong>P</strong>ermission.</p><p>LBYL - <strong>L</strong>ook <strong>B</strong>efore <strong>Y</strong>ou <strong>L</strong>eap.</p><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = <span class="built_in">int</span>(d[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">except</span> (KeyError, TypeError, ValueError):</span><br><span class="line">    value = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> d <span class="keyword">and</span> <span class="built_in">isinstance</span>(d[<span class="string">&#x27;x&#x27;</span>], <span class="built_in">str</span>) \</span><br><span class="line"><span class="keyword">and</span> d[<span class="string">&#x27;x&#x27;</span>].isdigit():</span><br><span class="line">    value = <span class="built_in">int</span>(d[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p>使用enumerate进行迭代。</p><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line"><span class="built_in">print</span>(index, <span class="string">&#x27;:&#x27;</span>, fruit)</span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(index, <span class="string">&#x27;:&#x27;</span>, fruit)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>用生成式生成列表。</p><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">11</span>]</span><br><span class="line">result = [num * <span class="number">3</span> <span class="keyword">for</span> num <span class="keyword">in</span> data <span class="keyword">if</span> num &gt; <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [60, 45, 33]</span></span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">11</span>]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span>:</span><br><span class="line">        result.append(i * <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [60, 45, 33]</span></span><br></pre></td></tr></table></figure></li><li><p>用zip组合键和值来创建字典。</p><p><strong>好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>]</span><br><span class="line">values = [<span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;王大锤&#x27;</span>, <span class="string">&#x27;白元芳&#x27;</span>]</span><br><span class="line">d = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p><strong>不好</strong>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>]</span><br><span class="line">values = [<span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;王大锤&#x27;</span>, <span class="string">&#x27;白元芳&#x27;</span>]</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">    d[key] = values[i]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>说明</strong>：这篇文章的内容来自于网络，有兴趣的读者可以阅读<a href="http://safehammad.com/downloads/python-idioms-2014-01-16.pdf">原文</a>。</p></blockquote><h3 id="PEP8风格指南"><a href="#PEP8风格指南" class="headerlink" title="PEP8风格指南"></a>PEP8风格指南</h3><p><code>PEP</code>是<code>Python Enhancement Proposal</code>的缩写，通常翻译为“Python增强提案”。每个<code>PEP</code>都是一份为<code>Python</code>社区提供的指导<code>Python</code>往更好的方向发展的技术文档，其中的第8号增强提案（<code>PEP 8</code>）是针对<code>Python</code>语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写<code>Python</code>代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从<code>Python</code>官方网站的PEP 8链接中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p><h4 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h4><ol><li>使用空格来表示缩进而不要用制表符（<code>Tab</code>）。这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道<code>Python</code>并没有像<code>C/C++</code>或<code>Java</code>那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此<code>Python</code>代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，<code>Tab</code>的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用<code>Tab</code>来表示缩进对<code>Python</code>代码来说可能是一场灾难。</li><li>和语法相关的每一层缩进都用4个空格来表示。</li><li>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</li><li>函数和类的定义，代码前后都要用两个空行进行分隔。</li><li>同一个类中，各个方法之间应该用一个空行进行分隔。</li><li>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</li></ol><h4 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h4><p><code>PEP 8</code>倡导用不同的命名风格来命名<code>Python</code>中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在<code>Python</code>中扮演了怎样的角色（在这一点上，<code>Python</code>自己的内置模块以及某些第三方模块都做得并不是很好）。</p><ol><li>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</li><li>类中受保护的实例属性，应该以一个下划线开头。</li><li>类中私有的实例属性，应该以两个下划线开头。</li><li>类和异常的命名，应该每个单词首字母大写。</li><li>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</li><li>类的实例方法，应该把第一个参数命名为<code>self</code>以表示对象自身。</li><li>类的类方法，应该把第一个参数命名为<code>cls</code>以表示该类自身。</li></ol><h4 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h4><p>在<code>Python</code>之禅（可以使用<code>import this</code>查看）中有这么一句名言：**”There should be one– and preferably only one –obvious way to do it.”**，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在<code>PEP 8</code>中也是无处不在的。</p><ol><li>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如<code>if a is not b</code>就比<code>if not a is b</code>更容易让人理解。</li><li>不要用检查长度的方式来判断字符串、列表等是否为<code>None</code>或者没有元素，应该用<code>if not x</code>这样的写法来检查它。</li><li>就算<code>if</code>分支、<code>for</code>循环、<code>except</code>异常捕获等中只有一行代码，也不要将代码和<code>if</code>、<code>for</code>、<code>except</code>等写在一起，分开写才会让代码更清晰。</li><li><code>import</code>语句总是放在文件开头的地方。</li><li>引入模块的时候，<code>from math import sqrt</code>比<code>import math</code>更好。</li><li>如果有多个<code>import</code>语句，应该将其分为三部分，从上到下分别是<code>Python</code><strong>标准模块</strong>、<strong>第三方模块</strong>和<strong>自定义模块</strong>，每个部分内部应该按照模块名称的字母表顺序来排列。</li></ol><h3 id="Zen-of-Python（Python之禅）"><a href="#Zen-of-Python（Python之禅）" class="headerlink" title="Zen of Python（Python之禅）"></a>Zen of Python（Python之禅）</h3><blockquote><p>Beautiful is better than ugly. （优美比丑陋好）<br>Explicit is better than implicit.（清晰比晦涩好）<br>Simple is better than complex.（简单比复杂好）<br>Complex is better than complicated.（复杂比错综复杂好）<br>Flat is better than nested.（扁平比嵌套好）<br>Sparse is better than dense.（稀疏比密集好）<br>Readability counts.（可读性很重要）<br>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br>Although practicality beats purity.（但现实往往并不那么完美）<br>Errors should never pass silently.（异常不应该被静默处理）<br>Unless explicitly silenced.（除非你希望如此）<br>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）<br>Now is better than never.（现在开始做比不做好）<br>Although never is often better than *right* now.（不做比盲目去做好^极限编程中的YAGNI原则^）<br>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）<br>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）  </p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前&lt;code&gt;Python&lt;/code&gt;就已经学过了，&lt;code&gt;Flask&lt;/code&gt;也玩的一溜一溜的。&lt;br&gt;但是间隔时间有些长，所以就找个一个项目重新温习一下，顺便记录一下。&lt;br&gt;这个系列文章会根据 &lt;code&gt;Python - 100天&lt;/code&gt; 的流程走下去，当然其中有一些重复性的我就不介绍了，&lt;code&gt;Django&lt;/code&gt;这个就不介绍了，因为跟&lt;code&gt;Flask&lt;/code&gt;重复了，而且&lt;code&gt;Django&lt;/code&gt;体量太大，不适合拿来用于学习。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://aichiko0225.github.com/memoirs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程进阶</title>
    <link href="https://aichiko0225.github.com/memoirs/20200217/reverse-progression/"/>
    <id>https://aichiko0225.github.com/memoirs/20200217/reverse-progression/</id>
    <published>2020-02-17T07:16:48.000Z</published>
    <updated>2024-12-13T03:01:18.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果您是iOS开发，具备相应的开发储备，除了需要了解逆向的基础，同样需要<br>知道程序的运行原理。</p><p>下面会介绍逆向工程相关的进阶知识，理论知识比较枯燥，但是确实必须要掌握的。</p><span id="more"></span><h2 id="程序加载"><a href="#程序加载" class="headerlink" title="程序加载"></a>程序加载</h2><p>在编写一个应用程序时，我们看到的入口函数是<code>main.m</code>里面的<code>main</code>函数，因此我们一般会以为程序是从这里开始执行的。其实不然，程序在执行<code>main</code>函数之前已经执行了<code>+load</code>和<code>constructor</code>构造函数。接下来，让我们一起看看在<code>main</code>函数执行之前都发生了什么。</p><h3 id="dyld简介"><a href="#dyld简介" class="headerlink" title="dyld简介"></a>dyld简介</h3><p>程序在运行时会依赖很多系统动态库。系统动态库会通过动态库加载器（默认是<code>/usr/lib/dyld</code>）加载到内存中，系统内核在做好启动程序的准备工作之后就会将工作交给<code>dyld</code>。由于很多程序都需要使用系统动态库，不可能每个程序加载时都去加载所有的系统动态库，为了优化程序启动速度和利用动态库缓存，<code>iOS</code>系统采用了共享缓存技术。<code>dyld</code>缓存在<code>iOS</code>系统中，位于<code>/System/Library/Caches/com.apple.dyld/</code>目录下，按照不同架构保存不同的文件。</p><h3 id="dyld加载流程"><a href="#dyld加载流程" class="headerlink" title="dyld加载流程"></a>dyld加载流程</h3><p>要想知道<code>+load</code>和<code>constructor</code>是在什么时候调用的，就需要分析<code>dyld</code>加载<code>Mach-O</code>文件的流程。<code>dyld</code>的代码可以从苹果开源网站下载。从<code>dyldStartup.s</code>文件开始执行，其中用汇编实现的<code>__dyld_start</code>方法里面调用了<code>dyldbootstrap::start()</code>方法，然后调用了<code>dyld</code>的<code>main</code>函数。</p><p><code>dyld</code>的加载流程主要包括9个步骤</p><ol><li>设置上下文信息，配置进程是否受限</li><li>配置环境变量，获取当前运行架构</li><li>加载可执行文件，生成一个<code>ImageLoader</code>实例对象</li><li>检查共享缓存是否映射到了共享区域</li><li>加载所有插入的库</li><li>链接主程序</li><li>链接所有插入的库，执行符号替换</li><li>执行初始化方法</li><li>寻找主程序入口</li></ol><p><code>initializeMainExecutable</code>执行初始化方法，<code>+load</code>和<code>constructor</code>方法就是在这里执行的。</p><h2 id="Mach-O文件格式"><a href="#Mach-O文件格式" class="headerlink" title="Mach-O文件格式"></a>Mach-O文件格式</h2><p><code>Mach-O</code> 文件比较重要，了解<code>Mach-O</code>文件结构后可以更好地进行逆向工程。</p><h3 id="Mach-O文件的基础格式"><a href="#Mach-O文件的基础格式" class="headerlink" title="Mach-O文件的基础格式"></a>Mach-O文件的基础格式</h3><p><code>Mach-O</code>的文件结构包括：Mach-O头部、Load Command、Section、Other Data。</p><p><img src="/memoirs/images/Math-O_1.png" alt="Math-O文件的基础结构"></p><h3 id="Mach-O头部"><a href="#Mach-O头部" class="headerlink" title="Mach-O头部"></a>Mach-O头部</h3><p>Header部分由以下部分组成:</p><ul><li>magic: Mach-O 文件的魔数。FAT为<code>0xcafebabe</code>，ARMv7为<code>0xfeedface</code>，ARM64为<code>0xfeedfacf</code>（Mac是小端模式）</li><li>cputype、cpusubtype: <code>CPU</code>架构和子版本</li><li>filetype: 文件类型。</li><li>ncmds: 加载命令的数量</li><li>sizeofcmds: 所有加载命令的大小</li><li>flags: <code>dyld</code>加载需要的一些标记。其中，<code>MH_PIE</code>表示启用地址空间布局随机化。</li><li>reserved: 64位的保留字段。</li></ul><p>下面是微信的Header部分</p><p><img src="/memoirs/images/mach-o/mach-wechat.png" alt="Wechat Mach-O Header"></p><h3 id="Load-Command"><a href="#Load-Command" class="headerlink" title="Load Command"></a>Load Command</h3><p>Load Command 告诉操作系统应当如何加载文件中的数据，对系统内核加载器和动态链接器起指导作用。<br>可以使用MachOView 查看 Load Command部分。</p><p>Load Command 包含以下部分:</p><ul><li>LC_SEGMENT_64: 定义一个段，加载后被映射到内存中，包括里面的节。</li><li>LC_DYLD_INFO_ONLY: 记录了有关链接的重要信息，包括在__LINKEDIT中动态链接相关信息的具体偏移和大小。ONLY表示这个加载指令是程序运行所必需的，如果旧的链接器无法识别它，程序就会出错。</li><li>LC_SYMTAB: 为文件定义符号表和字符串表，在链接文件时被链接器使用，同时也用于调试器映射符号到源文件。符号表定义的本地符号仅用于调试，而已定义和未定义的 <code>external</code> 符号被链接器使用。</li><li>LC_DYSYMTAB: 将符号表中给出符号的额外符号信息提供给动态链接器。</li><li>LC_LOAD_DYLINKER: 默认的加载器路径。</li><li>LC_UUUID: 用于标识 Mach-O 文件的ID，也用于崩溃堆栈和符号文件的对应解析。</li><li>LC_VERSION_MIN_IPHONES: 系统要求的最低版本。</li><li>LC_SOURCE_VERSION: 构建二进制文件的源代码版本号。</li><li>LC_MAIN: 程序的入口。<code>dyld</code>获取地址，然后跳转到该处执行。</li><li>LC_ENCRYPTION_INFO_64: 文件是否加密的标志，加密内容的偏移和大小。</li><li>LC_LOAD_DYLIB: 依赖的动态库，包括动态库名称、当前版本号、兼容版本号。可以使用 <code>otool -L xxx</code> 命令查看。</li><li>LC_RPATH: Runpath Search Paths，@rpath 搜索的路径。</li><li>LC_FUNCTION_STARTS: 函数起始地址表，是调试器和其他程序能很容易地看到一个地址是否在函数内。</li><li>LC_DATA_IN_CODE: 定义在代码段内的非指令的表。</li><li>LC_CODE_SIGNAURE: 代码签名信息。</li></ul><p><img src="/memoirs/images/mach-o/mach-wechat-1.png" alt="Mach-O Load Command"></p><p>我们看到Load Command还包含以下4种段</p><ul><li>__PAGEZERO: 空指针陷阱段，映射到虚拟内存空间的第一页，用于捕捉对<code>NULL</code>指针的引用。</li><li>__TEXT: 代码段&#x2F;只读数据段。</li><li>__DATA: 读取和写入数据的段。</li><li>__LINKEDIT: 动态链接器需要使用的信息，包括重定位信息、绑定信息、懒加载信息等。</li></ul><h3 id="懒加载和非懒加载"><a href="#懒加载和非懒加载" class="headerlink" title="懒加载和非懒加载"></a>懒加载和非懒加载</h3><p>iOS系统为了加快系统启动速度，将符号分成了懒加载符号和非懒加载符号。非懒加载符号在<code>dyld</code>加载时就会绑定真实的值；而懒加载符号不会，只有第1次去调用它时才会绑定真实的地址，在第2次调用时直接使用真实的地址。</p><p>这也是<code>fishhook</code>替换符号实现逆向功能的原理，原理会以后详细介绍。</p><p>后面还有 动态库，以及逆向原理会介绍。</p><hr><p>未完待续</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果您是iOS开发，具备相应的开发储备，除了需要了解逆向的基础，同样需要&lt;br&gt;知道程序的运行原理。&lt;/p&gt;
&lt;p&gt;下面会介绍逆向工程相关的进阶知识，理论知识比较枯燥，但是确实必须要掌握的。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="逆向" scheme="https://aichiko0225.github.com/memoirs/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="iOS" scheme="https://aichiko0225.github.com/memoirs/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程基础</title>
    <link href="https://aichiko0225.github.com/memoirs/20200212/reverse-basics/"/>
    <id>https://aichiko0225.github.com/memoirs/20200212/reverse-basics/</id>
    <published>2020-02-12T13:59:08.000Z</published>
    <updated>2024-12-13T03:01:13.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逆向工程简介"><a href="#逆向工程简介" class="headerlink" title="逆向工程简介"></a>逆向工程简介</h2><p>iOS 逆向工程，是指从目标应用的界面以及功能表现入手，使用不同工具和理论知识去分析其实现原理，得出应用的代码结构、整体设计、功能实现、执行流程等，然后利用iOS的系统知识和语言特性，借鉴或修改原有实现流程的技术。</p><span id="more"></span><h2 id="前置基础知识"><a href="#前置基础知识" class="headerlink" title="前置基础知识"></a>前置基础知识</h2><p>学习逆向工程我们需要先了解设备知识，下面我们先介绍一下设备相关的基础知识。</p><h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><p>学习ARM首先要了解下CPU是什么<br><a href="https://zhuanlan.zhihu.com/p/21266987">分不清ARM和X86架构，别跟我说你懂CPU</a><br>Central Processing Unit(CPU)的组成部分</p><ol><li>运算器（ALU- arithmetic logic unit 算术逻辑单元，马达）</li><li>控制器（Control 负责分配指定运算）</li><li>寄存器(Register ARM汇编就是操作寄存器和内存的指令集)</li><li>cpu内部总线（物理）地址线路，数据线路 控制线路(内存读写命令) 地址总线 限制CPU内存地址空间的大小，地址总线宽度为32，2的32次方&#x3D;4GB.个内存单元，一个内存单元可以存放8位数据也就是一个字的数据。cpu访问内存单元时，要给出内存单元的地址，所有的内存单元构成的存储空间是一个一维的线性空间。每一个内存丹云在这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址。 N位结构。比如64位(位机，字长与结构含义相同)，描述了一个cpu具有下面几方面的结构特性<ul><li>运算器一次最多可以处理64位的数据 8个byte</li><li>寄存器的最大宽度为64位</li><li>寄存器和运算器之间的通路为64位。</li><li>对于65位cpu，能一次性处理，传输，暂时存储64位的地址</li></ul></li></ol><blockquote><p>总结：从字面意思看运算器就是起着运算的作用<br>控制器就是负责发出CPU每条指令所需要的信息<br>寄存器就是保存运算或者指令的一些临时文件，这样可以保证更高的速度。</p></blockquote><p>CPU有着处理指令、执行操作、控制时间、处理数据四大作用，打个比喻来说，CPU就像我们的大脑，帮我们完成各种各样的生理活动。因此如果没有CPU，那么电脑就是一堆废物，无法工作。移动设备其实很复杂，这些CPU需要执行数以百万计的指示，才能使它向我们期待的方向运行，而CPU的速度和功率效率是至关重要的。速度影响用户体验，而效率影响电池寿命。最完美的移动设备是高性能和低功耗相结合。</p><p>cup的模式切换，模式和模式间相对独立。说白了就是切换状态 cpu要读取一个内存单元的时候，必须先给出这个内存单元的地址。</p><h4 id="段的概念"><a href="#段的概念" class="headerlink" title="段的概念"></a>段的概念</h4><p>错误认识：<br>内存被划分成了一个一个的段，每一个段有一个段地址。<br>正确认识：<br>内存并没有分段，段的划分来自于CPU，由于CUP用 段地址*16 + 偏移地址 &#x3D; 物理地址 的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。<br>以后，在编程时可以根据需要，将若干地址连续的内存单元看作一个段。<br>偏移地址为16位，16位地址的寻址能力为64k，所以一个段的长度最大64KB。</p><h4 id="为什么需要寄存器"><a href="#为什么需要寄存器" class="headerlink" title="为什么需要寄存器"></a>为什么需要寄存器</h4><p>cup切换状态时，比如funA -&gt; funB,实际上操作的是内存地址，把这些操作内存地址的指令或者内存地址直接放在cpu里，可以更好的控制和提高效率，cpu就需要寄存器来存放这些指令。</p><p>寄存器常用术语</p><ul><li>SP（stack point）栈指针，存储栈地址，指向栈顶</li><li>LR（link register）链接寄存器</li><li>PC（program count）程序技术器</li><li>A\C PSR（program status register）程序状态寄存器</li><li>SPSR(saved program status register)已保存程序状态寄存器</li><li>user模式没有SPSR</li></ul><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p>要了解X86和ARM，就得先了解复杂指令集（CISC)和精简指令集（RISC）</p><ul><li>Complex Instruction Set Computing - CISC</li><li>reduced instruction set computing</li></ul><p>从CPU发明到现在，有非常多种架构，从我们熟悉的X86，ARM，到不太熟悉的MIPS，IA64，它们之间的差距都非常大。但是如果从最基本的逻辑角度来分类的话，它们可以被分为两大类，即所谓的“复杂指令集”与“精简指令集”系统，也就是经常看到的“CISC”与“RISC”。 Intel和ARM处理器的第一个区别是，前者使用复杂指令集（CISC)，而后者使用精简指令集（RISC）。属于这两种类中的各种架构之间最大的区别，在于它们的设计者考虑问题方式的不同。</p><p>我们可以继续举个例子，比如说我们要命令一个人吃饭，那么我们应该怎么命令呢？我们可以直接对他下达“吃饭”的命令，也可以命令他“先拿勺子，然后舀起一勺饭，然后张嘴，然后送到嘴里，最后咽下去”。</p><p>从这里可以看到，对于命令别人做事这样一件事情，不同的人有不同的理解，有人认为，如果我首先给接受命令的人以足够的训练，让他掌握各种复杂技能（即在硬件中实现对应的复杂功能），那么以后就可以用非常简单的命令让他去做很复杂的事情——比如只要说一句“吃饭”，他就会吃饭。</p><p>但是也有人认为这样会让事情变的太复杂，毕竟接受命令的人要做的事情很复杂，如果你这时候想让他吃菜怎么办？难道继续训练他吃菜的方法？我们为什么不可以把事情分为许多非常基本的步骤，这样只需要接受命令的人懂得很少的基本技能，就可以完成同样的工作，无非是下达命令的人稍微累一点——比如现在我要他吃菜，只需要把刚刚吃饭命令里的“舀起一勺饭”改成“舀起一勺菜”，问题就解决了，多么简单。</p><p>这就是“复杂指令集”和“精简指令集”的逻辑区别。</p><p>x86多用于电脑，ARM多用于手机。</p><p>参考文章<br><a href="https://www.anquanke.com/search?s=ARM%20%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E9%80%9F%E6%88%90">ARM汇编以及汇编语言基础介绍</a></p><h2 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h2><p>模拟器32位处理器是i386架构，<br>模拟器64位处理器是x86_64架构，<br>真机32位处理器是armv7,或者armv7s架构，(armv7s 是iPhone5C、armv7是iphone4之前的手机版本)<br>真机64位处理器是arm64架构。（iPhone5s之后的手机）【接下来主要学习的】</p><h3 id="ARM64下的寄存器"><a href="#ARM64下的寄存器" class="headerlink" title="ARM64下的寄存器"></a>ARM64下的寄存器</h3><p>功能:</p><ul><li>进行数据的临时存储</li><li>数据执行算术及逻辑运算</li><li>操作内存(寻址)</li></ul><p>寄存器分类:</p><ol><li><p>通用寄存器（用来存放一般性的数据）</p><ul><li>x0~x30（64位）</li><li>x29 又名fp（用于保存栈底的地址）</li><li>x30 又名 lr（bl 跳转后就会把下一条指令地址写到lr中）</li><li>w0w30（32位）这些就是x0x30的低32位</li></ul></li><li><p>浮点寄存器（CPU中专门提供浮点数寄存器来处理浮点数）</p><ul><li>D0~D31（64位）</li><li>S0<del>S31 （32位）这些就是D0</del>D31的低32位</li></ul></li><li><p>向量寄存器<br>（现在的CPU支持向量运算.(向量运算在图形处理相关的领域用得非常的多)为了支持向量计算系统了也提供了众多的向量寄存器.）</p><ul><li>V0-V31（128位）</li></ul></li><li><p>状态寄存器（又称 CPSR【current program status register】寄存器）</p><ul><li>CPSR寄存器是32位的，每一位的功能如下<br> 31 30 29 28 27~8 7 6 5 4 3 2 1 0<br> N Z C V 保留 I F T M4 M3 M2 M1 M0</li><li>CPSR的低8位（包括I、F、T和M[4：0]）称为控制位，程序无法修改,除非CPU运行于特权模式下,程序才能修改控制位!</li><li>N【负数标志】、Z【0标志】、C【进位标志】、V【溢出标志】均为条件码标志位。</li></ul></li><li><p>栈寄存器</p><ul><li>SP （任意时刻会保存我们栈顶的地址）</li><li>FP （用于保存栈底的地址）</li></ul></li></ol><h3 id="ARM64下常用的汇编指令-重要"><a href="#ARM64下常用的汇编指令-重要" class="headerlink" title="ARM64下常用的汇编指令(重要)"></a>ARM64下常用的汇编指令(重要)</h3><h4 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h4><ul><li>MOV - MOV X1，X0 ; 将寄存器X0的值传送到寄存器X1</li><li>ADD - ADD X0，X1，X2 ; 寄存器X1和X2的值相加后传送到X0</li><li>SUB - SUB X0，X1，X2 ; 寄存器X1和X2的值相减后传送到X0</li><li>AND - AND X0，X0，#0xF ; X0的值与0xF相位与后的值传送到X0</li><li>ORR - ORR X0，X0，#9 ; X0的值与9相或后的值传送到X0</li><li>EOR - EOR X0，X0，#0xF ; X0的值与0xF相异或后的值传送到X0</li></ul><h4 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h4><ul><li>STR - 将数据从寄存器中读出来,存到内存中.<br>STR - STR X0, [SP, #0x8] ；X0寄存器的数据传送到SP+0x8地址值指向的存储空间</li><li>STP - STR 的变种指令，可以同时操作两个寄存器<br>STP x29, x30, [sp, #0x10] ; 将x29,x30存入栈中</li><li>LDR - 将数据从内存中读出来,存到寄存器中<br>LDR X5，[X6，#0x08] ；X6寄存器加0x08的和的地址值内的数据传送到X5</li><li>LDP - LDR 的变种指令，可以同时操作两个寄存器<br>LDP x29, x30, [sp, #0x10] ; 将栈中的值取出存放到x29, x30</li></ul><h4 id="跳转操作"><a href="#跳转操作" class="headerlink" title="跳转操作"></a>跳转操作</h4><ul><li>BL 将下一条指令的地址放入lr(x30)寄存器</li><li>RET 默认使用lr(x30)寄存器的值,通过底层指令提示CPU此处作为下条指令地址!</li><li>CMP 比较指令，相当于SUBS，影响程序状态寄存器<ul><li>B.GT 比较结果是大于，执行标号，否则不跳转</li><li>B.GE 比较结果是大于等于，执行标号，否则不跳转</li><li>B.EQ 比较结果是等于，执行标号，否则不跳转</li><li>B.HI 比较结果是无符号大于，执行标号，否则不跳转</li></ul></li><li>CBZ - CBZ ; 比较（Compare），如果结果为零（Zero）就转移（只能跳到后面的指令）</li><li>CBNZ - CBNZ ; 比较，如果结果非零（Non Zero）就转移（只能跳到后面的指令）</li></ul><h2 id="逆向工具"><a href="#逆向工具" class="headerlink" title="逆向工具"></a>逆向工具</h2><p>对任何平台进行逆向分析时都会借助很多工具，iOS逆向也不例外。以逆向的流程为例，会使用解密工具、class-dump、Cycript、Reveal、Charles、Hopper、IDA、Xcode、Theos等，这些工具都是必须了解的。</p><p>除了使用工具，还需要了解每个工具的实现原理，有哪些值得借鉴的地方。</p><h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><ul><li>iTerm2</li><li>oh-my-zsh</li><li>Go2Shell</li><li>autojump</li><li>Alfred</li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><p>效率提升后，需要一些实用工具来帮助完成某些复杂的操作</p><ul><li>Homebrew</li><li>Cakebrew</li><li>libimobiledevice</li><li>tree</li><li>010 Editor</li></ul><h3 id="逆向工具-1"><a href="#逆向工具-1" class="headerlink" title="逆向工具"></a>逆向工具</h3><p>逆向工具很重要，需要介绍一下</p><ul><li>jtool: 查看文件结构，代码签名</li><li>capstone: 多平台、多架构支持的反汇编框架</li><li>keystone: 将汇编指令转换为 Hex 机器码</li><li>radare2: 开放源代码的逆向工程平台</li><li>mobiledevice: 安装 app 或 ipa 包</li></ul><h3 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h3><p>这些只是我们接触逆向时，必要的准备工作，还有进阶的知识，后面会慢慢讲解。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;逆向工程简介&quot;&gt;&lt;a href=&quot;#逆向工程简介&quot; class=&quot;headerlink&quot; title=&quot;逆向工程简介&quot;&gt;&lt;/a&gt;逆向工程简介&lt;/h2&gt;&lt;p&gt;iOS 逆向工程，是指从目标应用的界面以及功能表现入手，使用不同工具和理论知识去分析其实现原理，得出应用的代码结构、整体设计、功能实现、执行流程等，然后利用iOS的系统知识和语言特性，借鉴或修改原有实现流程的技术。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="逆向" scheme="https://aichiko0225.github.com/memoirs/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="iOS" scheme="https://aichiko0225.github.com/memoirs/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Runtime介绍(一)</title>
    <link href="https://aichiko0225.github.com/memoirs/20200208/iOS/rumtime-introduction-1/"/>
    <id>https://aichiko0225.github.com/memoirs/20200208/iOS/rumtime-introduction-1/</id>
    <published>2020-02-08T14:39:02.000Z</published>
    <updated>2024-12-13T03:01:24.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Runtime简介"><a href="#Runtime简介" class="headerlink" title="Runtime简介"></a>Runtime简介</h2><p><code>Runtime</code> 又叫运行时，是一套底层的 C 语言 API，是 iOS 系统的核心之一。开发者在编码过程中，可以给任意一个对象发送消息，在编译阶段只是确定了要向接收者发送这条消息，而接受者将要如何响应和处理这条消息，那就要看运行时来决定了。</p><span id="more"></span><p>OC语言在编译期都会被编译为C语言的<code>Runtime</code>代码，二进制执行过程中执行的都是C语言代码。而OC的类本质上都是结构体，在编译时都会以结构体的形式被编译到二进制中。<code>Runtime</code>是一套由C、C++、汇编实现的API，所有的方法调用都叫做发送消息。</p><p>C语言中，在编译期，函数的调用就会决定调用哪个函数。<br>而OC的函数，属于动态调用过程，在编译期并不能决定真正调用哪个函数，只有在真正运行时才会根据函数的名称找到对应的函数来调用。</p><p><code>Objective-C</code> 是一个动态语言，这意味着它不仅需要一个编译器，也需要一个运行时系统来动态得创建类和对象、进行消息传递和转发。</p><h3 id="Runtime使用"><a href="#Runtime使用" class="headerlink" title="Runtime使用"></a>Runtime使用</h3><p><code>Runtime</code>是一个共享动态库，其目录位于<code>/usr/include/objc</code>，由一系列的C函数和结构体构成。和<code>Runtime</code>系统发生交互的方式有三种，一般都是用前两种：</p><ol><li>使用OC源码<br>直接使用上层OC源码，底层会通过<code>Runtime</code>为其提供运行支持，上层不需要关心<code>Runtime</code>运行。</li><li>NSObject<br>在OC代码中绝大多数的类都是继承自NSObject的，<code>NSProxy</code>类例外。<code>Runtime</code>在<code>NSObject</code>中定义了一些基础操作，<code>NSObject</code>的子类也具备这些特性。</li><li>Runtime动态库<br>上层的OC源码都是通过<code>Runtime</code>实现的，我们一般不直接使用<code>Runtime</code>，直接和OC代码打交道就可以。</li></ol><p>使用Runtime需要引入下面两个头文件，一些基础方法都定义在这两个文件中。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/message.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>关于库函数可以在<a href="https://developer.apple.com/documentation/objectivec/objective-c_runtime">Objective-C Runtime Reference</a>中查看 Runtime 函数的详细文档。</p><p>关于这一点，其实还有一个小插曲。当我们导入了<code>objc/Runtime.h</code>和<code>objc/message.h</code>两个头文件之后，我们查找到了<code>Runtime</code>的函数之后，代码打完，发现没有代码提示了，那些函数里面的参数和描述都没有了。对于熟悉<code>Runtime</code>的开发者来说，这并没有什么难的，因为参数早已铭记于胸。但是对于新手来说，这是相当不友好的。而且，如果是从<code>iOS6</code>开始开发的同学，依稀可能能感受到，关于<code>Runtime</code>的具体实现的官方文档越来越少了？可能还怀疑是不是错觉。其实从<code>Xcode5</code>开始，苹果就不建议我们手动调用<code>Runtime</code>的API，也同样希望我们不要知道具体底层实现。所以IDE上面默认代了一个参数，禁止了<code>Runtime</code>的代码提示，源码和文档方面也删除了一些解释。<br><img src="/memoirs/images/runtime_1.webp"><br>如果发现导入了两个库文件之后，仍然没有代码提示，就需要把这里的设置改成NO，即可。</p><h2 id="NSObject介绍"><a href="#NSObject介绍" class="headerlink" title="NSObject介绍"></a>NSObject介绍</h2><p>在OC的世界中，除了<code>NSProxy</code>类以外，所有的类都是<code>NSObject</code>的子类。在<code>Foundation</code>框架下，<code>NSObject</code>和<code>NSProxy</code>两个基类，定义了类层次结构中该类下方所有类的公共接口和行为。<code>NSProxy</code>是专门用于实现代理对象的类，这个类暂时本篇文章不提。这两个类都遵循了<code>NSObject</code>协议。在<code>NSObject</code>协议中，声明了所有OC对象的公共方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)isEqual:(<span class="type">id</span>)object;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) Class superclass;</span><br><span class="line">- (Class)<span class="keyword">class</span> OBJC_SWIFT_UNAVAILABLE(<span class="string">&quot;use &#x27;type(of: anObject)&#x27; instead&quot;</span>);</span><br><span class="line">- (<span class="keyword">instancetype</span>)<span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="type">id</span>)performSelector:(SEL)aSelector;</span><br><span class="line">- (<span class="type">id</span>)performSelector:(SEL)aSelector withObject:(<span class="type">id</span>)object;</span><br><span class="line">- (<span class="type">id</span>)performSelector:(SEL)aSelector withObject:(<span class="type">id</span>)object1 withObject:(<span class="type">id</span>)object2;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)isProxy;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)isKindOfClass:(Class)aClass;</span><br><span class="line">- (<span class="type">BOOL</span>)isMemberOfClass:(Class)aClass;</span><br><span class="line">- (<span class="type">BOOL</span>)conformsToProtocol:(Protocol *)aProtocol;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)respondsToSelector:(SEL)aSelector;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)<span class="keyword">retain</span> OBJC_ARC_UNAVAILABLE;</span><br><span class="line">- (<span class="keyword">oneway</span> <span class="type">void</span>)release OBJC_ARC_UNAVAILABLE;</span><br><span class="line">- (<span class="keyword">instancetype</span>)autorelease OBJC_ARC_UNAVAILABLE;</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount OBJC_ARC_UNAVAILABLE;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">struct</span> _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *description;</span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *debugDescription;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">&quot;-Wobjc-interface-ivars&quot;</span></span></span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>objc_class</code>的源码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !OBJC_TYPES_DEFINED</span></span><br><span class="line"><span class="comment">/// An opaque type that represents an Objective-C class.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Represents an instance of a class.</span></span><br><span class="line"><span class="keyword">struct</span> objc_object &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !__OBJC2__</span></span><br><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">const</span> <span class="type">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="type">long</span> version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="type">long</span> info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="type">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span><br></pre></td></tr></table></figure><p>在这里可以看到，在一个类中，有超类的指针，类名，版本的信息。<br><code>ivars</code>是<code>objc_ivar_list</code>成员变量列表的指针；<code>methodLists</code>是指向<code>objc_method_list</code>指针的指针。<code>*methodLists</code>是指向方法列表的指针。这里如果动态修改<code>*methodLists</code>的值来添加成员方法，这也是<code>Category</code>实现的原理，同样解释了<code>Category</code>不能添加属性的原因。</p><p>在<code>NSObject</code>的类中还定义了一个方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure><p><code>IMP</code>则引出了另一个概念，这个后面会介绍，我们继续说<code>NSObject</code>。</p><p><img src="/memoirs/images/objc.webp" alt="对象模型"></p><p>图中实线是 super_class指针，虚线是isa指针。</p><ol><li><code>Root class (class)</code>其实就是<code>NSObject</code>，<code>NSObject</code>是没有超类的，所以<code>Root class(class)</code>的<code>superclass</code>指向<code>nil</code>。</li><li>每个Class都有一个isa指针指向唯一的Meta class</li><li><code>Root class(meta)</code>的superclass指向Root class(class)，也就是NSObject，形成一个回路。</li><li>每个Meta class的isa指针都指向Root class (meta)。</li></ol><p>我们其实应该明白，类对象和元类对象是唯一的，对象是可以在运行时创建无数个的。而在<code>main</code>方法执行之前，从 <code>dyld</code>到<code>runtime</code>这期间，类对象和元类对象在这期间被创建。</p><p>具体的实现需要看源代码，这里我就不讨论源代码的内容了。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>上面介绍了<code>NSObject</code>，下面介绍一下其他的相关概念。</p><h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>在<code>Runtime</code>中<code>IMP</code>本质上就是一个函数指针，其定义如下。在<code>IMP</code>中有两个默认的参数<code>id</code>和<code>SEL</code>，<code>id</code>也就是方法中的<code>self</code>，这和<code>objc_msgSend()</code>函数传递的参数一样。</p><p><code>Runtime</code>中提供了很多对于<code>IMP</code>操作的<code>API</code>，下面就是不分<code>IMP</code>相关的函数定义。我们比较常见的是<code>method_exchangeImplementations</code>函数，<code>Method Swizzling</code>就是通过这个<code>API</code>实现的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A pointer to the function of a method implementation. </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !OBJC_OLD_DISPATCH_PROTOTYPES</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> (*IMP)(<span class="type">void</span> <span class="comment">/* id, SEL, ... */</span> ); </span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">id</span> _Nullable (*IMP)(<span class="type">id</span> _Nonnull, SEL _Nonnull, ...); </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">OBJC_EXPORT <span class="type">void</span></span><br><span class="line">method_exchangeImplementations(Method _Nonnull m1, Method _Nonnull m2) </span><br><span class="line">    OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">OBJC_EXPORT IMP _Nonnull</span><br><span class="line">method_setImplementation(Method _Nonnull m, IMP _Nonnull imp) </span><br><span class="line">    OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">OBJC_EXPORT IMP _Nonnull</span><br><span class="line">method_getImplementation(Method _Nonnull m) </span><br><span class="line">    OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">OBJC_EXPORT IMP _Nullable</span><br><span class="line">class_getMethodImplementation(Class _Nullable cls, SEL _Nonnull name) </span><br><span class="line">    OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p><code>Method</code>用来表示方法，其包含<code>SEL</code>和<code>IMP</code>，下面可以看一下<code>Method</code>结构体的定义。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> method_t *Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> method_t &#123;</span><br><span class="line">    SEL name;</span><br><span class="line">    <span class="keyword">const</span> <span class="type">char</span> *types;</span><br><span class="line">    IMP imp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>Xcode</code>进行编译的时候，只会将<code>Xcode</code>的<code>Compile Sources</code>中.m声明的方法编译到<code>Method List</code>，而.h文件中声明的方法对<code>Method List</code>没有影响。</p><h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><p>在<code>Runtime</code>中定义了属性的结构体，用来表示对象中定义的属性。<code>@property</code>修饰符用来修饰属性，修饰后的属性为<code>objc_property_t</code>类型，其本质是<code>property_t</code>结构体。其结构体定义如下。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> property_t *objc_property_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> property_t &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="keyword">const</span> <span class="type">char</span> *attributes;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以通过下面两个函数，分别获取实例对象的属性列表，和协议的属性列表。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objc_property_t * class_copyPropertyList（Class cls，<span class="type">unsigned</span> <span class="type">int</span> * outCount）</span><br><span class="line">objc_property_t * protocol_copyPropertyList（Protocol * proto，<span class="type">unsigned</span> <span class="type">int</span> * outCount）</span><br></pre></td></tr></table></figure><p>可以通过下面两个方法，传入指定的<code>Class</code>和<code>propertyName</code>，获取对应的<code>objc_property_t</code>属性结构体。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objc_property_t class_getProperty（Class cls，<span class="keyword">const</span> <span class="type">char</span> * name）</span><br><span class="line">objc_property_t protocol_getProperty（Protocol * proto，<span class="keyword">const</span> <span class="type">char</span> * name，<span class="type">BOOL</span> isRequiredProperty，<span class="type">BOOL</span> isInstanceProperty）</span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Runtime简介&quot;&gt;&lt;a href=&quot;#Runtime简介&quot; class=&quot;headerlink&quot; title=&quot;Runtime简介&quot;&gt;&lt;/a&gt;Runtime简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Runtime&lt;/code&gt; 又叫运行时，是一套底层的 C 语言 API，是 iOS 系统的核心之一。开发者在编码过程中，可以给任意一个对象发送消息，在编译阶段只是确定了要向接收者发送这条消息，而接受者将要如何响应和处理这条消息，那就要看运行时来决定了。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="基础知识" scheme="https://aichiko0225.github.com/memoirs/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="iOS" scheme="https://aichiko0225.github.com/memoirs/tags/iOS/"/>
    
    <category term="Runtime" scheme="https://aichiko0225.github.com/memoirs/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>剑来！</title>
    <link href="https://aichiko0225.github.com/memoirs/20200207/jianlai/"/>
    <id>https://aichiko0225.github.com/memoirs/20200207/jianlai/</id>
    <published>2020-02-07T03:51:31.000Z</published>
    <updated>2024-12-12T09:16:39.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="剑来"><a href="#剑来" class="headerlink" title="剑来"></a>剑来</h1><p>大千世界，无奇不有。<br>我陈平安，唯有一剑，可搬山，倒海，降妖，镇魔，敕神，摘星，断江，摧城，开天！<br>我叫陈平安，平平安安的平安。我是一名剑客。</p><span id="more"></span><h1 id="o-╯□╰-o"><a href="#o-╯□╰-o" class="headerlink" title="o(╯□╰)o"></a>o(╯□╰)o</h1><p>陈政华天天请假，三天一更，以至于我天天阴阳怪气的在贴吧吐槽<br>作为剑来贴吧一个 老阴阳，吐槽归吐槽，还是有些道理可以看一看的。<br>但是太多的纸面上的道理，看一看就行。</p><hr><blockquote><p>1、修心，亦是修行之一。顺境修力，逆境修心，缺一不可。<br>2、天大地大，独自一人，然后遇上了某个大坎，你死活就是跨不过去，要么憋屈死，要么找死，还能怎么办？<br>3、列星随行，日月递炤，四时代御，阴阳大化，风雨博施，万物各得其和以生，各得其养以成。<br>4、胸中一点浩然气，天地千里快哉风。<br>5、君子不妄动，动必有道。君子不徒语，语必有理。君子不苟求，求必有义。君子不虚行，行必有正。<br>6、凡夫俗子不下苦功夫、死力气去努力做成一件事，根本就没资格去谈什么天赋不天赋。<br>7、某些人和事，哪怕是路边的风景，可是只要看一眼，依然会让人觉得很美好。<br>8、传道受业，能解一惑是一惑。书上正理，能说一理是一理。<br>9、整个浩然天下都是你儒家的门户，贫道就偏偏要在你家里，独立开辟出一座小花园。<br>10、一个姑娘，如果有被人喜欢，而且那个人喜欢得干干净净，怎么都是一件美好的事情。<br>11、记住，以后不管遇到什么，你都不要对这个世界失去希望。<br>12、世间万般讲理与不讲理，终归会落在一处，我心安处即吾乡。<br>13、长生不朽，逍遥山海，餐霞饮露，不食五谷，已是异类也。<br>14、江湖道义不能太多，可总该有那么点儿，半点不讲，就是条真龙，迟早也得淹死在江湖里。<br>15、有些可惜，是没办法十全十美。有些可惜，是某些长久的遗憾。<br>16、有心为善虽善不赏，无心为恶虽恶不罚。人力有穷尽之时，尽力又尽心了，就不用太愧疚。<br>17、这么多年下来，陈平安活得很艰辛，但是不苦。<br>18、是你的就好好抓住，不是你的就不要多想。天底下没谁是欠你的，但是你欠了别人，就别不当回事。<br>19、认定一件事，即使拿十分力气都无法完成，也要拿出十二分力气去努力。<br>20、自童年起，我就独自一人，照看历代星辰。<br>21、有些事情，死了也要做。但有些事情，是死也不能做的。<br>22、行走江湖，钱难挣，屎难吃，只要不是花钱买屎吃，就是好日子了。<br>23、有些事情，不去做，陈平安心里不痛快。可有些事情，再不痛快，也只能忍着。<br>24、溪水渐浅，井水渐冷，老槐更老，铁锁生锈，大云低垂。今年桃叶见不到桃花。<br>25、原来是这样啊。原来是一位春风和煦暖人心的少年郎啊。<br>26、世上除了爹娘，再没有人是理所应当对你好的。<br>27、遇事不决，可问春风。<br>28、归根结底，长得好，无论男女，怎么都是对的，长得不好看，大概就是万般皆罪。<br>29、当这个世界给予自己善意的时候，一定要好好珍惜，要惜福，无论大小。<br>30、中秋明月，豪门有，贫家也有。极慰人心。31、闲来打蚊蝇，忽起杀尽蚊蝇心。<br>32、生死一线之间，有人贪生而怕死，审时度势，避难而退；有人舍生而取义，迎难而上，死中求活。<br>33、总有些人，一眼看到就会心生好感，道理都讲不通。<br>34、这一年，这座天下，春去极晚，夏来极迟。<br>35、有些人心如花木，皆向阳而生。<br>36、走得再远，看得再细，终究会有这样那样的错过，不可能真正将风景看遍。<br>37、君子坐而论道，少年起而行之。38、人身即为小天地，忽起剑鸣不平声！<br>39、世上好人的好心好意，到头来办坏事结恶果，少吗？40、水落石出，原来蛟龙盘踞。风吹草动，已是虎视眈眈。<br>41、混吃等死，小富即安，飞黄腾达，是因为各有各的缘法，未必有高下之分。<br>42、不被喜欢的姑娘喜欢，是一件很伤心的事情，可天没有塌下来，该怎么活，还得怎么活。<br>43、簪子上有八个字，便是仅算粗通文墨的少女，也觉得极为动人。言念君子，温其如玉。<br>44、月光入怀，皎皎在肩，一夜安宁。<br>45、人情送头牛，买卖不饶针。<br>46、但愿世间人无病，宁可架上药成灰！<br>47、与善人居，如入芝兰之室，久而自芳矣。<br>48、初衷是好的，你所希冀的结果也是好的，但这是你不择手段行事的理由吗？<br>49、少年，思无邪，最最动人。50、喜欢谁，我自己又管不住自己的，你觉得轻浮就你觉得，我也不管你。<br>51、有些人之间，注定只要相逢，就是对的。如果还能重逢，就是最好的。<br>52、对的就是对的，错的就是错的，好的就应该珍惜，怎么珍惜都不为过。<br>53、世间一个个文字，是有力量的。字眼组合成词，词汇串联成句，语句契合成文章。大道就在其中。<br>54、一个人，哪能什么都不麻烦别人，偶尔有个一两次，不用太愧疚。<br>55、我登楼观百川，入海即入我怀。<br>56、但是两看相厌，不等于可以只看对方惹人厌的地方。两看欢喜，则一样不可以只看到好的地方。<br>57、欲求天上宝，需用世间财。<br>58、讲道理？他从来不喜欢。要与人讲道理，还练剑做什么？<br>59、该是你的，就拿好别丢。不该是你的，想都别想。<br>60、很多道理我憋在心里，想要跟这个世界好好的说上一说！<br>61、小镇虽小，粗粮可以养胃，书籍可以养气，景致可以养心。<br>62、有些善意，就跟春寒料峭的阳光一样，虽说在与不在，差别不是很大，可为什么要拒绝呢？<br>63、人间万事细如毛，我有小事大如斗。<br>64、男子下等眼光，只看女子脸面，中等眼光，看那身段，上等眼光，看女子神意。<br>65、陈平安开心笑了。被自己认可的人认可，真是一件值得喝酒的事情哇。<br>66、阿良无敌不无敌，暂且不好说，潇洒是真潇洒。<br>67、浩然天下所有好看的山，好看的水，加在一起，都不如她好看！<br>68、该省之省，一文铜钱，即是家族根本。该花则花，一掷千金，根本无需眨眼。<br>69、如果我有天突然死了，道长能不能帮我下辈子投胎，还投胎做我爹娘的孩子？<br>70、天下事情实在太多，不近我身，便都不是重要事。<br>71、他喜欢的那位姑娘，即是他心头的朱砂痣，也是明月光。<br>72、他的人生总是这样，真正在意的人，好像如何也挽留不住。<br>73、临死去只落得孑然一身，赴阴司始问子孙安在；到头来徒留下千古骂名，来地府方知万事皆休。<br>74、她锋利无比，注定是把无鞘剑。<br>75、有庙无僧风扫地，有香无火月点灯。<br>76、如果你的朋友过得比你好，好很多，好到让你望尘莫及，一辈子追不上，那么你心里头会不会一点点别扭？<br>77、魏檗摇头道：既然拿得起，就没有放得下的道理。<br>78、这么好的一位少年，那么他喜欢着的少女，得是多好的姑娘啊？<br>79、真正的强者，愿意以弱者的自由为边界。<br>80、有些人，只是夹杂在稻谷之中的一株稗草，被人看过一眼，就再无第二眼。<br>81、既然遇上了那么好的姑娘，怎么舍得去辜负呢？<br>82、天道崩塌，我陈平安唯有一剑，可搬山，断江，倒海，降妖，镇魔，敕神，摘星，摧城，开天。<br>83、女子总爱在情爱一事上动脑筋，男子喜好在江山一事上花心思。<br>84、小齐，江湖很不好，也就酒还行。<br>85、人生路上，总会有那么几场疾风骤雨，就像是老天爷在提醒世人，你们是在寄人篱下，要乖乖低头。<br>86、与妙人交友，如醉鬼饮醇酒，哪有清醒的可能，岂有不醉的道理？</p></blockquote><p>未完待续</p><p>格式可太麻烦了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;剑来&quot;&gt;&lt;a href=&quot;#剑来&quot; class=&quot;headerlink&quot; title=&quot;剑来&quot;&gt;&lt;/a&gt;剑来&lt;/h1&gt;&lt;p&gt;大千世界，无奇不有。&lt;br&gt;我陈平安，唯有一剑，可搬山，倒海，降妖，镇魔，敕神，摘星，断江，摧城，开天！&lt;br&gt;我叫陈平安，平平安安的平安。我是一名剑客。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://aichiko0225.github.com/memoirs/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="随便写写" scheme="https://aichiko0225.github.com/memoirs/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-28 武汉封城第五天</title>
    <link href="https://aichiko0225.github.com/memoirs/20200128/wuhan/wuhan1/"/>
    <id>https://aichiko0225.github.com/memoirs/20200128/wuhan/wuhan1/</id>
    <published>2020-01-27T16:00:00.000Z</published>
    <updated>2020-02-07T10:51:22.888Z</updated>
    
    <content type="html"><![CDATA[<p>大年初四，同样是封城之后的第五天。</p><span id="more"></span><p>疫情并没有下降的趋势，今天应该是第二波爆发期，所以到今天武汉已经快3000确诊，6000+的疑似病例了。<br>昨天出去了一次，买了一些消炎药和一些水果。虽然全城封闭了，外面还是有几辆车的，行人也有一些，主要是买药买水果买菜的。这个城市给我的感觉是过年时全部人员返乡之后的张江，基本没人，烟火气也没有，想吃个东西很难。偶尔也有外卖的人在送外卖，我出来个一个小时之内有1-2个美团的人在路上。<br>总的来说，我挺适应这样的武汉，就是太安静了，安静的可怕，以前热闹的时候也还行。<br>虽然我住的地方比不上武汉最繁华的地方，但是该有的都有，封城之后基本上没人出门了。<br>小区里面前几天出了几个确诊的，一家人有好几个，所以现在小区也没人逛了。本来还有人喜欢在小区里面走走玩玩，偶尔去对面公园走走。这两天人少很多了，一天可能就有几个人，都是不怕的。</p><p>自我隔离中。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大年初四，同样是封城之后的第五天。&lt;/p&gt;</summary>
    
    
    
    <category term="武汉" scheme="https://aichiko0225.github.com/memoirs/categories/%E6%AD%A6%E6%B1%89/"/>
    
    
    <category term="杂谈" scheme="https://aichiko0225.github.com/memoirs/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-23 武汉封城第一天</title>
    <link href="https://aichiko0225.github.com/memoirs/20200123/wuhan/wuhan/"/>
    <id>https://aichiko0225.github.com/memoirs/20200123/wuhan/wuhan/</id>
    <published>2020-01-22T16:00:00.000Z</published>
    <updated>2020-02-07T10:51:22.887Z</updated>
    
    <content type="html"><![CDATA[<p>坐标武汉。<br>从一个武汉本地居民的视角来记录一下这次的事件。</p><span id="more"></span><p>网上的言论很多，各种用心险恶的，鼓励加油的。</p><p>从12月份开始第一例的时候我已经买了口罩，那时候全部都在说可控可控，知乎上的回答全部避重就轻的在吹武汉的抗病毒实力，所以我并不怎么相信的。真正爆发是在20号之后了，全城都很恐慌，口罩更难买了。<br>21号基本上公司都放假了，正好关注了一些医疗机构，九州通发布声明说口罩供应不用担心，不会涨价，也可以保证足量供应。正好家附近就是九州通大厦，所以我也不是很着急买口罩，家里还有一些备用的。</p><p>今天是23号，在凌晨2点多发布消息准备暂停全部交通，关闭离汉通道。2点多我还没睡觉，本来有些活动的，基本上全部取消了。早上出门去附近的商场买物资，超市人很很多，商场基本上关门了。九州通大厦的药店排队的人也很多，大部分是买口罩的，另外也有一部分人买药。确实不用担心口罩的问题，店里面有几十箱口罩正在入库，口罩没有涨价但是限购5盒。</p><p>购买物资和口罩之后就回家睡觉了，其实我并没有多大的波动。但是有一些人为了一些自己的利益各种在群里散布恐慌谣言，然后网上有好些人想着放弃武汉，这些言论都不会放在心上。<br>人间不值得<br>好好地在家里自我隔离，看看书，写写代码，挺好。</p><p>封城第一天，记录一下。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;坐标武汉。&lt;br&gt;从一个武汉本地居民的视角来记录一下这次的事件。&lt;/p&gt;</summary>
    
    
    
    <category term="武汉" scheme="https://aichiko0225.github.com/memoirs/categories/%E6%AD%A6%E6%B1%89/"/>
    
    
    <category term="杂谈" scheme="https://aichiko0225.github.com/memoirs/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>ObjectMapper实践（一）</title>
    <link href="https://aichiko0225.github.com/memoirs/20180803/iOS/objectMapper-1/"/>
    <id>https://aichiko0225.github.com/memoirs/20180803/iOS/objectMapper-1/</id>
    <published>2018-08-03T14:09:00.000Z</published>
    <updated>2024-12-13T03:02:01.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在OC阶段使用模型转换的框架有很多，代表有：<a href="https://github.com/JSONModel/JSONModel">JSONModel</a>、 <a href="https://github.com/ibireme/YYModel">YYModel</a>、<a href="https://github.com/CoderMJLee/MJExtension">MJExtension</a>。<br>OC的原理主要是通过runtime 获取类的属性，在运行时获取Model的字段名集合，遍历该集合，拿Key去JSON中取值并完成赋值。而且Swift 的属性默认并不是动态属性，<strong>我们能在运行时获取一个Model实例的所有字段、字段值，但却无法给它赋值。</strong>事实上，我们拿到的value是原值的一个只读拷贝，即使获取到这个拷贝的地址写入新值，也是无效的。<br>OC的转换方式虽然在OC中完全适用，但是缺点也很严重，一方面只能只能继承 <code>NSObject</code> ，并不支持Struct；还有一个更严重的问题，optional 的属性不能正确解析，反正坑还是挺多的。</p><span id="more"></span><h6 id="所以如果是项目中有Swift的Model，就需要找到一个更好的转换方式。"><a href="#所以如果是项目中有Swift的Model，就需要找到一个更好的转换方式。" class="headerlink" title="所以如果是项目中有Swift的Model，就需要找到一个更好的转换方式。"></a>所以如果是项目中有Swift的Model，就需要找到一个更好的转换方式。</h6><p>为了解决这些问题，很多处理JSON的开源库应运而生。在Swift中，这些开源库主要朝着两个方向努力：</p><ol><li>保持JSON语义，直接解析JSON，但通过封装使调用方式更优雅、更安全；</li><li>预定义Model类，将JSON反序列化为类实例，再使用这些实例。</li></ol><p>先讨论第一种方式，其实我在16年前用Swift的时候主要是用第一种方式，最初是原始的解析方式，茫茫多的<code>guard</code>，很傻的方法。 然后我就开始用大名鼎鼎的<a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a>，它本质上仍然是根据JSON结构去取值，使用起来顺手、清晰。但是他有一个根本性的问题，如果key拼写错误，或者其他的拼写错误就会很崩溃。</p><p>第二种方式应该是最优化的，最合理的方式。每一个Model都会通过一个<code>Mappable</code>协议来表明<code>JSON</code>字典映射关系，然后实现JSON和对象的转换。当然还有一个黑魔法 <a href="https://github.com/alibaba/handyjson">HandyJSON</a> ，通过分析Swift数据结构在内存中的布局，自动分析出映射关系，进一步降低开发者使用的成本。<br>下面来介绍ObjectMapper 的用法，实现思路，以及源码分析。</p><p>#ObjectMapper 介绍<br><a href="https://github.com/Hearst-DD/ObjectMapper">ObjectMapper</a> 是一个使用 Swift 编写的用于 model 对象（类和结构体）和 JSON 之间转换的框架。</p><h6 id="ObjectMapper特性"><a href="#ObjectMapper特性" class="headerlink" title="ObjectMapper特性"></a>ObjectMapper特性</h6><ul><li>将JSON映射到对象</li><li>将对象映射到JSON</li><li>嵌套对象（独立，在数组或字典中）</li><li>映射期间的自定义转换</li><li>结构支持</li><li><a href="https://github.com/Hearst-DD/ObjectMapper#immutablemappable-protocol">不可改变的支持</a></li></ul><h6 id="ObjectMapper可以映射由以下类型组成的类："><a href="#ObjectMapper可以映射由以下类型组成的类：" class="headerlink" title="ObjectMapper可以映射由以下类型组成的类："></a>ObjectMapper可以映射由以下类型组成的类：</h6><ul><li><code>Int</code></li><li><code>Bool</code></li><li><code>Double</code></li><li><code>Float</code></li><li><code>String</code></li><li><code>RawRepresentable (Enums)</code></li><li><code>Array&lt;Any&gt;</code></li><li><code>Dictionary&lt;String, Any&gt;</code></li><li><code>Object&lt;T: Mappable&gt;</code></li><li><code>Array&lt;T: Mappable&gt;</code></li><li><code>Array&lt;Array&lt;T: Mappable&gt;&gt;</code></li><li><code>Set&lt;T: Mappable&gt;</code></li><li><code>Dictionary&lt;String, T: Mappable&gt;</code></li><li><code>Dictionary&lt;String, Array&lt;T: Mappable&gt;&gt;</code></li><li><code>Optionals of all the above</code></li><li><code>Implicitly Unwrapped Optionals of the above</code></li></ul><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><p>ObjectMapper中定义了一个协议<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/Mappable.swift">Mappable</a></p><p>Mappable协议中声明了两个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mutation <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br></pre></td></tr></table></figure><p>ObjectMapper使用 <code>&lt;-</code>运算符来定义每个成员变量如何映射到JSON和从JSON映射。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span>!</span><br><span class="line">    <span class="keyword">var</span> array: [<span class="keyword">Any</span>]<span class="operator">?</span></span><br><span class="line">    <span class="keyword">var</span> dictionary: [<span class="type">String</span> : <span class="keyword">Any</span>] <span class="operator">=</span> [:]</span><br><span class="line">    <span class="keyword">var</span> bestFriend: <span class="type">User</span>?                       <span class="comment">// Nested User object</span></span><br><span class="line">    <span class="keyword">var</span> friends: [<span class="type">User</span>]<span class="operator">?</span>                        <span class="comment">// Array of Users</span></span><br><span class="line">    <span class="keyword">var</span> birthday: <span class="type">Date</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mappable</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        username    <span class="operator">&lt;-</span> map[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        age         <span class="operator">&lt;-</span> map[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">        weight      <span class="operator">&lt;-</span> map[<span class="string">&quot;weight&quot;</span>]</span><br><span class="line">        array       <span class="operator">&lt;-</span> map[<span class="string">&quot;arr&quot;</span>]</span><br><span class="line">        dictionary  <span class="operator">&lt;-</span> map[<span class="string">&quot;dict&quot;</span>]</span><br><span class="line">        bestFriend  <span class="operator">&lt;-</span> map[<span class="string">&quot;best_friend&quot;</span>]</span><br><span class="line">        friends     <span class="operator">&lt;-</span> map[<span class="string">&quot;friends&quot;</span>]</span><br><span class="line">        birthday    <span class="operator">&lt;-</span> (map[<span class="string">&quot;birthday&quot;</span>], <span class="type">DateTransform</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Temperature</span>: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> celsius: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> fahrenheit: <span class="type">Double</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        celsius <span class="operator">&lt;-</span> map[<span class="string">&quot;celsius&quot;</span>]</span><br><span class="line">        fahrenheit <span class="operator">&lt;-</span> map[<span class="string">&quot;fahrenheit&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们的类或结构体如上面的示例一样实现了协议，我们就可以方便的进行JSON和模型之间的转换</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">JSONString</span> <span class="operator">=</span> <span class="string">&quot;&#123;<span class="subst">\&quot;</span>weight<span class="subst">\&quot;</span>: 180&#125;&quot;</span></span><br><span class="line"><span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>(JSONString: <span class="type">JSONString</span>)</span><br><span class="line">user<span class="operator">?</span>.age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">user<span class="operator">?</span>.username <span class="operator">=</span> <span class="string">&quot;ash&quot;</span></span><br><span class="line">user<span class="operator">?</span>.birthday <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">user<span class="operator">?</span>.weight <span class="operator">=</span> <span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> jsonStr <span class="operator">=</span> user<span class="operator">?</span>.toJSONString(prettyPrint: <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">debugPrint</span>(jsonStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以通过<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/Mapper.swift">Mapper</a>类来进行转换</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user <span class="operator">=</span> <span class="type">Mapper</span>&lt;<span class="type">User</span>&gt;().map(JSONString: <span class="type">JSONString</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">JSONString</span> <span class="operator">=</span> <span class="type">Mapper</span>().toJSONString(user, prettyPrint: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h6 id="嵌套对象的映射"><a href="#嵌套对象的映射" class="headerlink" title="嵌套对象的映射"></a>嵌套对象的映射</h6><p>正如前面所列，ObjectMapper支持嵌套对象的映射</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;distance&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;text&quot;</span> : <span class="string">&quot;102&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span> : <span class="number">31</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想要直接取出distance对象中的value值，可以设置如下mapping</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">    distance <span class="operator">&lt;-</span> map[<span class="string">&quot;distance.value&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="自定义转换规则"><a href="#自定义转换规则" class="headerlink" title="自定义转换规则"></a>自定义转换规则</h6><p>ObjectMapper允许开发者在数据映射过程中指定转换规则</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> birthday: <span class="type">NSDate</span>?</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="keyword">_</span> <span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">       birthday <span class="operator">&lt;-</span> (map[<span class="string">&quot;birthday&quot;</span>], <span class="type">DateTransform</span>())</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> <span class="type">JSON</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\&quot;</span>birthday<span class="subst">\&quot;</span>:1458117795332&quot;</span></span><br><span class="line">   <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">Mapper</span>&lt;<span class="type">People</span>&gt;().map(<span class="type">JSON</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们指定了<code>birthday</code>的转换规则，所以上述代码在解析JSON数据的时候会将long类型转换成Date类型</p><p>除了使用ObjectMapper给我们提供的转换规则外，我们还可以通过实现<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/TransformType.swift">TransformType</a>协议来自定义我们的转换规则<br>ObjectMapper为我们提供了一个<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/TransformOf.swift">TransformOf</a>类来实现转换结果，<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/TransformOf.swift">TransformOf</a>实际就是实现了<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/TransformOf.swift">TransformType</a>协议的，<a href="https://github.com/Hearst-DD/ObjectMapper/blob/master/Sources/TransformOf.swift">TransformOf</a>有两个类型的参数和两个闭包参数，类型表示参与转换的数据的类型，闭包表示转换的规则</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">TransformType</span> &#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">JSON</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">transformFromJSON</span>(<span class="params">value</span>: <span class="type">AnyObject</span>?) -&gt; <span class="type">Object</span>?</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">transformToJSON</span>(<span class="params">value</span>: <span class="type">Object</span>?) -&gt; <span class="type">JSON</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transform <span class="operator">=</span> <span class="type">TransformOf</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt;(fromJSON: &#123; (value: <span class="type">String</span>?) -&gt; <span class="type">Int</span>? <span class="keyword">in</span> </span><br><span class="line">&#125;, toJSON: &#123; (value: <span class="type">Int</span>?) -&gt; <span class="type">String</span>? <span class="keyword">in</span> </span><br><span class="line">  <span class="comment">// transform value from Int? to String?</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> value <span class="operator">=</span> value &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">String</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">  id <span class="operator">&lt;-</span> (map[<span class="string">&quot;id&quot;</span>], transform)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="泛型对象"><a href="#泛型对象" class="headerlink" title="泛型对象"></a>泛型对象</h6><p>ObjectMapper同样可以处理泛型类型的参数，不过这个泛型类型需要在实现了Mappable协议的基础上才可以正常使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="keyword">_</span> <span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="keyword">_</span> <span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        name <span class="operator">&lt;-</span> map[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Result</span>&lt;<span class="type">T</span>: <span class="type">Mappable</span>&gt;: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">T</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="keyword">_</span> <span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        result <span class="operator">&lt;-</span> map[<span class="string">&quot;result&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">JSON</span> <span class="operator">=</span> <span class="string">&quot;&#123;<span class="subst">\&quot;</span>result<span class="subst">\&quot;</span>: &#123;<span class="subst">\&quot;</span>name<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>anenn<span class="subst">\&quot;</span>&#125;&#125;&quot;</span></span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> <span class="type">Mapper</span>&lt;<span class="type">Result</span>&lt;<span class="type">User</span>&gt;&gt;().map(<span class="type">JSON</span>)</span><br></pre></td></tr></table></figure><p>基本上的大部分常用用法都介绍完了，满足日常的开发需求应该是没问题的，下面我们要研究一下源码部分</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h6 id="功能分类"><a href="#功能分类" class="headerlink" title="功能分类"></a>功能分类</h6><p>根据实现的思路来分类应该可以分成三类：</p><ol><li><strong>Core 部分</strong></li><li><strong>Operators 部分</strong></li><li><strong>Transforms 部分</strong></li></ol><p>其实 <strong>core</strong> 和 <strong>Operators</strong> 也可以归为一类，但是拆开来看更加容易理解，还是拆开来吧。<br>因为源代码比较多，这篇文章先介绍 <strong>Core</strong> 部分，了解这部分基本上的实现思路就已经很明确了，然后在最后会介绍一下 <a href="https://github.com/krzysztofzablocki/Sourcery"><strong>Sourcery</strong></a> 的自动代码生成，不然 <code>mapping</code> 方法中的代码写的让人很绝望。</p><h6 id="Mappable"><a href="#Mappable" class="headerlink" title="Mappable"></a>Mappable</h6><p>跟<code>Mappable</code>相关的协议有<code>StaticMappable</code>、<code>ImmutableMappable</code>，我们先将 <code>StaticMappable</code> 和 <code>ImmutableMappable</code> 这两种协议的处理逻辑放一放，直接关注最重要的 <code>Mappable</code> 协议的实现，了解了 <code>Mappable</code> 另外两个很好理解。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// BaseMappable should not be implemented directly. Mappable or StaticMappable should be used instead</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">BaseMappable</span> &#123;</span><br><span class="line"><span class="comment">/// This function is where all variable mappings should occur. It is executed by Mapper during the mapping (serialization and deserialization) process.</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">Mappable</span>: <span class="title class_ inherited__">BaseMappable</span> &#123;</span><br><span class="line">    <span class="comment">/// This function can be used to validate JSON prior to mapping. Return nil to cancel mapping at this point</span></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">extension</span> <span class="title class_">BaseMappable</span> &#123;</span><br><span class="line"><span class="comment">/// Initializes object from a JSON String</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init?</span>(<span class="params">JSONString</span>: <span class="type">String</span>, <span class="params">context</span>: <span class="type">MapContext</span>? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> obj: <span class="keyword">Self</span> <span class="operator">=</span> <span class="type">Mapper</span>(context: context).map(JSONString: <span class="type">JSONString</span>) &#123;</span><br><span class="line"><span class="keyword">self</span> <span class="operator">=</span> obj</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Initializes object from a JSON Dictionary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init?</span>(<span class="params">JSON</span>: [<span class="params">String</span>: <span class="keyword">Any</span>], <span class="params">context</span>: <span class="type">MapContext</span>? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> obj: <span class="keyword">Self</span> <span class="operator">=</span> <span class="type">Mapper</span>(context: context).map(JSON: <span class="type">JSON</span>) &#123;</span><br><span class="line"><span class="keyword">self</span> <span class="operator">=</span> obj</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Returns the JSON Dictionary for the object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSON</span>() -&gt; [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">Mapper</span>().toJSON(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Returns the JSON String for the object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONString</span>(<span class="params">prettyPrint</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">Mapper</span>().toJSONString(<span class="keyword">self</span>, prettyPrint: prettyPrint)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BaseMappable</code>为实现 <code>Mappable</code> 的 <strong>Model</strong> 提供了四种实例方法，有两个是初始化方法，当然你也可以自己新建一个 <code>Mapper</code> 来初始化；还有两个是 <strong>Model</strong> 转 <strong>JSON</strong> 的方法。</p><h6 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h6><p>继续看 <code>Mapper</code> 的代码，Mapper中核心代码为下面的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/// Maps a JSON dictionary to an object that conforms to Mappable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">map</span>(<span class="params">JSON</span>: [<span class="params">String</span>: <span class="keyword">Any</span>]) -&gt; <span class="type">N</span>? &#123;</span><br><span class="line"><span class="keyword">let</span> map <span class="operator">=</span> <span class="type">Map</span>(mappingType: .fromJSON, JSON: <span class="type">JSON</span>, context: context, shouldIncludeNilValues: shouldIncludeNilValues)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> klass <span class="operator">=</span> <span class="type">N</span>.<span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">StaticMappable</span>.<span class="keyword">Type</span> &#123; <span class="comment">// Check if object is StaticMappable</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> object <span class="operator">=</span> klass.objectForMapping(map: map) <span class="keyword">as?</span> <span class="type">N</span> &#123;</span><br><span class="line">object.mapping(map: map)</span><br><span class="line"><span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> klass <span class="operator">=</span> <span class="type">N</span>.<span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">Mappable</span>.<span class="keyword">Type</span> &#123; <span class="comment">// Check if object is Mappable</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> object <span class="operator">=</span> klass.<span class="keyword">init</span>(map: map) <span class="keyword">as?</span> <span class="type">N</span> &#123;</span><br><span class="line">object.mapping(map: map)</span><br><span class="line"><span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> klass <span class="operator">=</span> <span class="type">N</span>.<span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">ImmutableMappable</span>.<span class="keyword">Type</span> &#123; <span class="comment">// Check if object is ImmutableMappable</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">try</span> klass.<span class="keyword">init</span>(map: map) <span class="keyword">as?</span> <span class="type">N</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line"><span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line"><span class="keyword">let</span> exception: <span class="type">NSException</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> mapError <span class="operator">=</span> error <span class="keyword">as?</span> <span class="type">MapError</span> &#123;</span><br><span class="line">exception <span class="operator">=</span> <span class="type">NSException</span>(name: .<span class="keyword">init</span>(rawValue: <span class="string">&quot;MapError&quot;</span>), reason: mapError.description, userInfo: <span class="literal">nil</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">exception <span class="operator">=</span> <span class="type">NSException</span>(name: .<span class="keyword">init</span>(rawValue: <span class="string">&quot;ImmutableMappableError&quot;</span>), reason: error.localizedDescription, userInfo: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">exception.raise()</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ensure BaseMappable is not implemented directly</span></span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>, <span class="string">&quot;BaseMappable should not be implemented directly. Please implement Mappable, StaticMappable or ImmutableMappable&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据N的协议类型走不同的协议方法，最终得到 <code>object</code>。<br>让我们用 <code>Mappable</code> 来举例，先回到之前协议中的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mutation <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>)</span><br></pre></td></tr></table></figure><p>这样对着看就很好理解了，<code>init?(map: Map)</code> 没有 <code>return nil</code> 的时候，就会调用 <code>func mapping(map: Map)</code> 方法来指定映射关系，那这个映射关系有什么作用呢，后面会慢慢介绍。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Mapper</span> &#123;</span><br><span class="line"><span class="comment">// MARK: Functions that create JSON from objects</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///Maps an object that conforms to Mappable to a JSON dictionary &lt;String, Any&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSON</span>(<span class="keyword">_</span> <span class="params">object</span>: <span class="type">N</span>) -&gt; [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line"><span class="keyword">var</span> mutableObject <span class="operator">=</span> object</span><br><span class="line"><span class="keyword">let</span> map <span class="operator">=</span> <span class="type">Map</span>(mappingType: .toJSON, JSON: [:], context: context, shouldIncludeNilValues: shouldIncludeNilValues)</span><br><span class="line">mutableObject.mapping(map: map)</span><br><span class="line"><span class="keyword">return</span> map.<span class="type">JSON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///Maps an array of Objects to an array of JSON dictionaries [[String: Any]]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONArray</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">N</span>]) -&gt; [[<span class="type">String</span>: <span class="keyword">Any</span>]] &#123;</span><br><span class="line"><span class="keyword">return</span> array.map &#123;</span><br><span class="line"><span class="comment">// convert every element in array to JSON dictionary equivalent</span></span><br><span class="line"><span class="keyword">self</span>.toJSON(<span class="variable">$0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///Maps a dictionary of Objects that conform to Mappable to a JSON dictionary of dictionaries.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONDictionary</span>(<span class="keyword">_</span> <span class="params">dictionary</span>: [<span class="params">String</span>: <span class="type">N</span>]) -&gt; [<span class="type">String</span>: [<span class="type">String</span>: <span class="keyword">Any</span>]] &#123;</span><br><span class="line"><span class="keyword">return</span> dictionary.map &#123; (arg: (key: <span class="type">String</span>, value: <span class="type">N</span>)) <span class="keyword">in</span></span><br><span class="line"><span class="comment">// convert every value in dictionary to its JSON dictionary equivalent</span></span><br><span class="line"><span class="keyword">return</span> (arg.key, <span class="keyword">self</span>.toJSON(arg.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///Maps a dictionary of Objects that conform to Mappable to a JSON dictionary of dictionaries.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONDictionaryOfArrays</span>(<span class="keyword">_</span> <span class="params">dictionary</span>: [<span class="params">String</span>: [<span class="type">N</span>]]) -&gt; [<span class="type">String</span>: [[<span class="type">String</span>: <span class="keyword">Any</span>]]] &#123;</span><br><span class="line"><span class="keyword">return</span> dictionary.map &#123; (arg: (key: <span class="type">String</span>, value: [<span class="type">N</span>])) <span class="keyword">in</span></span><br><span class="line"><span class="comment">// convert every value (array) in dictionary to its JSON dictionary equivalent</span></span><br><span class="line"><span class="keyword">return</span> (arg.key, <span class="keyword">self</span>.toJSONArray(arg.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Maps an Object to a JSON string with option of pretty formatting</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONString</span>(<span class="keyword">_</span> <span class="params">object</span>: <span class="type">N</span>, <span class="params">prettyPrint</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="type">JSONDict</span> <span class="operator">=</span> toJSON(object)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Mapper</span>.toJSONString(<span class="type">JSONDict</span> <span class="keyword">as</span> <span class="keyword">Any</span>, prettyPrint: prettyPrint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Maps an array of Objects to a JSON string with option of pretty formatting</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">toJSONString</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">N</span>], <span class="params">prettyPrint</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="type">JSONDict</span> <span class="operator">=</span> toJSONArray(array)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Mapper</span>.toJSONString(<span class="type">JSONDict</span> <span class="keyword">as</span> <span class="keyword">Any</span>, prettyPrint: prettyPrint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Converts an Object to a JSON string with option of pretty formatting</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">toJSONString</span>(<span class="keyword">_</span> <span class="params">JSONObject</span>: <span class="keyword">Any</span>, <span class="params">prettyPrint</span>: <span class="type">Bool</span>) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line"><span class="keyword">let</span> options: <span class="type">JSONSerialization</span>.<span class="type">WritingOptions</span> <span class="operator">=</span> prettyPrint <span class="operator">?</span> .prettyPrinted : []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> <span class="operator">=</span> <span class="type">Mapper</span>.toJSONData(<span class="type">JSONObject</span>, options: options) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">String</span>(data: <span class="type">JSON</span>, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Converts an Object to JSON data with options</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">toJSONData</span>(<span class="keyword">_</span> <span class="params">JSONObject</span>: <span class="keyword">Any</span>, <span class="params">options</span>: <span class="type">JSONSerialization</span>.<span class="type">WritingOptions</span>) -&gt; <span class="type">Data</span>? &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">JSONSerialization</span>.isValidJSONObject(<span class="type">JSONObject</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="type">JSONData</span>: <span class="type">Data</span>?</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">JSONData</span> <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONSerialization</span>.data(withJSONObject: <span class="type">JSONObject</span>, options: options)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line"><span class="built_in">print</span>(error)</span><br><span class="line"><span class="type">JSONData</span> <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">JSONData</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Mapper</code> 还有一些 <code>toJSON</code> 的方法，这边的方法也很好理解，具体的实现都是在 <code>Map</code> 的一些方法，要知道这些方法具体实现就需要继续往下看。</p><h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><p>Map 中有两个核心的方法，先看自定义下标的方法，分析一下最重要的那个自定义下标的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Sets the current mapper value and key.</span></span><br><span class="line"><span class="comment">/// The Key paramater can be a period separated string (ex. &quot;distance.value&quot;) to access sub objects.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="comment">// save key and value associated to it</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">delimiter</span> <span class="params">delimiter</span>: <span class="type">String</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, delimiter: delimiter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">nested</span> <span class="params">nested</span>: <span class="type">Bool</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, nested: nested)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">nested</span> <span class="params">nested</span>: <span class="type">Bool</span>, <span class="params">delimiter</span> <span class="params">delimiter</span>: <span class="type">String</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, nested: nested, delimiter: delimiter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">ignoreNil</span> <span class="params">ignoreNil</span>: <span class="type">Bool</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, ignoreNil: ignoreNil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">delimiter</span> <span class="params">delimiter</span>: <span class="type">String</span>, <span class="params">ignoreNil</span> <span class="params">ignoreNil</span>: <span class="type">Bool</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, delimiter: delimiter, ignoreNil: ignoreNil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">nested</span> <span class="params">nested</span>: <span class="type">Bool</span>, <span class="params">ignoreNil</span> <span class="params">ignoreNil</span>: <span class="type">Bool</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, nested: nested, ignoreNil: ignoreNil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">nested</span> <span class="params">nested</span>: <span class="type">Bool</span>?, <span class="params">delimiter</span> <span class="params">delimiter</span>: <span class="type">String</span>, <span class="params">ignoreNil</span> <span class="params">ignoreNil</span>: <span class="type">Bool</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.subscript(key: key, nested: nested, delimiter: delimiter, ignoreNil: ignoreNil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">`subscript`</span>(<span class="params">key</span>: <span class="type">String</span>, <span class="params">nested</span>: <span class="type">Bool</span>? <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">delimiter</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>, <span class="params">ignoreNil</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) -&gt; <span class="type">Map</span> &#123;</span><br><span class="line"><span class="comment">// save key and value associated to it</span></span><br><span class="line">currentKey <span class="operator">=</span> key</span><br><span class="line">keyIsNested <span class="operator">=</span> nested <span class="operator">??</span> key.contains(delimiter)</span><br><span class="line">nestedKeyDelimiter <span class="operator">=</span> delimiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mappingType <span class="operator">==</span> .fromJSON &#123;</span><br><span class="line"><span class="comment">// check if a value exists for the current key</span></span><br><span class="line"><span class="comment">// do this pre-check for performance reasons</span></span><br><span class="line"><span class="keyword">if</span> keyIsNested &#123;</span><br><span class="line"><span class="comment">// break down the components of the key that are separated by delimiter</span></span><br><span class="line">(isKeyPresent, currentValue) <span class="operator">=</span> valueFor(<span class="type">ArraySlice</span>(key.components(separatedBy: delimiter)), dictionary: <span class="type">JSON</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> object <span class="operator">=</span> <span class="type">JSON</span>[key]</span><br><span class="line"><span class="keyword">let</span> isNSNull <span class="operator">=</span> object <span class="keyword">is</span> <span class="type">NSNull</span></span><br><span class="line">isKeyPresent <span class="operator">=</span> isNSNull <span class="operator">?</span> <span class="literal">true</span> : object <span class="operator">!=</span> <span class="literal">nil</span></span><br><span class="line">currentValue <span class="operator">=</span> isNSNull <span class="operator">?</span> <span class="literal">nil</span> : object</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update isKeyPresent if ignoreNil is true</span></span><br><span class="line"><span class="keyword">if</span> ignoreNil <span class="operator">&amp;&amp;</span> currentValue <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">isKeyPresent <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个核心的方法就是通过自定义下标的值，从JSON字典中根据key获取了value。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Fetch value from JSON dictionary, loop through keyPathComponents until we reach the desired object</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">valueFor</span>(<span class="keyword">_</span> <span class="params">keyPathComponents</span>: <span class="type">ArraySlice</span>&lt;<span class="type">String</span>&gt;, <span class="params">dictionary</span>: [<span class="params">String</span>: <span class="keyword">Any</span>]) -&gt; (<span class="type">Bool</span>, <span class="keyword">Any</span><span class="operator">?</span>) &#123;</span><br><span class="line"><span class="comment">// Implement it as a tail recursive function.</span></span><br><span class="line"><span class="keyword">if</span> keyPathComponents.isEmpty &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> keyPath <span class="operator">=</span> keyPathComponents.first &#123;</span><br><span class="line"><span class="keyword">let</span> isTail <span class="operator">=</span> keyPathComponents.count <span class="operator">==</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> object <span class="operator">=</span> dictionary[keyPath]</span><br><span class="line"><span class="keyword">if</span> object <span class="keyword">is</span> <span class="type">NSNull</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (isTail, <span class="literal">nil</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPathComponents.count <span class="operator">&gt;</span> <span class="number">1</span>, <span class="keyword">let</span> dict <span class="operator">=</span> object <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line"><span class="keyword">let</span> tail <span class="operator">=</span> keyPathComponents.dropFirst()</span><br><span class="line"><span class="keyword">return</span> valueFor(tail, dictionary: dict)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPathComponents.count <span class="operator">&gt;</span> <span class="number">1</span>, <span class="keyword">let</span> array <span class="operator">=</span> object <span class="keyword">as?</span> [<span class="keyword">Any</span>] &#123;</span><br><span class="line"><span class="keyword">let</span> tail <span class="operator">=</span> keyPathComponents.dropFirst()</span><br><span class="line"><span class="keyword">return</span> valueFor(tail, array: array)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (isTail <span class="operator">&amp;&amp;</span> object <span class="operator">!=</span> <span class="literal">nil</span>, object)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Fetch value from JSON Array, loop through keyPathComponents them until we reach the desired object</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">valueFor</span>(<span class="keyword">_</span> <span class="params">keyPathComponents</span>: <span class="type">ArraySlice</span>&lt;<span class="type">String</span>&gt;, <span class="params">array</span>: [<span class="keyword">Any</span>]) -&gt; (<span class="type">Bool</span>, <span class="keyword">Any</span><span class="operator">?</span>) &#123;</span><br><span class="line"><span class="comment">// Implement it as a tail recursive function.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> keyPathComponents.isEmpty &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Try to convert keypath to Int as index</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> keyPath <span class="operator">=</span> keyPathComponents.first,</span><br><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> <span class="type">Int</span>(keyPath) , index <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> index <span class="operator">&lt;</span> array.count &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isTail <span class="operator">=</span> keyPathComponents.count <span class="operator">==</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> object <span class="operator">=</span> array[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> object <span class="keyword">is</span> <span class="type">NSNull</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (isTail, <span class="literal">nil</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPathComponents.count <span class="operator">&gt;</span> <span class="number">1</span>, <span class="keyword">let</span> array <span class="operator">=</span> object <span class="keyword">as?</span> [<span class="keyword">Any</span>]  &#123;</span><br><span class="line"><span class="keyword">let</span> tail <span class="operator">=</span> keyPathComponents.dropFirst()</span><br><span class="line"><span class="keyword">return</span> valueFor(tail, array: array)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>  keyPathComponents.count <span class="operator">&gt;</span> <span class="number">1</span>, <span class="keyword">let</span> dict <span class="operator">=</span> object <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line"><span class="keyword">let</span> tail <span class="operator">=</span> keyPathComponents.dropFirst()</span><br><span class="line"><span class="keyword">return</span> valueFor(tail, dictionary: dict)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (isTail, object)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里其实 <strong>Core</strong> 部分的代码基本上就看完了，还有一些toJSON的方法，其他的类同的方法，那些对于理解 <a href="https://github.com/Hearst-DD/ObjectMapper"><strong>ObjectMapper</strong></a> 没有影响。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><h6 id="Sourcery"><a href="#Sourcery" class="headerlink" title="Sourcery"></a>Sourcery</h6><p>简单介绍一些 <a href="https://github.com/krzysztofzablocki/Sourcery"><strong>Sourcery</strong></a> 这个自动生成代码的工具。<br><a href="https://github.com/krzysztofzablocki/Sourcery">Sourcery</a> 是一个 Swift 代码生成的开源命令行工具，它 (通过 <a href="https://github.com/jpsim/SourceKitten">SourceKitten</a> 使用 Apple 的 SourceKit 框架，来分析你的源码中的各种声明和标注，然后套用你预先定义的 <a href="https://github.com/kylef/Stencil">Stencil</a> 模板 (一种语法和 <a href="https://mustache.github.io/#demo">Mustache</a> 很相似的 Swift 模板语言) 进行代码生成。我们下面会先看一个使用  <a href="https://github.com/jpsim/SourceKitten">SourceKitten</a>  最简单的例子，来说明如何使用这个工具。然后再针对我们的字典转换问题进行实现。</p><p>安装  <a href="https://github.com/jpsim/SourceKitten">SourceKitten</a>  非常简单，<code>brew install sourcery</code> 即可。不过，如果你想要在实际项目中使用这个工具的话，我建议直接<a href="https://github.com/krzysztofzablocki/Sourcery/releases">从发布页面</a>下载二进制文件，放到 Xcode 项目目录中，然后添加 Run Script 的 Build Phase 来在每次编译的时候自动生成。</p><p>之前说过了 <code>mapping</code> 函数实现起来过于臃肿耗时，你可以用插件来生成 <code>mapping</code> 函数<br><a href="https://github.com/liyanhuadev/ObjectMapper-Plugin">用于生成<code>Mappable</code>和<code>ImmutableMappable</code>代码的Xcode插件</a><br>但是Xcode 8之后不让用插件了，除非用野路子重签名的方式安装插件，而且安装了还不一定能用，反正那个很坑，还要复制一个Xcode用来打包上传，本弱鸡电脑根本没那么多空间。<br>两个方法我都试过了， 个人觉得 <a href="https://github.com/jpsim/SourceKitten">SourceKitten</a> 更加适合，那个插件的确实不好用，还有一种方式，可以在网站上自动生成，然后复制进来。<br>接下来就可以尝试以下书写模板代码了。可以参照 <a href="https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/index.html">Sourcery 文档</a> 关于单个 <a href="https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/Classes/Type.html">Type</a> 和 <a href="https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/Classes/Variable.html">Variable</a> 的部分的内容来实现。另外，可以考虑使用 <code>--watch</code> 模式来在文件改变时自动生成代码，来实时观察结果。</p><p>如果声明一个struct</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">AutoMappable</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> birthDate: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">var</span> friend: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> lalala: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="keyword">Any</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Calendar</span>.current.dateComponents([.year],</span><br><span class="line">                                               from: birthDate,</span><br><span class="line">                                               to: <span class="type">Date</span>()).year <span class="operator">??</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span>: <span class="title class_ inherited__">AutoMappable</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>下面是我的模版代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import ObjectMapper</span><br><span class="line"></span><br><span class="line">&#123;% for type in types.implementing.AutoMappable|struct %&#125;</span><br><span class="line">// MARK: &#123;&#123; type.name &#125;&#125; Mappable</span><br><span class="line">extension &#123;&#123;type.name&#125;&#125;: Mappable &#123;</span><br><span class="line"></span><br><span class="line">    init?(map: Map) &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mutating func mapping(map: Map) &#123;</span><br><span class="line">    &#123;% for variable in type.storedVariables %&#125; </span><br><span class="line">        &#123;% if variable.isArray %&#125;</span><br><span class="line">            &#123;&#123;variable.name&#125;&#125; &lt;- map[&quot;&#123;&#123;variable.name&#125;&#125;.0.value&quot;]</span><br><span class="line">        &#123;% elif variable.isDictionary %&#125;</span><br><span class="line">            &#123;&#123;variable.name&#125;&#125; &lt;- map[&quot;&#123;&#123;variable.name&#125;&#125;.value&quot;]</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &#123;&#123;variable.name&#125;&#125; &lt;- map[&quot;&#123;&#123;variable.name&#125;&#125;&quot;]</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>自动生成的代码显示如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ObjectMapper</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Person Mappable</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span>: <span class="title class_ inherited__">Mappable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">mapping</span>(<span class="params">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line">            firstName <span class="operator">&lt;-</span> map[<span class="string">&quot;firstName&quot;</span>]</span><br><span class="line">            lastName  <span class="operator">&lt;-</span> map[<span class="string">&quot;lastName&quot;</span>]</span><br><span class="line">            birthDate <span class="operator">&lt;-</span> map[<span class="string">&quot;birthDate&quot;</span>]</span><br><span class="line">            friend    <span class="operator">&lt;-</span> map[<span class="string">&quot;friend.0.value&quot;</span>]</span><br><span class="line">            lalala    <span class="operator">&lt;-</span> map[<span class="string">&quot;lalala.value&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这种方式显然是运行时最高效的方式，所以强烈推荐是这个方法来使用ObjectMapper。<br>后面会继续介绍 <strong>ObjectMapper</strong> 其他源码的实现思路。</p><p><img src="https://upload-images.jianshu.io/upload_images/225849-e6f158ed05650e48.gif"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/index.html">Sourcery Docs</a></li><li><a href="https://onevcat.com/2018/03/swift-meta/">不同角度看问题 - 从 Codable 到 Swift 元编程</a></li><li><a href="https://blog.yuhanle.com/2018/07/05/json-analysis-in-swift/">数据序列化框架在 Swift 日常开发中的应用</a></li><li><a href="https://juejin.im/post/5b0bb472518825157914f707#heading-0">JSON的第三方库源码阅读分享(ObjectMapper, SwiftyJSON, 以及Codable)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在OC阶段使用模型转换的框架有很多，代表有：&lt;a href=&quot;https://github.com/JSONModel/JSONModel&quot;&gt;JSONModel&lt;/a&gt;、 &lt;a href=&quot;https://github.com/ibireme/YYModel&quot;&gt;YYModel&lt;/a&gt;、&lt;a href=&quot;https://github.com/CoderMJLee/MJExtension&quot;&gt;MJExtension&lt;/a&gt;。&lt;br&gt;OC的原理主要是通过runtime 获取类的属性，在运行时获取Model的字段名集合，遍历该集合，拿Key去JSON中取值并完成赋值。而且Swift 的属性默认并不是动态属性，&lt;strong&gt;我们能在运行时获取一个Model实例的所有字段、字段值，但却无法给它赋值。&lt;/strong&gt;事实上，我们拿到的value是原值的一个只读拷贝，即使获取到这个拷贝的地址写入新值，也是无效的。&lt;br&gt;OC的转换方式虽然在OC中完全适用，但是缺点也很严重，一方面只能只能继承 &lt;code&gt;NSObject&lt;/code&gt; ，并不支持Struct；还有一个更严重的问题，optional 的属性不能正确解析，反正坑还是挺多的。&lt;/p&gt;</summary>
    
    
    
    <category term="IT技术" scheme="https://aichiko0225.github.com/memoirs/categories/IT%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://aichiko0225.github.com/memoirs/tags/iOS/"/>
    
  </entry>
  
</feed>
